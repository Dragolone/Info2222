
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Group
 * 
 */
export type Group = $Result.DefaultSelection<Prisma.$GroupPayload>
/**
 * Model GroupMember
 * 
 */
export type GroupMember = $Result.DefaultSelection<Prisma.$GroupMemberPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model MessageRead
 * 
 */
export type MessageRead = $Result.DefaultSelection<Prisma.$MessageReadPayload>
/**
 * Model UserSecurityLog
 * 
 */
export type UserSecurityLog = $Result.DefaultSelection<Prisma.$UserSecurityLogPayload>
/**
 * Model EncryptionKey
 * 
 */
export type EncryptionKey = $Result.DefaultSelection<Prisma.$EncryptionKeyPayload>
/**
 * Model VulnerabilityDemo
 * 
 */
export type VulnerabilityDemo = $Result.DefaultSelection<Prisma.$VulnerabilityDemoPayload>
/**
 * Model DiscussionBoard
 * 
 */
export type DiscussionBoard = $Result.DefaultSelection<Prisma.$DiscussionBoardPayload>
/**
 * Model DiscussionPost
 * 
 */
export type DiscussionPost = $Result.DefaultSelection<Prisma.$DiscussionPostPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Reaction
 * 
 */
export type Reaction = $Result.DefaultSelection<Prisma.$ReactionPayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model PinnedItem
 * 
 */
export type PinnedItem = $Result.DefaultSelection<Prisma.$PinnedItemPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model TaskAssignment
 * 
 */
export type TaskAssignment = $Result.DefaultSelection<Prisma.$TaskAssignmentPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.groupMember`: Exposes CRUD operations for the **GroupMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupMembers
    * const groupMembers = await prisma.groupMember.findMany()
    * ```
    */
  get groupMember(): Prisma.GroupMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messageRead`: Exposes CRUD operations for the **MessageRead** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageReads
    * const messageReads = await prisma.messageRead.findMany()
    * ```
    */
  get messageRead(): Prisma.MessageReadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSecurityLog`: Exposes CRUD operations for the **UserSecurityLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSecurityLogs
    * const userSecurityLogs = await prisma.userSecurityLog.findMany()
    * ```
    */
  get userSecurityLog(): Prisma.UserSecurityLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.encryptionKey`: Exposes CRUD operations for the **EncryptionKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EncryptionKeys
    * const encryptionKeys = await prisma.encryptionKey.findMany()
    * ```
    */
  get encryptionKey(): Prisma.EncryptionKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vulnerabilityDemo`: Exposes CRUD operations for the **VulnerabilityDemo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VulnerabilityDemos
    * const vulnerabilityDemos = await prisma.vulnerabilityDemo.findMany()
    * ```
    */
  get vulnerabilityDemo(): Prisma.VulnerabilityDemoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.discussionBoard`: Exposes CRUD operations for the **DiscussionBoard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiscussionBoards
    * const discussionBoards = await prisma.discussionBoard.findMany()
    * ```
    */
  get discussionBoard(): Prisma.DiscussionBoardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.discussionPost`: Exposes CRUD operations for the **DiscussionPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiscussionPosts
    * const discussionPosts = await prisma.discussionPost.findMany()
    * ```
    */
  get discussionPost(): Prisma.DiscussionPostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reaction`: Exposes CRUD operations for the **Reaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reactions
    * const reactions = await prisma.reaction.findMany()
    * ```
    */
  get reaction(): Prisma.ReactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pinnedItem`: Exposes CRUD operations for the **PinnedItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PinnedItems
    * const pinnedItems = await prisma.pinnedItem.findMany()
    * ```
    */
  get pinnedItem(): Prisma.PinnedItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taskAssignment`: Exposes CRUD operations for the **TaskAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskAssignments
    * const taskAssignments = await prisma.taskAssignment.findMany()
    * ```
    */
  get taskAssignment(): Prisma.TaskAssignmentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Group: 'Group',
    GroupMember: 'GroupMember',
    Message: 'Message',
    MessageRead: 'MessageRead',
    UserSecurityLog: 'UserSecurityLog',
    EncryptionKey: 'EncryptionKey',
    VulnerabilityDemo: 'VulnerabilityDemo',
    DiscussionBoard: 'DiscussionBoard',
    DiscussionPost: 'DiscussionPost',
    Comment: 'Comment',
    Reaction: 'Reaction',
    File: 'File',
    PinnedItem: 'PinnedItem',
    Task: 'Task',
    TaskAssignment: 'TaskAssignment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "session" | "group" | "groupMember" | "message" | "messageRead" | "userSecurityLog" | "encryptionKey" | "vulnerabilityDemo" | "discussionBoard" | "discussionPost" | "comment" | "reaction" | "file" | "pinnedItem" | "task" | "taskAssignment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Group: {
        payload: Prisma.$GroupPayload<ExtArgs>
        fields: Prisma.GroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findFirst: {
            args: Prisma.GroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findMany: {
            args: Prisma.GroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          create: {
            args: Prisma.GroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          createMany: {
            args: Prisma.GroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          delete: {
            args: Prisma.GroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          update: {
            args: Prisma.GroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          deleteMany: {
            args: Prisma.GroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GroupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          upsert: {
            args: Prisma.GroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          aggregate: {
            args: Prisma.GroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroup>
          }
          groupBy: {
            args: Prisma.GroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupCountArgs<ExtArgs>
            result: $Utils.Optional<GroupCountAggregateOutputType> | number
          }
        }
      }
      GroupMember: {
        payload: Prisma.$GroupMemberPayload<ExtArgs>
        fields: Prisma.GroupMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          findFirst: {
            args: Prisma.GroupMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          findMany: {
            args: Prisma.GroupMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>[]
          }
          create: {
            args: Prisma.GroupMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          createMany: {
            args: Prisma.GroupMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>[]
          }
          delete: {
            args: Prisma.GroupMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          update: {
            args: Prisma.GroupMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          deleteMany: {
            args: Prisma.GroupMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GroupMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>[]
          }
          upsert: {
            args: Prisma.GroupMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMemberPayload>
          }
          aggregate: {
            args: Prisma.GroupMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupMember>
          }
          groupBy: {
            args: Prisma.GroupMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupMemberCountArgs<ExtArgs>
            result: $Utils.Optional<GroupMemberCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      MessageRead: {
        payload: Prisma.$MessageReadPayload<ExtArgs>
        fields: Prisma.MessageReadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageReadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageReadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadPayload>
          }
          findFirst: {
            args: Prisma.MessageReadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageReadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadPayload>
          }
          findMany: {
            args: Prisma.MessageReadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadPayload>[]
          }
          create: {
            args: Prisma.MessageReadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadPayload>
          }
          createMany: {
            args: Prisma.MessageReadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageReadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadPayload>[]
          }
          delete: {
            args: Prisma.MessageReadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadPayload>
          }
          update: {
            args: Prisma.MessageReadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadPayload>
          }
          deleteMany: {
            args: Prisma.MessageReadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageReadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageReadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadPayload>[]
          }
          upsert: {
            args: Prisma.MessageReadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadPayload>
          }
          aggregate: {
            args: Prisma.MessageReadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageRead>
          }
          groupBy: {
            args: Prisma.MessageReadGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageReadGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageReadCountArgs<ExtArgs>
            result: $Utils.Optional<MessageReadCountAggregateOutputType> | number
          }
        }
      }
      UserSecurityLog: {
        payload: Prisma.$UserSecurityLogPayload<ExtArgs>
        fields: Prisma.UserSecurityLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSecurityLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSecurityLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSecurityLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSecurityLogPayload>
          }
          findFirst: {
            args: Prisma.UserSecurityLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSecurityLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSecurityLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSecurityLogPayload>
          }
          findMany: {
            args: Prisma.UserSecurityLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSecurityLogPayload>[]
          }
          create: {
            args: Prisma.UserSecurityLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSecurityLogPayload>
          }
          createMany: {
            args: Prisma.UserSecurityLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSecurityLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSecurityLogPayload>[]
          }
          delete: {
            args: Prisma.UserSecurityLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSecurityLogPayload>
          }
          update: {
            args: Prisma.UserSecurityLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSecurityLogPayload>
          }
          deleteMany: {
            args: Prisma.UserSecurityLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSecurityLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSecurityLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSecurityLogPayload>[]
          }
          upsert: {
            args: Prisma.UserSecurityLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSecurityLogPayload>
          }
          aggregate: {
            args: Prisma.UserSecurityLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSecurityLog>
          }
          groupBy: {
            args: Prisma.UserSecurityLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSecurityLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSecurityLogCountArgs<ExtArgs>
            result: $Utils.Optional<UserSecurityLogCountAggregateOutputType> | number
          }
        }
      }
      EncryptionKey: {
        payload: Prisma.$EncryptionKeyPayload<ExtArgs>
        fields: Prisma.EncryptionKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EncryptionKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EncryptionKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          findFirst: {
            args: Prisma.EncryptionKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EncryptionKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          findMany: {
            args: Prisma.EncryptionKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>[]
          }
          create: {
            args: Prisma.EncryptionKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          createMany: {
            args: Prisma.EncryptionKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EncryptionKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>[]
          }
          delete: {
            args: Prisma.EncryptionKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          update: {
            args: Prisma.EncryptionKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          deleteMany: {
            args: Prisma.EncryptionKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EncryptionKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EncryptionKeyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>[]
          }
          upsert: {
            args: Prisma.EncryptionKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          aggregate: {
            args: Prisma.EncryptionKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEncryptionKey>
          }
          groupBy: {
            args: Prisma.EncryptionKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<EncryptionKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.EncryptionKeyCountArgs<ExtArgs>
            result: $Utils.Optional<EncryptionKeyCountAggregateOutputType> | number
          }
        }
      }
      VulnerabilityDemo: {
        payload: Prisma.$VulnerabilityDemoPayload<ExtArgs>
        fields: Prisma.VulnerabilityDemoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VulnerabilityDemoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityDemoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VulnerabilityDemoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityDemoPayload>
          }
          findFirst: {
            args: Prisma.VulnerabilityDemoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityDemoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VulnerabilityDemoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityDemoPayload>
          }
          findMany: {
            args: Prisma.VulnerabilityDemoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityDemoPayload>[]
          }
          create: {
            args: Prisma.VulnerabilityDemoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityDemoPayload>
          }
          createMany: {
            args: Prisma.VulnerabilityDemoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VulnerabilityDemoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityDemoPayload>[]
          }
          delete: {
            args: Prisma.VulnerabilityDemoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityDemoPayload>
          }
          update: {
            args: Prisma.VulnerabilityDemoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityDemoPayload>
          }
          deleteMany: {
            args: Prisma.VulnerabilityDemoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VulnerabilityDemoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VulnerabilityDemoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityDemoPayload>[]
          }
          upsert: {
            args: Prisma.VulnerabilityDemoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityDemoPayload>
          }
          aggregate: {
            args: Prisma.VulnerabilityDemoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVulnerabilityDemo>
          }
          groupBy: {
            args: Prisma.VulnerabilityDemoGroupByArgs<ExtArgs>
            result: $Utils.Optional<VulnerabilityDemoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VulnerabilityDemoCountArgs<ExtArgs>
            result: $Utils.Optional<VulnerabilityDemoCountAggregateOutputType> | number
          }
        }
      }
      DiscussionBoard: {
        payload: Prisma.$DiscussionBoardPayload<ExtArgs>
        fields: Prisma.DiscussionBoardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscussionBoardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionBoardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscussionBoardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionBoardPayload>
          }
          findFirst: {
            args: Prisma.DiscussionBoardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionBoardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscussionBoardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionBoardPayload>
          }
          findMany: {
            args: Prisma.DiscussionBoardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionBoardPayload>[]
          }
          create: {
            args: Prisma.DiscussionBoardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionBoardPayload>
          }
          createMany: {
            args: Prisma.DiscussionBoardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiscussionBoardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionBoardPayload>[]
          }
          delete: {
            args: Prisma.DiscussionBoardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionBoardPayload>
          }
          update: {
            args: Prisma.DiscussionBoardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionBoardPayload>
          }
          deleteMany: {
            args: Prisma.DiscussionBoardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiscussionBoardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DiscussionBoardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionBoardPayload>[]
          }
          upsert: {
            args: Prisma.DiscussionBoardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionBoardPayload>
          }
          aggregate: {
            args: Prisma.DiscussionBoardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscussionBoard>
          }
          groupBy: {
            args: Prisma.DiscussionBoardGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscussionBoardGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscussionBoardCountArgs<ExtArgs>
            result: $Utils.Optional<DiscussionBoardCountAggregateOutputType> | number
          }
        }
      }
      DiscussionPost: {
        payload: Prisma.$DiscussionPostPayload<ExtArgs>
        fields: Prisma.DiscussionPostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscussionPostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscussionPostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPostPayload>
          }
          findFirst: {
            args: Prisma.DiscussionPostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscussionPostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPostPayload>
          }
          findMany: {
            args: Prisma.DiscussionPostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPostPayload>[]
          }
          create: {
            args: Prisma.DiscussionPostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPostPayload>
          }
          createMany: {
            args: Prisma.DiscussionPostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiscussionPostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPostPayload>[]
          }
          delete: {
            args: Prisma.DiscussionPostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPostPayload>
          }
          update: {
            args: Prisma.DiscussionPostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPostPayload>
          }
          deleteMany: {
            args: Prisma.DiscussionPostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiscussionPostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DiscussionPostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPostPayload>[]
          }
          upsert: {
            args: Prisma.DiscussionPostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPostPayload>
          }
          aggregate: {
            args: Prisma.DiscussionPostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscussionPost>
          }
          groupBy: {
            args: Prisma.DiscussionPostGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscussionPostGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscussionPostCountArgs<ExtArgs>
            result: $Utils.Optional<DiscussionPostCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Reaction: {
        payload: Prisma.$ReactionPayload<ExtArgs>
        fields: Prisma.ReactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          findFirst: {
            args: Prisma.ReactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          findMany: {
            args: Prisma.ReactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>[]
          }
          create: {
            args: Prisma.ReactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          createMany: {
            args: Prisma.ReactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>[]
          }
          delete: {
            args: Prisma.ReactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          update: {
            args: Prisma.ReactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          deleteMany: {
            args: Prisma.ReactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>[]
          }
          upsert: {
            args: Prisma.ReactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          aggregate: {
            args: Prisma.ReactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReaction>
          }
          groupBy: {
            args: Prisma.ReactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReactionCountArgs<ExtArgs>
            result: $Utils.Optional<ReactionCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      PinnedItem: {
        payload: Prisma.$PinnedItemPayload<ExtArgs>
        fields: Prisma.PinnedItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PinnedItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PinnedItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PinnedItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PinnedItemPayload>
          }
          findFirst: {
            args: Prisma.PinnedItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PinnedItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PinnedItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PinnedItemPayload>
          }
          findMany: {
            args: Prisma.PinnedItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PinnedItemPayload>[]
          }
          create: {
            args: Prisma.PinnedItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PinnedItemPayload>
          }
          createMany: {
            args: Prisma.PinnedItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PinnedItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PinnedItemPayload>[]
          }
          delete: {
            args: Prisma.PinnedItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PinnedItemPayload>
          }
          update: {
            args: Prisma.PinnedItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PinnedItemPayload>
          }
          deleteMany: {
            args: Prisma.PinnedItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PinnedItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PinnedItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PinnedItemPayload>[]
          }
          upsert: {
            args: Prisma.PinnedItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PinnedItemPayload>
          }
          aggregate: {
            args: Prisma.PinnedItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePinnedItem>
          }
          groupBy: {
            args: Prisma.PinnedItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<PinnedItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.PinnedItemCountArgs<ExtArgs>
            result: $Utils.Optional<PinnedItemCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      TaskAssignment: {
        payload: Prisma.$TaskAssignmentPayload<ExtArgs>
        fields: Prisma.TaskAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          findFirst: {
            args: Prisma.TaskAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          findMany: {
            args: Prisma.TaskAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>[]
          }
          create: {
            args: Prisma.TaskAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          createMany: {
            args: Prisma.TaskAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>[]
          }
          delete: {
            args: Prisma.TaskAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          update: {
            args: Prisma.TaskAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.TaskAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.TaskAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          aggregate: {
            args: Prisma.TaskAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaskAssignment>
          }
          groupBy: {
            args: Prisma.TaskAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<TaskAssignmentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    session?: SessionOmit
    group?: GroupOmit
    groupMember?: GroupMemberOmit
    message?: MessageOmit
    messageRead?: MessageReadOmit
    userSecurityLog?: UserSecurityLogOmit
    encryptionKey?: EncryptionKeyOmit
    vulnerabilityDemo?: VulnerabilityDemoOmit
    discussionBoard?: DiscussionBoardOmit
    discussionPost?: DiscussionPostOmit
    comment?: CommentOmit
    reaction?: ReactionOmit
    file?: FileOmit
    pinnedItem?: PinnedItemOmit
    task?: TaskOmit
    taskAssignment?: TaskAssignmentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sentMessages: number
    ownedGroups: number
    memberOfGroups: number
    sessions: number
    userSecurityLogs: number
    posts: number
    comments: number
    reactions: number
    uploadedFiles: number
    pinnedItems: number
    tasks: number
    taskAssignments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    ownedGroups?: boolean | UserCountOutputTypeCountOwnedGroupsArgs
    memberOfGroups?: boolean | UserCountOutputTypeCountMemberOfGroupsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    userSecurityLogs?: boolean | UserCountOutputTypeCountUserSecurityLogsArgs
    posts?: boolean | UserCountOutputTypeCountPostsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    reactions?: boolean | UserCountOutputTypeCountReactionsArgs
    uploadedFiles?: boolean | UserCountOutputTypeCountUploadedFilesArgs
    pinnedItems?: boolean | UserCountOutputTypeCountPinnedItemsArgs
    tasks?: boolean | UserCountOutputTypeCountTasksArgs
    taskAssignments?: boolean | UserCountOutputTypeCountTaskAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMemberOfGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserSecurityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSecurityLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionPostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPinnedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PinnedItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTaskAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskAssignmentWhereInput
  }


  /**
   * Count Type GroupCountOutputType
   */

  export type GroupCountOutputType = {
    members: number
    messages: number
    discussionBoards: number
    files: number
    encryptionKeys: number
    pinnedItems: number
    tasks: number
  }

  export type GroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | GroupCountOutputTypeCountMembersArgs
    messages?: boolean | GroupCountOutputTypeCountMessagesArgs
    discussionBoards?: boolean | GroupCountOutputTypeCountDiscussionBoardsArgs
    files?: boolean | GroupCountOutputTypeCountFilesArgs
    encryptionKeys?: boolean | GroupCountOutputTypeCountEncryptionKeysArgs
    pinnedItems?: boolean | GroupCountOutputTypeCountPinnedItemsArgs
    tasks?: boolean | GroupCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupMemberWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountDiscussionBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionBoardWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountEncryptionKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EncryptionKeyWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountPinnedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PinnedItemWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type MessageCountOutputType
   */

  export type MessageCountOutputType = {
    readBy: number
    replies: number
    attachments: number
    reactions: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    readBy?: boolean | MessageCountOutputTypeCountReadByArgs
    replies?: boolean | MessageCountOutputTypeCountRepliesArgs
    attachments?: boolean | MessageCountOutputTypeCountAttachmentsArgs
    reactions?: boolean | MessageCountOutputTypeCountReactionsArgs
  }

  // Custom InputTypes
  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountReadByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageReadWhereInput
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReactionWhereInput
  }


  /**
   * Count Type EncryptionKeyCountOutputType
   */

  export type EncryptionKeyCountOutputType = {
    relatedTo: number
  }

  export type EncryptionKeyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relatedTo?: boolean | EncryptionKeyCountOutputTypeCountRelatedToArgs
  }

  // Custom InputTypes
  /**
   * EncryptionKeyCountOutputType without action
   */
  export type EncryptionKeyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKeyCountOutputType
     */
    select?: EncryptionKeyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EncryptionKeyCountOutputType without action
   */
  export type EncryptionKeyCountOutputTypeCountRelatedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EncryptionKeyWhereInput
  }


  /**
   * Count Type DiscussionBoardCountOutputType
   */

  export type DiscussionBoardCountOutputType = {
    posts: number
  }

  export type DiscussionBoardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | DiscussionBoardCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * DiscussionBoardCountOutputType without action
   */
  export type DiscussionBoardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoardCountOutputType
     */
    select?: DiscussionBoardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DiscussionBoardCountOutputType without action
   */
  export type DiscussionBoardCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionPostWhereInput
  }


  /**
   * Count Type DiscussionPostCountOutputType
   */

  export type DiscussionPostCountOutputType = {
    comments: number
    attachments: number
    reactions: number
  }

  export type DiscussionPostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | DiscussionPostCountOutputTypeCountCommentsArgs
    attachments?: boolean | DiscussionPostCountOutputTypeCountAttachmentsArgs
    reactions?: boolean | DiscussionPostCountOutputTypeCountReactionsArgs
  }

  // Custom InputTypes
  /**
   * DiscussionPostCountOutputType without action
   */
  export type DiscussionPostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPostCountOutputType
     */
    select?: DiscussionPostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DiscussionPostCountOutputType without action
   */
  export type DiscussionPostCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * DiscussionPostCountOutputType without action
   */
  export type DiscussionPostCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * DiscussionPostCountOutputType without action
   */
  export type DiscussionPostCountOutputTypeCountReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReactionWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    replies: number
    reactions: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | CommentCountOutputTypeCountRepliesArgs
    reactions?: boolean | CommentCountOutputTypeCountReactionsArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReactionWhereInput
  }


  /**
   * Count Type FileCountOutputType
   */

  export type FileCountOutputType = {
    comments: number
    reactions: number
    messages: number
    posts: number
  }

  export type FileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | FileCountOutputTypeCountCommentsArgs
    reactions?: boolean | FileCountOutputTypeCountReactionsArgs
    messages?: boolean | FileCountOutputTypeCountMessagesArgs
    posts?: boolean | FileCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileCountOutputType
     */
    select?: FileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReactionWhereInput
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionPostWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    assignments: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | TaskCountOutputTypeCountAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskAssignmentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    hashedPassword: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isVerified: boolean | null
    verificationToken: string | null
    verificationExpires: Date | null
    resetToken: string | null
    resetTokenExpires: Date | null
    lastLogin: Date | null
    twoFactorEnabled: boolean | null
    twoFactorSecret: string | null
    lastPasswordChange: Date | null
    previousPasswordHashes: string | null
    displayName: string | null
    avatarUrl: string | null
    bio: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    hashedPassword: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isVerified: boolean | null
    verificationToken: string | null
    verificationExpires: Date | null
    resetToken: string | null
    resetTokenExpires: Date | null
    lastLogin: Date | null
    twoFactorEnabled: boolean | null
    twoFactorSecret: string | null
    lastPasswordChange: Date | null
    previousPasswordHashes: string | null
    displayName: string | null
    avatarUrl: string | null
    bio: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    hashedPassword: number
    createdAt: number
    updatedAt: number
    isVerified: number
    verificationToken: number
    verificationExpires: number
    resetToken: number
    resetTokenExpires: number
    lastLogin: number
    twoFactorEnabled: number
    twoFactorSecret: number
    lastPasswordChange: number
    previousPasswordHashes: number
    displayName: number
    avatarUrl: number
    bio: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    hashedPassword?: true
    createdAt?: true
    updatedAt?: true
    isVerified?: true
    verificationToken?: true
    verificationExpires?: true
    resetToken?: true
    resetTokenExpires?: true
    lastLogin?: true
    twoFactorEnabled?: true
    twoFactorSecret?: true
    lastPasswordChange?: true
    previousPasswordHashes?: true
    displayName?: true
    avatarUrl?: true
    bio?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    hashedPassword?: true
    createdAt?: true
    updatedAt?: true
    isVerified?: true
    verificationToken?: true
    verificationExpires?: true
    resetToken?: true
    resetTokenExpires?: true
    lastLogin?: true
    twoFactorEnabled?: true
    twoFactorSecret?: true
    lastPasswordChange?: true
    previousPasswordHashes?: true
    displayName?: true
    avatarUrl?: true
    bio?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    hashedPassword?: true
    createdAt?: true
    updatedAt?: true
    isVerified?: true
    verificationToken?: true
    verificationExpires?: true
    resetToken?: true
    resetTokenExpires?: true
    lastLogin?: true
    twoFactorEnabled?: true
    twoFactorSecret?: true
    lastPasswordChange?: true
    previousPasswordHashes?: true
    displayName?: true
    avatarUrl?: true
    bio?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    hashedPassword: string
    createdAt: Date
    updatedAt: Date
    isVerified: boolean
    verificationToken: string | null
    verificationExpires: Date | null
    resetToken: string | null
    resetTokenExpires: Date | null
    lastLogin: Date | null
    twoFactorEnabled: boolean
    twoFactorSecret: string | null
    lastPasswordChange: Date | null
    previousPasswordHashes: string | null
    displayName: string | null
    avatarUrl: string | null
    bio: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    hashedPassword?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    verificationExpires?: boolean
    resetToken?: boolean
    resetTokenExpires?: boolean
    lastLogin?: boolean
    twoFactorEnabled?: boolean
    twoFactorSecret?: boolean
    lastPasswordChange?: boolean
    previousPasswordHashes?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    bio?: boolean
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    ownedGroups?: boolean | User$ownedGroupsArgs<ExtArgs>
    memberOfGroups?: boolean | User$memberOfGroupsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    userSecurityLogs?: boolean | User$userSecurityLogsArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    reactions?: boolean | User$reactionsArgs<ExtArgs>
    uploadedFiles?: boolean | User$uploadedFilesArgs<ExtArgs>
    pinnedItems?: boolean | User$pinnedItemsArgs<ExtArgs>
    tasks?: boolean | User$tasksArgs<ExtArgs>
    taskAssignments?: boolean | User$taskAssignmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    hashedPassword?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    verificationExpires?: boolean
    resetToken?: boolean
    resetTokenExpires?: boolean
    lastLogin?: boolean
    twoFactorEnabled?: boolean
    twoFactorSecret?: boolean
    lastPasswordChange?: boolean
    previousPasswordHashes?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    bio?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    hashedPassword?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    verificationExpires?: boolean
    resetToken?: boolean
    resetTokenExpires?: boolean
    lastLogin?: boolean
    twoFactorEnabled?: boolean
    twoFactorSecret?: boolean
    lastPasswordChange?: boolean
    previousPasswordHashes?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    bio?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    hashedPassword?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    verificationExpires?: boolean
    resetToken?: boolean
    resetTokenExpires?: boolean
    lastLogin?: boolean
    twoFactorEnabled?: boolean
    twoFactorSecret?: boolean
    lastPasswordChange?: boolean
    previousPasswordHashes?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    bio?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "hashedPassword" | "createdAt" | "updatedAt" | "isVerified" | "verificationToken" | "verificationExpires" | "resetToken" | "resetTokenExpires" | "lastLogin" | "twoFactorEnabled" | "twoFactorSecret" | "lastPasswordChange" | "previousPasswordHashes" | "displayName" | "avatarUrl" | "bio", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    ownedGroups?: boolean | User$ownedGroupsArgs<ExtArgs>
    memberOfGroups?: boolean | User$memberOfGroupsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    userSecurityLogs?: boolean | User$userSecurityLogsArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    reactions?: boolean | User$reactionsArgs<ExtArgs>
    uploadedFiles?: boolean | User$uploadedFilesArgs<ExtArgs>
    pinnedItems?: boolean | User$pinnedItemsArgs<ExtArgs>
    tasks?: boolean | User$tasksArgs<ExtArgs>
    taskAssignments?: boolean | User$taskAssignmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sentMessages: Prisma.$MessagePayload<ExtArgs>[]
      ownedGroups: Prisma.$GroupPayload<ExtArgs>[]
      memberOfGroups: Prisma.$GroupMemberPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      userSecurityLogs: Prisma.$UserSecurityLogPayload<ExtArgs>[]
      posts: Prisma.$DiscussionPostPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      reactions: Prisma.$ReactionPayload<ExtArgs>[]
      uploadedFiles: Prisma.$FilePayload<ExtArgs>[]
      pinnedItems: Prisma.$PinnedItemPayload<ExtArgs>[]
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      taskAssignments: Prisma.$TaskAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      hashedPassword: string
      createdAt: Date
      updatedAt: Date
      isVerified: boolean
      verificationToken: string | null
      verificationExpires: Date | null
      resetToken: string | null
      resetTokenExpires: Date | null
      lastLogin: Date | null
      twoFactorEnabled: boolean
      twoFactorSecret: string | null
      lastPasswordChange: Date | null
      previousPasswordHashes: string | null
      displayName: string | null
      avatarUrl: string | null
      bio: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ownedGroups<T extends User$ownedGroupsArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedGroupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    memberOfGroups<T extends User$memberOfGroupsArgs<ExtArgs> = {}>(args?: Subset<T, User$memberOfGroupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userSecurityLogs<T extends User$userSecurityLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$userSecurityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    posts<T extends User$postsArgs<ExtArgs> = {}>(args?: Subset<T, User$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reactions<T extends User$reactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$reactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    uploadedFiles<T extends User$uploadedFilesArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pinnedItems<T extends User$pinnedItemsArgs<ExtArgs> = {}>(args?: Subset<T, User$pinnedItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends User$tasksArgs<ExtArgs> = {}>(args?: Subset<T, User$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    taskAssignments<T extends User$taskAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$taskAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly hashedPassword: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly verificationToken: FieldRef<"User", 'String'>
    readonly verificationExpires: FieldRef<"User", 'DateTime'>
    readonly resetToken: FieldRef<"User", 'String'>
    readonly resetTokenExpires: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly twoFactorEnabled: FieldRef<"User", 'Boolean'>
    readonly twoFactorSecret: FieldRef<"User", 'String'>
    readonly lastPasswordChange: FieldRef<"User", 'DateTime'>
    readonly previousPasswordHashes: FieldRef<"User", 'String'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.ownedGroups
   */
  export type User$ownedGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    cursor?: GroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * User.memberOfGroups
   */
  export type User$memberOfGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    where?: GroupMemberWhereInput
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    cursor?: GroupMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupMemberScalarFieldEnum | GroupMemberScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.userSecurityLogs
   */
  export type User$userSecurityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogInclude<ExtArgs> | null
    where?: UserSecurityLogWhereInput
    orderBy?: UserSecurityLogOrderByWithRelationInput | UserSecurityLogOrderByWithRelationInput[]
    cursor?: UserSecurityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSecurityLogScalarFieldEnum | UserSecurityLogScalarFieldEnum[]
  }

  /**
   * User.posts
   */
  export type User$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    where?: DiscussionPostWhereInput
    orderBy?: DiscussionPostOrderByWithRelationInput | DiscussionPostOrderByWithRelationInput[]
    cursor?: DiscussionPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionPostScalarFieldEnum | DiscussionPostScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.reactions
   */
  export type User$reactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    where?: ReactionWhereInput
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    cursor?: ReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * User.uploadedFiles
   */
  export type User$uploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * User.pinnedItems
   */
  export type User$pinnedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
    where?: PinnedItemWhereInput
    orderBy?: PinnedItemOrderByWithRelationInput | PinnedItemOrderByWithRelationInput[]
    cursor?: PinnedItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PinnedItemScalarFieldEnum | PinnedItemScalarFieldEnum[]
  }

  /**
   * User.tasks
   */
  export type User$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.taskAssignments
   */
  export type User$taskAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    where?: TaskAssignmentWhereInput
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    cursor?: TaskAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskAssignmentScalarFieldEnum | TaskAssignmentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    deviceInfo: string | null
    ipAddress: string | null
    createdAt: Date | null
    expiresAt: Date | null
    isRevoked: boolean | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    deviceInfo: string | null
    ipAddress: string | null
    createdAt: Date | null
    expiresAt: Date | null
    isRevoked: boolean | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    deviceInfo: number
    ipAddress: number
    createdAt: number
    expiresAt: number
    isRevoked: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    deviceInfo?: true
    ipAddress?: true
    createdAt?: true
    expiresAt?: true
    isRevoked?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    deviceInfo?: true
    ipAddress?: true
    createdAt?: true
    expiresAt?: true
    isRevoked?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    deviceInfo?: true
    ipAddress?: true
    createdAt?: true
    expiresAt?: true
    isRevoked?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    deviceInfo: string | null
    ipAddress: string | null
    createdAt: Date
    expiresAt: Date
    isRevoked: boolean
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isRevoked?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isRevoked?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isRevoked?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isRevoked?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "deviceInfo" | "ipAddress" | "createdAt" | "expiresAt" | "isRevoked", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      deviceInfo: string | null
      ipAddress: string | null
      createdAt: Date
      expiresAt: Date
      isRevoked: boolean
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly token: FieldRef<"Session", 'String'>
    readonly deviceInfo: FieldRef<"Session", 'String'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly isRevoked: FieldRef<"Session", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Group
   */

  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
    isPrivate: boolean | null
    avatarUrl: string | null
  }

  export type GroupMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
    isPrivate: boolean | null
    avatarUrl: string | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    ownerId: number
    isPrivate: number
    avatarUrl: number
    _all: number
  }


  export type GroupMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
    isPrivate?: true
    avatarUrl?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
    isPrivate?: true
    avatarUrl?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
    isPrivate?: true
    avatarUrl?: true
    _all?: true
  }

  export type GroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithAggregationInput | GroupOrderByWithAggregationInput[]
    by: GroupScalarFieldEnum[] | GroupScalarFieldEnum
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }

  export type GroupGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    ownerId: string
    isPrivate: boolean
    avatarUrl: string | null
    _count: GroupCountAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    isPrivate?: boolean
    avatarUrl?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    members?: boolean | Group$membersArgs<ExtArgs>
    messages?: boolean | Group$messagesArgs<ExtArgs>
    discussionBoards?: boolean | Group$discussionBoardsArgs<ExtArgs>
    files?: boolean | Group$filesArgs<ExtArgs>
    encryptionKeys?: boolean | Group$encryptionKeysArgs<ExtArgs>
    pinnedItems?: boolean | Group$pinnedItemsArgs<ExtArgs>
    tasks?: boolean | Group$tasksArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    isPrivate?: boolean
    avatarUrl?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    isPrivate?: boolean
    avatarUrl?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    isPrivate?: boolean
    avatarUrl?: boolean
  }

  export type GroupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt" | "ownerId" | "isPrivate" | "avatarUrl", ExtArgs["result"]["group"]>
  export type GroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    members?: boolean | Group$membersArgs<ExtArgs>
    messages?: boolean | Group$messagesArgs<ExtArgs>
    discussionBoards?: boolean | Group$discussionBoardsArgs<ExtArgs>
    files?: boolean | Group$filesArgs<ExtArgs>
    encryptionKeys?: boolean | Group$encryptionKeysArgs<ExtArgs>
    pinnedItems?: boolean | Group$pinnedItemsArgs<ExtArgs>
    tasks?: boolean | Group$tasksArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GroupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Group"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      members: Prisma.$GroupMemberPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      discussionBoards: Prisma.$DiscussionBoardPayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
      encryptionKeys: Prisma.$EncryptionKeyPayload<ExtArgs>[]
      pinnedItems: Prisma.$PinnedItemPayload<ExtArgs>[]
      tasks: Prisma.$TaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
      ownerId: string
      isPrivate: boolean
      avatarUrl: string | null
    }, ExtArgs["result"]["group"]>
    composites: {}
  }

  type GroupGetPayload<S extends boolean | null | undefined | GroupDefaultArgs> = $Result.GetResult<Prisma.$GroupPayload, S>

  type GroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GroupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Group'], meta: { name: 'Group' } }
    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupFindUniqueArgs>(args: SelectSubset<T, GroupFindUniqueArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Group that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupFindFirstArgs>(args?: SelectSubset<T, GroupFindFirstArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Group that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupFindManyArgs>(args?: SelectSubset<T, GroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
     */
    create<T extends GroupCreateArgs>(args: SelectSubset<T, GroupCreateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Groups.
     * @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupCreateManyArgs>(args?: SelectSubset<T, GroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Groups and returns the data saved in the database.
     * @param {GroupCreateManyAndReturnArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Groups and only return the `id`
     * const groupWithIdOnly = await prisma.group.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
     */
    delete<T extends GroupDeleteArgs>(args: SelectSubset<T, GroupDeleteArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupUpdateArgs>(args: SelectSubset<T, GroupUpdateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupDeleteManyArgs>(args?: SelectSubset<T, GroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupUpdateManyArgs>(args: SelectSubset<T, GroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups and returns the data updated in the database.
     * @param {GroupUpdateManyAndReturnArgs} args - Arguments to update many Groups.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Groups and only return the `id`
     * const groupWithIdOnly = await prisma.group.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GroupUpdateManyAndReturnArgs>(args: SelectSubset<T, GroupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
     */
    upsert<T extends GroupUpsertArgs>(args: SelectSubset<T, GroupUpsertArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Group model
   */
  readonly fields: GroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    members<T extends Group$membersArgs<ExtArgs> = {}>(args?: Subset<T, Group$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends Group$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Group$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    discussionBoards<T extends Group$discussionBoardsArgs<ExtArgs> = {}>(args?: Subset<T, Group$discussionBoardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends Group$filesArgs<ExtArgs> = {}>(args?: Subset<T, Group$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    encryptionKeys<T extends Group$encryptionKeysArgs<ExtArgs> = {}>(args?: Subset<T, Group$encryptionKeysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pinnedItems<T extends Group$pinnedItemsArgs<ExtArgs> = {}>(args?: Subset<T, Group$pinnedItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends Group$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Group$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Group model
   */
  interface GroupFieldRefs {
    readonly id: FieldRef<"Group", 'String'>
    readonly name: FieldRef<"Group", 'String'>
    readonly description: FieldRef<"Group", 'String'>
    readonly createdAt: FieldRef<"Group", 'DateTime'>
    readonly updatedAt: FieldRef<"Group", 'DateTime'>
    readonly ownerId: FieldRef<"Group", 'String'>
    readonly isPrivate: FieldRef<"Group", 'Boolean'>
    readonly avatarUrl: FieldRef<"Group", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Group findUnique
   */
  export type GroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findFirst
   */
  export type GroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findMany
   */
  export type GroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group create
   */
  export type GroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }

  /**
   * Group createMany
   */
  export type GroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
  }

  /**
   * Group createManyAndReturn
   */
  export type GroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Group update
   */
  export type GroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
    /**
     * Limit how many Groups to update.
     */
    limit?: number
  }

  /**
   * Group updateManyAndReturn
   */
  export type GroupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
    /**
     * Limit how many Groups to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Group upsert
   */
  export type GroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }

  /**
   * Group delete
   */
  export type GroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
    /**
     * Limit how many Groups to delete.
     */
    limit?: number
  }

  /**
   * Group.members
   */
  export type Group$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    where?: GroupMemberWhereInput
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    cursor?: GroupMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupMemberScalarFieldEnum | GroupMemberScalarFieldEnum[]
  }

  /**
   * Group.messages
   */
  export type Group$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Group.discussionBoards
   */
  export type Group$discussionBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardInclude<ExtArgs> | null
    where?: DiscussionBoardWhereInput
    orderBy?: DiscussionBoardOrderByWithRelationInput | DiscussionBoardOrderByWithRelationInput[]
    cursor?: DiscussionBoardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionBoardScalarFieldEnum | DiscussionBoardScalarFieldEnum[]
  }

  /**
   * Group.files
   */
  export type Group$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Group.encryptionKeys
   */
  export type Group$encryptionKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    where?: EncryptionKeyWhereInput
    orderBy?: EncryptionKeyOrderByWithRelationInput | EncryptionKeyOrderByWithRelationInput[]
    cursor?: EncryptionKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EncryptionKeyScalarFieldEnum | EncryptionKeyScalarFieldEnum[]
  }

  /**
   * Group.pinnedItems
   */
  export type Group$pinnedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
    where?: PinnedItemWhereInput
    orderBy?: PinnedItemOrderByWithRelationInput | PinnedItemOrderByWithRelationInput[]
    cursor?: PinnedItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PinnedItemScalarFieldEnum | PinnedItemScalarFieldEnum[]
  }

  /**
   * Group.tasks
   */
  export type Group$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Group without action
   */
  export type GroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
  }


  /**
   * Model GroupMember
   */

  export type AggregateGroupMember = {
    _count: GroupMemberCountAggregateOutputType | null
    _min: GroupMemberMinAggregateOutputType | null
    _max: GroupMemberMaxAggregateOutputType | null
  }

  export type GroupMemberMinAggregateOutputType = {
    id: string | null
    userId: string | null
    groupId: string | null
    role: string | null
    joinedAt: Date | null
    invitedBy: string | null
    notifyOnNewMessage: boolean | null
    notifyOnMention: boolean | null
    notifyOnNewDiscussion: boolean | null
  }

  export type GroupMemberMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    groupId: string | null
    role: string | null
    joinedAt: Date | null
    invitedBy: string | null
    notifyOnNewMessage: boolean | null
    notifyOnMention: boolean | null
    notifyOnNewDiscussion: boolean | null
  }

  export type GroupMemberCountAggregateOutputType = {
    id: number
    userId: number
    groupId: number
    role: number
    joinedAt: number
    invitedBy: number
    notifyOnNewMessage: number
    notifyOnMention: number
    notifyOnNewDiscussion: number
    _all: number
  }


  export type GroupMemberMinAggregateInputType = {
    id?: true
    userId?: true
    groupId?: true
    role?: true
    joinedAt?: true
    invitedBy?: true
    notifyOnNewMessage?: true
    notifyOnMention?: true
    notifyOnNewDiscussion?: true
  }

  export type GroupMemberMaxAggregateInputType = {
    id?: true
    userId?: true
    groupId?: true
    role?: true
    joinedAt?: true
    invitedBy?: true
    notifyOnNewMessage?: true
    notifyOnMention?: true
    notifyOnNewDiscussion?: true
  }

  export type GroupMemberCountAggregateInputType = {
    id?: true
    userId?: true
    groupId?: true
    role?: true
    joinedAt?: true
    invitedBy?: true
    notifyOnNewMessage?: true
    notifyOnMention?: true
    notifyOnNewDiscussion?: true
    _all?: true
  }

  export type GroupMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupMember to aggregate.
     */
    where?: GroupMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMembers to fetch.
     */
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupMembers
    **/
    _count?: true | GroupMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMemberMaxAggregateInputType
  }

  export type GetGroupMemberAggregateType<T extends GroupMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupMember[P]>
      : GetScalarType<T[P], AggregateGroupMember[P]>
  }




  export type GroupMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupMemberWhereInput
    orderBy?: GroupMemberOrderByWithAggregationInput | GroupMemberOrderByWithAggregationInput[]
    by: GroupMemberScalarFieldEnum[] | GroupMemberScalarFieldEnum
    having?: GroupMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupMemberCountAggregateInputType | true
    _min?: GroupMemberMinAggregateInputType
    _max?: GroupMemberMaxAggregateInputType
  }

  export type GroupMemberGroupByOutputType = {
    id: string
    userId: string
    groupId: string
    role: string
    joinedAt: Date
    invitedBy: string | null
    notifyOnNewMessage: boolean
    notifyOnMention: boolean
    notifyOnNewDiscussion: boolean
    _count: GroupMemberCountAggregateOutputType | null
    _min: GroupMemberMinAggregateOutputType | null
    _max: GroupMemberMaxAggregateOutputType | null
  }

  type GetGroupMemberGroupByPayload<T extends GroupMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupMemberGroupByOutputType[P]>
            : GetScalarType<T[P], GroupMemberGroupByOutputType[P]>
        }
      >
    >


  export type GroupMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    groupId?: boolean
    role?: boolean
    joinedAt?: boolean
    invitedBy?: boolean
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupMember"]>

  export type GroupMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    groupId?: boolean
    role?: boolean
    joinedAt?: boolean
    invitedBy?: boolean
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupMember"]>

  export type GroupMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    groupId?: boolean
    role?: boolean
    joinedAt?: boolean
    invitedBy?: boolean
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupMember"]>

  export type GroupMemberSelectScalar = {
    id?: boolean
    userId?: boolean
    groupId?: boolean
    role?: boolean
    joinedAt?: boolean
    invitedBy?: boolean
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
  }

  export type GroupMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "groupId" | "role" | "joinedAt" | "invitedBy" | "notifyOnNewMessage" | "notifyOnMention" | "notifyOnNewDiscussion", ExtArgs["result"]["groupMember"]>
  export type GroupMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }
  export type GroupMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }
  export type GroupMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $GroupMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      group: Prisma.$GroupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      groupId: string
      role: string
      joinedAt: Date
      invitedBy: string | null
      notifyOnNewMessage: boolean
      notifyOnMention: boolean
      notifyOnNewDiscussion: boolean
    }, ExtArgs["result"]["groupMember"]>
    composites: {}
  }

  type GroupMemberGetPayload<S extends boolean | null | undefined | GroupMemberDefaultArgs> = $Result.GetResult<Prisma.$GroupMemberPayload, S>

  type GroupMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GroupMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GroupMemberCountAggregateInputType | true
    }

  export interface GroupMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupMember'], meta: { name: 'GroupMember' } }
    /**
     * Find zero or one GroupMember that matches the filter.
     * @param {GroupMemberFindUniqueArgs} args - Arguments to find a GroupMember
     * @example
     * // Get one GroupMember
     * const groupMember = await prisma.groupMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupMemberFindUniqueArgs>(args: SelectSubset<T, GroupMemberFindUniqueArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GroupMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GroupMemberFindUniqueOrThrowArgs} args - Arguments to find a GroupMember
     * @example
     * // Get one GroupMember
     * const groupMember = await prisma.groupMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberFindFirstArgs} args - Arguments to find a GroupMember
     * @example
     * // Get one GroupMember
     * const groupMember = await prisma.groupMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupMemberFindFirstArgs>(args?: SelectSubset<T, GroupMemberFindFirstArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberFindFirstOrThrowArgs} args - Arguments to find a GroupMember
     * @example
     * // Get one GroupMember
     * const groupMember = await prisma.groupMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GroupMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupMembers
     * const groupMembers = await prisma.groupMember.findMany()
     * 
     * // Get first 10 GroupMembers
     * const groupMembers = await prisma.groupMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupMemberWithIdOnly = await prisma.groupMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupMemberFindManyArgs>(args?: SelectSubset<T, GroupMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GroupMember.
     * @param {GroupMemberCreateArgs} args - Arguments to create a GroupMember.
     * @example
     * // Create one GroupMember
     * const GroupMember = await prisma.groupMember.create({
     *   data: {
     *     // ... data to create a GroupMember
     *   }
     * })
     * 
     */
    create<T extends GroupMemberCreateArgs>(args: SelectSubset<T, GroupMemberCreateArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GroupMembers.
     * @param {GroupMemberCreateManyArgs} args - Arguments to create many GroupMembers.
     * @example
     * // Create many GroupMembers
     * const groupMember = await prisma.groupMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupMemberCreateManyArgs>(args?: SelectSubset<T, GroupMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GroupMembers and returns the data saved in the database.
     * @param {GroupMemberCreateManyAndReturnArgs} args - Arguments to create many GroupMembers.
     * @example
     * // Create many GroupMembers
     * const groupMember = await prisma.groupMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GroupMembers and only return the `id`
     * const groupMemberWithIdOnly = await prisma.groupMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GroupMember.
     * @param {GroupMemberDeleteArgs} args - Arguments to delete one GroupMember.
     * @example
     * // Delete one GroupMember
     * const GroupMember = await prisma.groupMember.delete({
     *   where: {
     *     // ... filter to delete one GroupMember
     *   }
     * })
     * 
     */
    delete<T extends GroupMemberDeleteArgs>(args: SelectSubset<T, GroupMemberDeleteArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GroupMember.
     * @param {GroupMemberUpdateArgs} args - Arguments to update one GroupMember.
     * @example
     * // Update one GroupMember
     * const groupMember = await prisma.groupMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupMemberUpdateArgs>(args: SelectSubset<T, GroupMemberUpdateArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GroupMembers.
     * @param {GroupMemberDeleteManyArgs} args - Arguments to filter GroupMembers to delete.
     * @example
     * // Delete a few GroupMembers
     * const { count } = await prisma.groupMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupMemberDeleteManyArgs>(args?: SelectSubset<T, GroupMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupMembers
     * const groupMember = await prisma.groupMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupMemberUpdateManyArgs>(args: SelectSubset<T, GroupMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupMembers and returns the data updated in the database.
     * @param {GroupMemberUpdateManyAndReturnArgs} args - Arguments to update many GroupMembers.
     * @example
     * // Update many GroupMembers
     * const groupMember = await prisma.groupMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GroupMembers and only return the `id`
     * const groupMemberWithIdOnly = await prisma.groupMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GroupMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, GroupMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GroupMember.
     * @param {GroupMemberUpsertArgs} args - Arguments to update or create a GroupMember.
     * @example
     * // Update or create a GroupMember
     * const groupMember = await prisma.groupMember.upsert({
     *   create: {
     *     // ... data to create a GroupMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupMember we want to update
     *   }
     * })
     */
    upsert<T extends GroupMemberUpsertArgs>(args: SelectSubset<T, GroupMemberUpsertArgs<ExtArgs>>): Prisma__GroupMemberClient<$Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GroupMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberCountArgs} args - Arguments to filter GroupMembers to count.
     * @example
     * // Count the number of GroupMembers
     * const count = await prisma.groupMember.count({
     *   where: {
     *     // ... the filter for the GroupMembers we want to count
     *   }
     * })
    **/
    count<T extends GroupMemberCountArgs>(
      args?: Subset<T, GroupMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupMemberAggregateArgs>(args: Subset<T, GroupMemberAggregateArgs>): Prisma.PrismaPromise<GetGroupMemberAggregateType<T>>

    /**
     * Group by GroupMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupMemberGroupByArgs['orderBy'] }
        : { orderBy?: GroupMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupMember model
   */
  readonly fields: GroupMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    group<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupMember model
   */
  interface GroupMemberFieldRefs {
    readonly id: FieldRef<"GroupMember", 'String'>
    readonly userId: FieldRef<"GroupMember", 'String'>
    readonly groupId: FieldRef<"GroupMember", 'String'>
    readonly role: FieldRef<"GroupMember", 'String'>
    readonly joinedAt: FieldRef<"GroupMember", 'DateTime'>
    readonly invitedBy: FieldRef<"GroupMember", 'String'>
    readonly notifyOnNewMessage: FieldRef<"GroupMember", 'Boolean'>
    readonly notifyOnMention: FieldRef<"GroupMember", 'Boolean'>
    readonly notifyOnNewDiscussion: FieldRef<"GroupMember", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * GroupMember findUnique
   */
  export type GroupMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter, which GroupMember to fetch.
     */
    where: GroupMemberWhereUniqueInput
  }

  /**
   * GroupMember findUniqueOrThrow
   */
  export type GroupMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter, which GroupMember to fetch.
     */
    where: GroupMemberWhereUniqueInput
  }

  /**
   * GroupMember findFirst
   */
  export type GroupMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter, which GroupMember to fetch.
     */
    where?: GroupMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMembers to fetch.
     */
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupMembers.
     */
    cursor?: GroupMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupMembers.
     */
    distinct?: GroupMemberScalarFieldEnum | GroupMemberScalarFieldEnum[]
  }

  /**
   * GroupMember findFirstOrThrow
   */
  export type GroupMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter, which GroupMember to fetch.
     */
    where?: GroupMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMembers to fetch.
     */
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupMembers.
     */
    cursor?: GroupMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupMembers.
     */
    distinct?: GroupMemberScalarFieldEnum | GroupMemberScalarFieldEnum[]
  }

  /**
   * GroupMember findMany
   */
  export type GroupMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter, which GroupMembers to fetch.
     */
    where?: GroupMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMembers to fetch.
     */
    orderBy?: GroupMemberOrderByWithRelationInput | GroupMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupMembers.
     */
    cursor?: GroupMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMembers.
     */
    skip?: number
    distinct?: GroupMemberScalarFieldEnum | GroupMemberScalarFieldEnum[]
  }

  /**
   * GroupMember create
   */
  export type GroupMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupMember.
     */
    data: XOR<GroupMemberCreateInput, GroupMemberUncheckedCreateInput>
  }

  /**
   * GroupMember createMany
   */
  export type GroupMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupMembers.
     */
    data: GroupMemberCreateManyInput | GroupMemberCreateManyInput[]
  }

  /**
   * GroupMember createManyAndReturn
   */
  export type GroupMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * The data used to create many GroupMembers.
     */
    data: GroupMemberCreateManyInput | GroupMemberCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupMember update
   */
  export type GroupMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupMember.
     */
    data: XOR<GroupMemberUpdateInput, GroupMemberUncheckedUpdateInput>
    /**
     * Choose, which GroupMember to update.
     */
    where: GroupMemberWhereUniqueInput
  }

  /**
   * GroupMember updateMany
   */
  export type GroupMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupMembers.
     */
    data: XOR<GroupMemberUpdateManyMutationInput, GroupMemberUncheckedUpdateManyInput>
    /**
     * Filter which GroupMembers to update
     */
    where?: GroupMemberWhereInput
    /**
     * Limit how many GroupMembers to update.
     */
    limit?: number
  }

  /**
   * GroupMember updateManyAndReturn
   */
  export type GroupMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * The data used to update GroupMembers.
     */
    data: XOR<GroupMemberUpdateManyMutationInput, GroupMemberUncheckedUpdateManyInput>
    /**
     * Filter which GroupMembers to update
     */
    where?: GroupMemberWhereInput
    /**
     * Limit how many GroupMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupMember upsert
   */
  export type GroupMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupMember to update in case it exists.
     */
    where: GroupMemberWhereUniqueInput
    /**
     * In case the GroupMember found by the `where` argument doesn't exist, create a new GroupMember with this data.
     */
    create: XOR<GroupMemberCreateInput, GroupMemberUncheckedCreateInput>
    /**
     * In case the GroupMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupMemberUpdateInput, GroupMemberUncheckedUpdateInput>
  }

  /**
   * GroupMember delete
   */
  export type GroupMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
    /**
     * Filter which GroupMember to delete.
     */
    where: GroupMemberWhereUniqueInput
  }

  /**
   * GroupMember deleteMany
   */
  export type GroupMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupMembers to delete
     */
    where?: GroupMemberWhereInput
    /**
     * Limit how many GroupMembers to delete.
     */
    limit?: number
  }

  /**
   * GroupMember without action
   */
  export type GroupMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMember
     */
    select?: GroupMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupMember
     */
    omit?: GroupMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMemberInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    senderId: string | null
    groupId: string | null
    encryptedContent: string | null
    iv: string | null
    keyId: string | null
    metaData: string | null
    createdAt: Date | null
    updatedAt: Date | null
    replyToId: string | null
    ephemeralExpiry: Date | null
    isEphemeral: boolean | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    senderId: string | null
    groupId: string | null
    encryptedContent: string | null
    iv: string | null
    keyId: string | null
    metaData: string | null
    createdAt: Date | null
    updatedAt: Date | null
    replyToId: string | null
    ephemeralExpiry: Date | null
    isEphemeral: boolean | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    senderId: number
    groupId: number
    encryptedContent: number
    iv: number
    keyId: number
    metaData: number
    createdAt: number
    updatedAt: number
    replyToId: number
    ephemeralExpiry: number
    isEphemeral: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    senderId?: true
    groupId?: true
    encryptedContent?: true
    iv?: true
    keyId?: true
    metaData?: true
    createdAt?: true
    updatedAt?: true
    replyToId?: true
    ephemeralExpiry?: true
    isEphemeral?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    senderId?: true
    groupId?: true
    encryptedContent?: true
    iv?: true
    keyId?: true
    metaData?: true
    createdAt?: true
    updatedAt?: true
    replyToId?: true
    ephemeralExpiry?: true
    isEphemeral?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    senderId?: true
    groupId?: true
    encryptedContent?: true
    iv?: true
    keyId?: true
    metaData?: true
    createdAt?: true
    updatedAt?: true
    replyToId?: true
    ephemeralExpiry?: true
    isEphemeral?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    senderId: string
    groupId: string
    encryptedContent: string
    iv: string
    keyId: string | null
    metaData: string | null
    createdAt: Date
    updatedAt: Date
    replyToId: string | null
    ephemeralExpiry: Date | null
    isEphemeral: boolean
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    groupId?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    metaData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    replyToId?: boolean
    ephemeralExpiry?: boolean
    isEphemeral?: boolean
    readBy?: boolean | Message$readByArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
    replyTo?: boolean | Message$replyToArgs<ExtArgs>
    replies?: boolean | Message$repliesArgs<ExtArgs>
    attachments?: boolean | Message$attachmentsArgs<ExtArgs>
    reactions?: boolean | Message$reactionsArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    groupId?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    metaData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    replyToId?: boolean
    ephemeralExpiry?: boolean
    isEphemeral?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
    replyTo?: boolean | Message$replyToArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    groupId?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    metaData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    replyToId?: boolean
    ephemeralExpiry?: boolean
    isEphemeral?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
    replyTo?: boolean | Message$replyToArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    senderId?: boolean
    groupId?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    metaData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    replyToId?: boolean
    ephemeralExpiry?: boolean
    isEphemeral?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "senderId" | "groupId" | "encryptedContent" | "iv" | "keyId" | "metaData" | "createdAt" | "updatedAt" | "replyToId" | "ephemeralExpiry" | "isEphemeral", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    readBy?: boolean | Message$readByArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
    replyTo?: boolean | Message$replyToArgs<ExtArgs>
    replies?: boolean | Message$repliesArgs<ExtArgs>
    attachments?: boolean | Message$attachmentsArgs<ExtArgs>
    reactions?: boolean | Message$reactionsArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
    replyTo?: boolean | Message$replyToArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
    replyTo?: boolean | Message$replyToArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      readBy: Prisma.$MessageReadPayload<ExtArgs>[]
      sender: Prisma.$UserPayload<ExtArgs>
      group: Prisma.$GroupPayload<ExtArgs>
      replyTo: Prisma.$MessagePayload<ExtArgs> | null
      replies: Prisma.$MessagePayload<ExtArgs>[]
      attachments: Prisma.$FilePayload<ExtArgs>[]
      reactions: Prisma.$ReactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      senderId: string
      groupId: string
      encryptedContent: string
      iv: string
      keyId: string | null
      metaData: string | null
      createdAt: Date
      updatedAt: Date
      replyToId: string | null
      ephemeralExpiry: Date | null
      isEphemeral: boolean
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    readBy<T extends Message$readByArgs<ExtArgs> = {}>(args?: Subset<T, Message$readByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    group<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    replyTo<T extends Message$replyToArgs<ExtArgs> = {}>(args?: Subset<T, Message$replyToArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    replies<T extends Message$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Message$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attachments<T extends Message$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Message$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reactions<T extends Message$reactionsArgs<ExtArgs> = {}>(args?: Subset<T, Message$reactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly groupId: FieldRef<"Message", 'String'>
    readonly encryptedContent: FieldRef<"Message", 'String'>
    readonly iv: FieldRef<"Message", 'String'>
    readonly keyId: FieldRef<"Message", 'String'>
    readonly metaData: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly updatedAt: FieldRef<"Message", 'DateTime'>
    readonly replyToId: FieldRef<"Message", 'String'>
    readonly ephemeralExpiry: FieldRef<"Message", 'DateTime'>
    readonly isEphemeral: FieldRef<"Message", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message.readBy
   */
  export type Message$readByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadInclude<ExtArgs> | null
    where?: MessageReadWhereInput
    orderBy?: MessageReadOrderByWithRelationInput | MessageReadOrderByWithRelationInput[]
    cursor?: MessageReadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageReadScalarFieldEnum | MessageReadScalarFieldEnum[]
  }

  /**
   * Message.replyTo
   */
  export type Message$replyToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
  }

  /**
   * Message.replies
   */
  export type Message$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message.attachments
   */
  export type Message$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Message.reactions
   */
  export type Message$reactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    where?: ReactionWhereInput
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    cursor?: ReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model MessageRead
   */

  export type AggregateMessageRead = {
    _count: MessageReadCountAggregateOutputType | null
    _min: MessageReadMinAggregateOutputType | null
    _max: MessageReadMaxAggregateOutputType | null
  }

  export type MessageReadMinAggregateOutputType = {
    id: string | null
    messageId: string | null
    userId: string | null
    readAt: Date | null
  }

  export type MessageReadMaxAggregateOutputType = {
    id: string | null
    messageId: string | null
    userId: string | null
    readAt: Date | null
  }

  export type MessageReadCountAggregateOutputType = {
    id: number
    messageId: number
    userId: number
    readAt: number
    _all: number
  }


  export type MessageReadMinAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    readAt?: true
  }

  export type MessageReadMaxAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    readAt?: true
  }

  export type MessageReadCountAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    readAt?: true
    _all?: true
  }

  export type MessageReadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageRead to aggregate.
     */
    where?: MessageReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReads to fetch.
     */
    orderBy?: MessageReadOrderByWithRelationInput | MessageReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageReads
    **/
    _count?: true | MessageReadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageReadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageReadMaxAggregateInputType
  }

  export type GetMessageReadAggregateType<T extends MessageReadAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageRead]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageRead[P]>
      : GetScalarType<T[P], AggregateMessageRead[P]>
  }




  export type MessageReadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageReadWhereInput
    orderBy?: MessageReadOrderByWithAggregationInput | MessageReadOrderByWithAggregationInput[]
    by: MessageReadScalarFieldEnum[] | MessageReadScalarFieldEnum
    having?: MessageReadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageReadCountAggregateInputType | true
    _min?: MessageReadMinAggregateInputType
    _max?: MessageReadMaxAggregateInputType
  }

  export type MessageReadGroupByOutputType = {
    id: string
    messageId: string
    userId: string
    readAt: Date
    _count: MessageReadCountAggregateOutputType | null
    _min: MessageReadMinAggregateOutputType | null
    _max: MessageReadMaxAggregateOutputType | null
  }

  type GetMessageReadGroupByPayload<T extends MessageReadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageReadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageReadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageReadGroupByOutputType[P]>
            : GetScalarType<T[P], MessageReadGroupByOutputType[P]>
        }
      >
    >


  export type MessageReadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    readAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageRead"]>

  export type MessageReadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    readAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageRead"]>

  export type MessageReadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    readAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageRead"]>

  export type MessageReadSelectScalar = {
    id?: boolean
    messageId?: boolean
    userId?: boolean
    readAt?: boolean
  }

  export type MessageReadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "messageId" | "userId" | "readAt", ExtArgs["result"]["messageRead"]>
  export type MessageReadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }
  export type MessageReadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }
  export type MessageReadIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }

  export type $MessageReadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageRead"
    objects: {
      message: Prisma.$MessagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageId: string
      userId: string
      readAt: Date
    }, ExtArgs["result"]["messageRead"]>
    composites: {}
  }

  type MessageReadGetPayload<S extends boolean | null | undefined | MessageReadDefaultArgs> = $Result.GetResult<Prisma.$MessageReadPayload, S>

  type MessageReadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageReadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageReadCountAggregateInputType | true
    }

  export interface MessageReadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageRead'], meta: { name: 'MessageRead' } }
    /**
     * Find zero or one MessageRead that matches the filter.
     * @param {MessageReadFindUniqueArgs} args - Arguments to find a MessageRead
     * @example
     * // Get one MessageRead
     * const messageRead = await prisma.messageRead.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageReadFindUniqueArgs>(args: SelectSubset<T, MessageReadFindUniqueArgs<ExtArgs>>): Prisma__MessageReadClient<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessageRead that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageReadFindUniqueOrThrowArgs} args - Arguments to find a MessageRead
     * @example
     * // Get one MessageRead
     * const messageRead = await prisma.messageRead.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageReadFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageReadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageReadClient<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageRead that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadFindFirstArgs} args - Arguments to find a MessageRead
     * @example
     * // Get one MessageRead
     * const messageRead = await prisma.messageRead.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageReadFindFirstArgs>(args?: SelectSubset<T, MessageReadFindFirstArgs<ExtArgs>>): Prisma__MessageReadClient<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageRead that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadFindFirstOrThrowArgs} args - Arguments to find a MessageRead
     * @example
     * // Get one MessageRead
     * const messageRead = await prisma.messageRead.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageReadFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageReadFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageReadClient<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessageReads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageReads
     * const messageReads = await prisma.messageRead.findMany()
     * 
     * // Get first 10 MessageReads
     * const messageReads = await prisma.messageRead.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageReadWithIdOnly = await prisma.messageRead.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageReadFindManyArgs>(args?: SelectSubset<T, MessageReadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessageRead.
     * @param {MessageReadCreateArgs} args - Arguments to create a MessageRead.
     * @example
     * // Create one MessageRead
     * const MessageRead = await prisma.messageRead.create({
     *   data: {
     *     // ... data to create a MessageRead
     *   }
     * })
     * 
     */
    create<T extends MessageReadCreateArgs>(args: SelectSubset<T, MessageReadCreateArgs<ExtArgs>>): Prisma__MessageReadClient<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessageReads.
     * @param {MessageReadCreateManyArgs} args - Arguments to create many MessageReads.
     * @example
     * // Create many MessageReads
     * const messageRead = await prisma.messageRead.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageReadCreateManyArgs>(args?: SelectSubset<T, MessageReadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageReads and returns the data saved in the database.
     * @param {MessageReadCreateManyAndReturnArgs} args - Arguments to create many MessageReads.
     * @example
     * // Create many MessageReads
     * const messageRead = await prisma.messageRead.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageReads and only return the `id`
     * const messageReadWithIdOnly = await prisma.messageRead.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageReadCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageReadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessageRead.
     * @param {MessageReadDeleteArgs} args - Arguments to delete one MessageRead.
     * @example
     * // Delete one MessageRead
     * const MessageRead = await prisma.messageRead.delete({
     *   where: {
     *     // ... filter to delete one MessageRead
     *   }
     * })
     * 
     */
    delete<T extends MessageReadDeleteArgs>(args: SelectSubset<T, MessageReadDeleteArgs<ExtArgs>>): Prisma__MessageReadClient<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessageRead.
     * @param {MessageReadUpdateArgs} args - Arguments to update one MessageRead.
     * @example
     * // Update one MessageRead
     * const messageRead = await prisma.messageRead.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageReadUpdateArgs>(args: SelectSubset<T, MessageReadUpdateArgs<ExtArgs>>): Prisma__MessageReadClient<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessageReads.
     * @param {MessageReadDeleteManyArgs} args - Arguments to filter MessageReads to delete.
     * @example
     * // Delete a few MessageReads
     * const { count } = await prisma.messageRead.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageReadDeleteManyArgs>(args?: SelectSubset<T, MessageReadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageReads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageReads
     * const messageRead = await prisma.messageRead.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageReadUpdateManyArgs>(args: SelectSubset<T, MessageReadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageReads and returns the data updated in the database.
     * @param {MessageReadUpdateManyAndReturnArgs} args - Arguments to update many MessageReads.
     * @example
     * // Update many MessageReads
     * const messageRead = await prisma.messageRead.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessageReads and only return the `id`
     * const messageReadWithIdOnly = await prisma.messageRead.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageReadUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageReadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessageRead.
     * @param {MessageReadUpsertArgs} args - Arguments to update or create a MessageRead.
     * @example
     * // Update or create a MessageRead
     * const messageRead = await prisma.messageRead.upsert({
     *   create: {
     *     // ... data to create a MessageRead
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageRead we want to update
     *   }
     * })
     */
    upsert<T extends MessageReadUpsertArgs>(args: SelectSubset<T, MessageReadUpsertArgs<ExtArgs>>): Prisma__MessageReadClient<$Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessageReads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadCountArgs} args - Arguments to filter MessageReads to count.
     * @example
     * // Count the number of MessageReads
     * const count = await prisma.messageRead.count({
     *   where: {
     *     // ... the filter for the MessageReads we want to count
     *   }
     * })
    **/
    count<T extends MessageReadCountArgs>(
      args?: Subset<T, MessageReadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageReadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageRead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageReadAggregateArgs>(args: Subset<T, MessageReadAggregateArgs>): Prisma.PrismaPromise<GetMessageReadAggregateType<T>>

    /**
     * Group by MessageRead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageReadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageReadGroupByArgs['orderBy'] }
        : { orderBy?: MessageReadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageReadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageReadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageRead model
   */
  readonly fields: MessageReadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageRead.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageReadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageRead model
   */
  interface MessageReadFieldRefs {
    readonly id: FieldRef<"MessageRead", 'String'>
    readonly messageId: FieldRef<"MessageRead", 'String'>
    readonly userId: FieldRef<"MessageRead", 'String'>
    readonly readAt: FieldRef<"MessageRead", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessageRead findUnique
   */
  export type MessageReadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadInclude<ExtArgs> | null
    /**
     * Filter, which MessageRead to fetch.
     */
    where: MessageReadWhereUniqueInput
  }

  /**
   * MessageRead findUniqueOrThrow
   */
  export type MessageReadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadInclude<ExtArgs> | null
    /**
     * Filter, which MessageRead to fetch.
     */
    where: MessageReadWhereUniqueInput
  }

  /**
   * MessageRead findFirst
   */
  export type MessageReadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadInclude<ExtArgs> | null
    /**
     * Filter, which MessageRead to fetch.
     */
    where?: MessageReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReads to fetch.
     */
    orderBy?: MessageReadOrderByWithRelationInput | MessageReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageReads.
     */
    cursor?: MessageReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageReads.
     */
    distinct?: MessageReadScalarFieldEnum | MessageReadScalarFieldEnum[]
  }

  /**
   * MessageRead findFirstOrThrow
   */
  export type MessageReadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadInclude<ExtArgs> | null
    /**
     * Filter, which MessageRead to fetch.
     */
    where?: MessageReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReads to fetch.
     */
    orderBy?: MessageReadOrderByWithRelationInput | MessageReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageReads.
     */
    cursor?: MessageReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageReads.
     */
    distinct?: MessageReadScalarFieldEnum | MessageReadScalarFieldEnum[]
  }

  /**
   * MessageRead findMany
   */
  export type MessageReadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadInclude<ExtArgs> | null
    /**
     * Filter, which MessageReads to fetch.
     */
    where?: MessageReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReads to fetch.
     */
    orderBy?: MessageReadOrderByWithRelationInput | MessageReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageReads.
     */
    cursor?: MessageReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReads.
     */
    skip?: number
    distinct?: MessageReadScalarFieldEnum | MessageReadScalarFieldEnum[]
  }

  /**
   * MessageRead create
   */
  export type MessageReadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageRead.
     */
    data: XOR<MessageReadCreateInput, MessageReadUncheckedCreateInput>
  }

  /**
   * MessageRead createMany
   */
  export type MessageReadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageReads.
     */
    data: MessageReadCreateManyInput | MessageReadCreateManyInput[]
  }

  /**
   * MessageRead createManyAndReturn
   */
  export type MessageReadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * The data used to create many MessageReads.
     */
    data: MessageReadCreateManyInput | MessageReadCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageRead update
   */
  export type MessageReadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageRead.
     */
    data: XOR<MessageReadUpdateInput, MessageReadUncheckedUpdateInput>
    /**
     * Choose, which MessageRead to update.
     */
    where: MessageReadWhereUniqueInput
  }

  /**
   * MessageRead updateMany
   */
  export type MessageReadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageReads.
     */
    data: XOR<MessageReadUpdateManyMutationInput, MessageReadUncheckedUpdateManyInput>
    /**
     * Filter which MessageReads to update
     */
    where?: MessageReadWhereInput
    /**
     * Limit how many MessageReads to update.
     */
    limit?: number
  }

  /**
   * MessageRead updateManyAndReturn
   */
  export type MessageReadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * The data used to update MessageReads.
     */
    data: XOR<MessageReadUpdateManyMutationInput, MessageReadUncheckedUpdateManyInput>
    /**
     * Filter which MessageReads to update
     */
    where?: MessageReadWhereInput
    /**
     * Limit how many MessageReads to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageRead upsert
   */
  export type MessageReadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageRead to update in case it exists.
     */
    where: MessageReadWhereUniqueInput
    /**
     * In case the MessageRead found by the `where` argument doesn't exist, create a new MessageRead with this data.
     */
    create: XOR<MessageReadCreateInput, MessageReadUncheckedCreateInput>
    /**
     * In case the MessageRead was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageReadUpdateInput, MessageReadUncheckedUpdateInput>
  }

  /**
   * MessageRead delete
   */
  export type MessageReadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadInclude<ExtArgs> | null
    /**
     * Filter which MessageRead to delete.
     */
    where: MessageReadWhereUniqueInput
  }

  /**
   * MessageRead deleteMany
   */
  export type MessageReadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageReads to delete
     */
    where?: MessageReadWhereInput
    /**
     * Limit how many MessageReads to delete.
     */
    limit?: number
  }

  /**
   * MessageRead without action
   */
  export type MessageReadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageRead
     */
    select?: MessageReadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageRead
     */
    omit?: MessageReadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadInclude<ExtArgs> | null
  }


  /**
   * Model UserSecurityLog
   */

  export type AggregateUserSecurityLog = {
    _count: UserSecurityLogCountAggregateOutputType | null
    _min: UserSecurityLogMinAggregateOutputType | null
    _max: UserSecurityLogMaxAggregateOutputType | null
  }

  export type UserSecurityLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
    success: boolean | null
    details: string | null
  }

  export type UserSecurityLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
    success: boolean | null
    details: string | null
  }

  export type UserSecurityLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    ipAddress: number
    userAgent: number
    timestamp: number
    success: number
    details: number
    _all: number
  }


  export type UserSecurityLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    success?: true
    details?: true
  }

  export type UserSecurityLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    success?: true
    details?: true
  }

  export type UserSecurityLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    success?: true
    details?: true
    _all?: true
  }

  export type UserSecurityLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSecurityLog to aggregate.
     */
    where?: UserSecurityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSecurityLogs to fetch.
     */
    orderBy?: UserSecurityLogOrderByWithRelationInput | UserSecurityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSecurityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSecurityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSecurityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSecurityLogs
    **/
    _count?: true | UserSecurityLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSecurityLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSecurityLogMaxAggregateInputType
  }

  export type GetUserSecurityLogAggregateType<T extends UserSecurityLogAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSecurityLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSecurityLog[P]>
      : GetScalarType<T[P], AggregateUserSecurityLog[P]>
  }




  export type UserSecurityLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSecurityLogWhereInput
    orderBy?: UserSecurityLogOrderByWithAggregationInput | UserSecurityLogOrderByWithAggregationInput[]
    by: UserSecurityLogScalarFieldEnum[] | UserSecurityLogScalarFieldEnum
    having?: UserSecurityLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSecurityLogCountAggregateInputType | true
    _min?: UserSecurityLogMinAggregateInputType
    _max?: UserSecurityLogMaxAggregateInputType
  }

  export type UserSecurityLogGroupByOutputType = {
    id: string
    userId: string
    action: string
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date
    success: boolean
    details: string | null
    _count: UserSecurityLogCountAggregateOutputType | null
    _min: UserSecurityLogMinAggregateOutputType | null
    _max: UserSecurityLogMaxAggregateOutputType | null
  }

  type GetUserSecurityLogGroupByPayload<T extends UserSecurityLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSecurityLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSecurityLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSecurityLogGroupByOutputType[P]>
            : GetScalarType<T[P], UserSecurityLogGroupByOutputType[P]>
        }
      >
    >


  export type UserSecurityLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    success?: boolean
    details?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSecurityLog"]>

  export type UserSecurityLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    success?: boolean
    details?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSecurityLog"]>

  export type UserSecurityLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    success?: boolean
    details?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSecurityLog"]>

  export type UserSecurityLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    success?: boolean
    details?: boolean
  }

  export type UserSecurityLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "ipAddress" | "userAgent" | "timestamp" | "success" | "details", ExtArgs["result"]["userSecurityLog"]>
  export type UserSecurityLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSecurityLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSecurityLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSecurityLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSecurityLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      ipAddress: string | null
      userAgent: string | null
      timestamp: Date
      success: boolean
      details: string | null
    }, ExtArgs["result"]["userSecurityLog"]>
    composites: {}
  }

  type UserSecurityLogGetPayload<S extends boolean | null | undefined | UserSecurityLogDefaultArgs> = $Result.GetResult<Prisma.$UserSecurityLogPayload, S>

  type UserSecurityLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSecurityLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSecurityLogCountAggregateInputType | true
    }

  export interface UserSecurityLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSecurityLog'], meta: { name: 'UserSecurityLog' } }
    /**
     * Find zero or one UserSecurityLog that matches the filter.
     * @param {UserSecurityLogFindUniqueArgs} args - Arguments to find a UserSecurityLog
     * @example
     * // Get one UserSecurityLog
     * const userSecurityLog = await prisma.userSecurityLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSecurityLogFindUniqueArgs>(args: SelectSubset<T, UserSecurityLogFindUniqueArgs<ExtArgs>>): Prisma__UserSecurityLogClient<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSecurityLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSecurityLogFindUniqueOrThrowArgs} args - Arguments to find a UserSecurityLog
     * @example
     * // Get one UserSecurityLog
     * const userSecurityLog = await prisma.userSecurityLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSecurityLogFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSecurityLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSecurityLogClient<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSecurityLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSecurityLogFindFirstArgs} args - Arguments to find a UserSecurityLog
     * @example
     * // Get one UserSecurityLog
     * const userSecurityLog = await prisma.userSecurityLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSecurityLogFindFirstArgs>(args?: SelectSubset<T, UserSecurityLogFindFirstArgs<ExtArgs>>): Prisma__UserSecurityLogClient<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSecurityLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSecurityLogFindFirstOrThrowArgs} args - Arguments to find a UserSecurityLog
     * @example
     * // Get one UserSecurityLog
     * const userSecurityLog = await prisma.userSecurityLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSecurityLogFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSecurityLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSecurityLogClient<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSecurityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSecurityLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSecurityLogs
     * const userSecurityLogs = await prisma.userSecurityLog.findMany()
     * 
     * // Get first 10 UserSecurityLogs
     * const userSecurityLogs = await prisma.userSecurityLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSecurityLogWithIdOnly = await prisma.userSecurityLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSecurityLogFindManyArgs>(args?: SelectSubset<T, UserSecurityLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSecurityLog.
     * @param {UserSecurityLogCreateArgs} args - Arguments to create a UserSecurityLog.
     * @example
     * // Create one UserSecurityLog
     * const UserSecurityLog = await prisma.userSecurityLog.create({
     *   data: {
     *     // ... data to create a UserSecurityLog
     *   }
     * })
     * 
     */
    create<T extends UserSecurityLogCreateArgs>(args: SelectSubset<T, UserSecurityLogCreateArgs<ExtArgs>>): Prisma__UserSecurityLogClient<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSecurityLogs.
     * @param {UserSecurityLogCreateManyArgs} args - Arguments to create many UserSecurityLogs.
     * @example
     * // Create many UserSecurityLogs
     * const userSecurityLog = await prisma.userSecurityLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSecurityLogCreateManyArgs>(args?: SelectSubset<T, UserSecurityLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSecurityLogs and returns the data saved in the database.
     * @param {UserSecurityLogCreateManyAndReturnArgs} args - Arguments to create many UserSecurityLogs.
     * @example
     * // Create many UserSecurityLogs
     * const userSecurityLog = await prisma.userSecurityLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSecurityLogs and only return the `id`
     * const userSecurityLogWithIdOnly = await prisma.userSecurityLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSecurityLogCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSecurityLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSecurityLog.
     * @param {UserSecurityLogDeleteArgs} args - Arguments to delete one UserSecurityLog.
     * @example
     * // Delete one UserSecurityLog
     * const UserSecurityLog = await prisma.userSecurityLog.delete({
     *   where: {
     *     // ... filter to delete one UserSecurityLog
     *   }
     * })
     * 
     */
    delete<T extends UserSecurityLogDeleteArgs>(args: SelectSubset<T, UserSecurityLogDeleteArgs<ExtArgs>>): Prisma__UserSecurityLogClient<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSecurityLog.
     * @param {UserSecurityLogUpdateArgs} args - Arguments to update one UserSecurityLog.
     * @example
     * // Update one UserSecurityLog
     * const userSecurityLog = await prisma.userSecurityLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSecurityLogUpdateArgs>(args: SelectSubset<T, UserSecurityLogUpdateArgs<ExtArgs>>): Prisma__UserSecurityLogClient<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSecurityLogs.
     * @param {UserSecurityLogDeleteManyArgs} args - Arguments to filter UserSecurityLogs to delete.
     * @example
     * // Delete a few UserSecurityLogs
     * const { count } = await prisma.userSecurityLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSecurityLogDeleteManyArgs>(args?: SelectSubset<T, UserSecurityLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSecurityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSecurityLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSecurityLogs
     * const userSecurityLog = await prisma.userSecurityLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSecurityLogUpdateManyArgs>(args: SelectSubset<T, UserSecurityLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSecurityLogs and returns the data updated in the database.
     * @param {UserSecurityLogUpdateManyAndReturnArgs} args - Arguments to update many UserSecurityLogs.
     * @example
     * // Update many UserSecurityLogs
     * const userSecurityLog = await prisma.userSecurityLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSecurityLogs and only return the `id`
     * const userSecurityLogWithIdOnly = await prisma.userSecurityLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSecurityLogUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSecurityLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSecurityLog.
     * @param {UserSecurityLogUpsertArgs} args - Arguments to update or create a UserSecurityLog.
     * @example
     * // Update or create a UserSecurityLog
     * const userSecurityLog = await prisma.userSecurityLog.upsert({
     *   create: {
     *     // ... data to create a UserSecurityLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSecurityLog we want to update
     *   }
     * })
     */
    upsert<T extends UserSecurityLogUpsertArgs>(args: SelectSubset<T, UserSecurityLogUpsertArgs<ExtArgs>>): Prisma__UserSecurityLogClient<$Result.GetResult<Prisma.$UserSecurityLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSecurityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSecurityLogCountArgs} args - Arguments to filter UserSecurityLogs to count.
     * @example
     * // Count the number of UserSecurityLogs
     * const count = await prisma.userSecurityLog.count({
     *   where: {
     *     // ... the filter for the UserSecurityLogs we want to count
     *   }
     * })
    **/
    count<T extends UserSecurityLogCountArgs>(
      args?: Subset<T, UserSecurityLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSecurityLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSecurityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSecurityLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSecurityLogAggregateArgs>(args: Subset<T, UserSecurityLogAggregateArgs>): Prisma.PrismaPromise<GetUserSecurityLogAggregateType<T>>

    /**
     * Group by UserSecurityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSecurityLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSecurityLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSecurityLogGroupByArgs['orderBy'] }
        : { orderBy?: UserSecurityLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSecurityLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSecurityLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSecurityLog model
   */
  readonly fields: UserSecurityLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSecurityLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSecurityLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSecurityLog model
   */
  interface UserSecurityLogFieldRefs {
    readonly id: FieldRef<"UserSecurityLog", 'String'>
    readonly userId: FieldRef<"UserSecurityLog", 'String'>
    readonly action: FieldRef<"UserSecurityLog", 'String'>
    readonly ipAddress: FieldRef<"UserSecurityLog", 'String'>
    readonly userAgent: FieldRef<"UserSecurityLog", 'String'>
    readonly timestamp: FieldRef<"UserSecurityLog", 'DateTime'>
    readonly success: FieldRef<"UserSecurityLog", 'Boolean'>
    readonly details: FieldRef<"UserSecurityLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserSecurityLog findUnique
   */
  export type UserSecurityLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogInclude<ExtArgs> | null
    /**
     * Filter, which UserSecurityLog to fetch.
     */
    where: UserSecurityLogWhereUniqueInput
  }

  /**
   * UserSecurityLog findUniqueOrThrow
   */
  export type UserSecurityLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogInclude<ExtArgs> | null
    /**
     * Filter, which UserSecurityLog to fetch.
     */
    where: UserSecurityLogWhereUniqueInput
  }

  /**
   * UserSecurityLog findFirst
   */
  export type UserSecurityLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogInclude<ExtArgs> | null
    /**
     * Filter, which UserSecurityLog to fetch.
     */
    where?: UserSecurityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSecurityLogs to fetch.
     */
    orderBy?: UserSecurityLogOrderByWithRelationInput | UserSecurityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSecurityLogs.
     */
    cursor?: UserSecurityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSecurityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSecurityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSecurityLogs.
     */
    distinct?: UserSecurityLogScalarFieldEnum | UserSecurityLogScalarFieldEnum[]
  }

  /**
   * UserSecurityLog findFirstOrThrow
   */
  export type UserSecurityLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogInclude<ExtArgs> | null
    /**
     * Filter, which UserSecurityLog to fetch.
     */
    where?: UserSecurityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSecurityLogs to fetch.
     */
    orderBy?: UserSecurityLogOrderByWithRelationInput | UserSecurityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSecurityLogs.
     */
    cursor?: UserSecurityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSecurityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSecurityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSecurityLogs.
     */
    distinct?: UserSecurityLogScalarFieldEnum | UserSecurityLogScalarFieldEnum[]
  }

  /**
   * UserSecurityLog findMany
   */
  export type UserSecurityLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogInclude<ExtArgs> | null
    /**
     * Filter, which UserSecurityLogs to fetch.
     */
    where?: UserSecurityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSecurityLogs to fetch.
     */
    orderBy?: UserSecurityLogOrderByWithRelationInput | UserSecurityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSecurityLogs.
     */
    cursor?: UserSecurityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSecurityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSecurityLogs.
     */
    skip?: number
    distinct?: UserSecurityLogScalarFieldEnum | UserSecurityLogScalarFieldEnum[]
  }

  /**
   * UserSecurityLog create
   */
  export type UserSecurityLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSecurityLog.
     */
    data: XOR<UserSecurityLogCreateInput, UserSecurityLogUncheckedCreateInput>
  }

  /**
   * UserSecurityLog createMany
   */
  export type UserSecurityLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSecurityLogs.
     */
    data: UserSecurityLogCreateManyInput | UserSecurityLogCreateManyInput[]
  }

  /**
   * UserSecurityLog createManyAndReturn
   */
  export type UserSecurityLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * The data used to create many UserSecurityLogs.
     */
    data: UserSecurityLogCreateManyInput | UserSecurityLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSecurityLog update
   */
  export type UserSecurityLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSecurityLog.
     */
    data: XOR<UserSecurityLogUpdateInput, UserSecurityLogUncheckedUpdateInput>
    /**
     * Choose, which UserSecurityLog to update.
     */
    where: UserSecurityLogWhereUniqueInput
  }

  /**
   * UserSecurityLog updateMany
   */
  export type UserSecurityLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSecurityLogs.
     */
    data: XOR<UserSecurityLogUpdateManyMutationInput, UserSecurityLogUncheckedUpdateManyInput>
    /**
     * Filter which UserSecurityLogs to update
     */
    where?: UserSecurityLogWhereInput
    /**
     * Limit how many UserSecurityLogs to update.
     */
    limit?: number
  }

  /**
   * UserSecurityLog updateManyAndReturn
   */
  export type UserSecurityLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * The data used to update UserSecurityLogs.
     */
    data: XOR<UserSecurityLogUpdateManyMutationInput, UserSecurityLogUncheckedUpdateManyInput>
    /**
     * Filter which UserSecurityLogs to update
     */
    where?: UserSecurityLogWhereInput
    /**
     * Limit how many UserSecurityLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSecurityLog upsert
   */
  export type UserSecurityLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSecurityLog to update in case it exists.
     */
    where: UserSecurityLogWhereUniqueInput
    /**
     * In case the UserSecurityLog found by the `where` argument doesn't exist, create a new UserSecurityLog with this data.
     */
    create: XOR<UserSecurityLogCreateInput, UserSecurityLogUncheckedCreateInput>
    /**
     * In case the UserSecurityLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSecurityLogUpdateInput, UserSecurityLogUncheckedUpdateInput>
  }

  /**
   * UserSecurityLog delete
   */
  export type UserSecurityLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogInclude<ExtArgs> | null
    /**
     * Filter which UserSecurityLog to delete.
     */
    where: UserSecurityLogWhereUniqueInput
  }

  /**
   * UserSecurityLog deleteMany
   */
  export type UserSecurityLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSecurityLogs to delete
     */
    where?: UserSecurityLogWhereInput
    /**
     * Limit how many UserSecurityLogs to delete.
     */
    limit?: number
  }

  /**
   * UserSecurityLog without action
   */
  export type UserSecurityLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSecurityLog
     */
    select?: UserSecurityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSecurityLog
     */
    omit?: UserSecurityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSecurityLogInclude<ExtArgs> | null
  }


  /**
   * Model EncryptionKey
   */

  export type AggregateEncryptionKey = {
    _count: EncryptionKeyCountAggregateOutputType | null
    _min: EncryptionKeyMinAggregateOutputType | null
    _max: EncryptionKeyMaxAggregateOutputType | null
  }

  export type EncryptionKeyMinAggregateOutputType = {
    id: string | null
    keyType: string | null
    keyValue: string | null
    iv: string | null
    algorithm: string | null
    createdAt: Date | null
    expiresAt: Date | null
    isRevoked: boolean | null
    groupId: string | null
    relatedKeyId: string | null
  }

  export type EncryptionKeyMaxAggregateOutputType = {
    id: string | null
    keyType: string | null
    keyValue: string | null
    iv: string | null
    algorithm: string | null
    createdAt: Date | null
    expiresAt: Date | null
    isRevoked: boolean | null
    groupId: string | null
    relatedKeyId: string | null
  }

  export type EncryptionKeyCountAggregateOutputType = {
    id: number
    keyType: number
    keyValue: number
    iv: number
    algorithm: number
    createdAt: number
    expiresAt: number
    isRevoked: number
    groupId: number
    relatedKeyId: number
    _all: number
  }


  export type EncryptionKeyMinAggregateInputType = {
    id?: true
    keyType?: true
    keyValue?: true
    iv?: true
    algorithm?: true
    createdAt?: true
    expiresAt?: true
    isRevoked?: true
    groupId?: true
    relatedKeyId?: true
  }

  export type EncryptionKeyMaxAggregateInputType = {
    id?: true
    keyType?: true
    keyValue?: true
    iv?: true
    algorithm?: true
    createdAt?: true
    expiresAt?: true
    isRevoked?: true
    groupId?: true
    relatedKeyId?: true
  }

  export type EncryptionKeyCountAggregateInputType = {
    id?: true
    keyType?: true
    keyValue?: true
    iv?: true
    algorithm?: true
    createdAt?: true
    expiresAt?: true
    isRevoked?: true
    groupId?: true
    relatedKeyId?: true
    _all?: true
  }

  export type EncryptionKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EncryptionKey to aggregate.
     */
    where?: EncryptionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptionKeys to fetch.
     */
    orderBy?: EncryptionKeyOrderByWithRelationInput | EncryptionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EncryptionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptionKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EncryptionKeys
    **/
    _count?: true | EncryptionKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EncryptionKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EncryptionKeyMaxAggregateInputType
  }

  export type GetEncryptionKeyAggregateType<T extends EncryptionKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateEncryptionKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEncryptionKey[P]>
      : GetScalarType<T[P], AggregateEncryptionKey[P]>
  }




  export type EncryptionKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EncryptionKeyWhereInput
    orderBy?: EncryptionKeyOrderByWithAggregationInput | EncryptionKeyOrderByWithAggregationInput[]
    by: EncryptionKeyScalarFieldEnum[] | EncryptionKeyScalarFieldEnum
    having?: EncryptionKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EncryptionKeyCountAggregateInputType | true
    _min?: EncryptionKeyMinAggregateInputType
    _max?: EncryptionKeyMaxAggregateInputType
  }

  export type EncryptionKeyGroupByOutputType = {
    id: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt: Date
    expiresAt: Date
    isRevoked: boolean
    groupId: string | null
    relatedKeyId: string | null
    _count: EncryptionKeyCountAggregateOutputType | null
    _min: EncryptionKeyMinAggregateOutputType | null
    _max: EncryptionKeyMaxAggregateOutputType | null
  }

  type GetEncryptionKeyGroupByPayload<T extends EncryptionKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EncryptionKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EncryptionKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EncryptionKeyGroupByOutputType[P]>
            : GetScalarType<T[P], EncryptionKeyGroupByOutputType[P]>
        }
      >
    >


  export type EncryptionKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keyType?: boolean
    keyValue?: boolean
    iv?: boolean
    algorithm?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isRevoked?: boolean
    groupId?: boolean
    relatedKeyId?: boolean
    group?: boolean | EncryptionKey$groupArgs<ExtArgs>
    relatedKey?: boolean | EncryptionKey$relatedKeyArgs<ExtArgs>
    relatedTo?: boolean | EncryptionKey$relatedToArgs<ExtArgs>
    _count?: boolean | EncryptionKeyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["encryptionKey"]>

  export type EncryptionKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keyType?: boolean
    keyValue?: boolean
    iv?: boolean
    algorithm?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isRevoked?: boolean
    groupId?: boolean
    relatedKeyId?: boolean
    group?: boolean | EncryptionKey$groupArgs<ExtArgs>
    relatedKey?: boolean | EncryptionKey$relatedKeyArgs<ExtArgs>
  }, ExtArgs["result"]["encryptionKey"]>

  export type EncryptionKeySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keyType?: boolean
    keyValue?: boolean
    iv?: boolean
    algorithm?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isRevoked?: boolean
    groupId?: boolean
    relatedKeyId?: boolean
    group?: boolean | EncryptionKey$groupArgs<ExtArgs>
    relatedKey?: boolean | EncryptionKey$relatedKeyArgs<ExtArgs>
  }, ExtArgs["result"]["encryptionKey"]>

  export type EncryptionKeySelectScalar = {
    id?: boolean
    keyType?: boolean
    keyValue?: boolean
    iv?: boolean
    algorithm?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isRevoked?: boolean
    groupId?: boolean
    relatedKeyId?: boolean
  }

  export type EncryptionKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "keyType" | "keyValue" | "iv" | "algorithm" | "createdAt" | "expiresAt" | "isRevoked" | "groupId" | "relatedKeyId", ExtArgs["result"]["encryptionKey"]>
  export type EncryptionKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | EncryptionKey$groupArgs<ExtArgs>
    relatedKey?: boolean | EncryptionKey$relatedKeyArgs<ExtArgs>
    relatedTo?: boolean | EncryptionKey$relatedToArgs<ExtArgs>
    _count?: boolean | EncryptionKeyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EncryptionKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | EncryptionKey$groupArgs<ExtArgs>
    relatedKey?: boolean | EncryptionKey$relatedKeyArgs<ExtArgs>
  }
  export type EncryptionKeyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | EncryptionKey$groupArgs<ExtArgs>
    relatedKey?: boolean | EncryptionKey$relatedKeyArgs<ExtArgs>
  }

  export type $EncryptionKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EncryptionKey"
    objects: {
      group: Prisma.$GroupPayload<ExtArgs> | null
      relatedKey: Prisma.$EncryptionKeyPayload<ExtArgs> | null
      relatedTo: Prisma.$EncryptionKeyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      keyType: string
      keyValue: string
      iv: string
      algorithm: string
      createdAt: Date
      expiresAt: Date
      isRevoked: boolean
      groupId: string | null
      relatedKeyId: string | null
    }, ExtArgs["result"]["encryptionKey"]>
    composites: {}
  }

  type EncryptionKeyGetPayload<S extends boolean | null | undefined | EncryptionKeyDefaultArgs> = $Result.GetResult<Prisma.$EncryptionKeyPayload, S>

  type EncryptionKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EncryptionKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EncryptionKeyCountAggregateInputType | true
    }

  export interface EncryptionKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EncryptionKey'], meta: { name: 'EncryptionKey' } }
    /**
     * Find zero or one EncryptionKey that matches the filter.
     * @param {EncryptionKeyFindUniqueArgs} args - Arguments to find a EncryptionKey
     * @example
     * // Get one EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EncryptionKeyFindUniqueArgs>(args: SelectSubset<T, EncryptionKeyFindUniqueArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EncryptionKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EncryptionKeyFindUniqueOrThrowArgs} args - Arguments to find a EncryptionKey
     * @example
     * // Get one EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EncryptionKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, EncryptionKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EncryptionKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyFindFirstArgs} args - Arguments to find a EncryptionKey
     * @example
     * // Get one EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EncryptionKeyFindFirstArgs>(args?: SelectSubset<T, EncryptionKeyFindFirstArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EncryptionKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyFindFirstOrThrowArgs} args - Arguments to find a EncryptionKey
     * @example
     * // Get one EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EncryptionKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, EncryptionKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EncryptionKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EncryptionKeys
     * const encryptionKeys = await prisma.encryptionKey.findMany()
     * 
     * // Get first 10 EncryptionKeys
     * const encryptionKeys = await prisma.encryptionKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const encryptionKeyWithIdOnly = await prisma.encryptionKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EncryptionKeyFindManyArgs>(args?: SelectSubset<T, EncryptionKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EncryptionKey.
     * @param {EncryptionKeyCreateArgs} args - Arguments to create a EncryptionKey.
     * @example
     * // Create one EncryptionKey
     * const EncryptionKey = await prisma.encryptionKey.create({
     *   data: {
     *     // ... data to create a EncryptionKey
     *   }
     * })
     * 
     */
    create<T extends EncryptionKeyCreateArgs>(args: SelectSubset<T, EncryptionKeyCreateArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EncryptionKeys.
     * @param {EncryptionKeyCreateManyArgs} args - Arguments to create many EncryptionKeys.
     * @example
     * // Create many EncryptionKeys
     * const encryptionKey = await prisma.encryptionKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EncryptionKeyCreateManyArgs>(args?: SelectSubset<T, EncryptionKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EncryptionKeys and returns the data saved in the database.
     * @param {EncryptionKeyCreateManyAndReturnArgs} args - Arguments to create many EncryptionKeys.
     * @example
     * // Create many EncryptionKeys
     * const encryptionKey = await prisma.encryptionKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EncryptionKeys and only return the `id`
     * const encryptionKeyWithIdOnly = await prisma.encryptionKey.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EncryptionKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, EncryptionKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EncryptionKey.
     * @param {EncryptionKeyDeleteArgs} args - Arguments to delete one EncryptionKey.
     * @example
     * // Delete one EncryptionKey
     * const EncryptionKey = await prisma.encryptionKey.delete({
     *   where: {
     *     // ... filter to delete one EncryptionKey
     *   }
     * })
     * 
     */
    delete<T extends EncryptionKeyDeleteArgs>(args: SelectSubset<T, EncryptionKeyDeleteArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EncryptionKey.
     * @param {EncryptionKeyUpdateArgs} args - Arguments to update one EncryptionKey.
     * @example
     * // Update one EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EncryptionKeyUpdateArgs>(args: SelectSubset<T, EncryptionKeyUpdateArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EncryptionKeys.
     * @param {EncryptionKeyDeleteManyArgs} args - Arguments to filter EncryptionKeys to delete.
     * @example
     * // Delete a few EncryptionKeys
     * const { count } = await prisma.encryptionKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EncryptionKeyDeleteManyArgs>(args?: SelectSubset<T, EncryptionKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EncryptionKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EncryptionKeys
     * const encryptionKey = await prisma.encryptionKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EncryptionKeyUpdateManyArgs>(args: SelectSubset<T, EncryptionKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EncryptionKeys and returns the data updated in the database.
     * @param {EncryptionKeyUpdateManyAndReturnArgs} args - Arguments to update many EncryptionKeys.
     * @example
     * // Update many EncryptionKeys
     * const encryptionKey = await prisma.encryptionKey.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EncryptionKeys and only return the `id`
     * const encryptionKeyWithIdOnly = await prisma.encryptionKey.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EncryptionKeyUpdateManyAndReturnArgs>(args: SelectSubset<T, EncryptionKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EncryptionKey.
     * @param {EncryptionKeyUpsertArgs} args - Arguments to update or create a EncryptionKey.
     * @example
     * // Update or create a EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.upsert({
     *   create: {
     *     // ... data to create a EncryptionKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EncryptionKey we want to update
     *   }
     * })
     */
    upsert<T extends EncryptionKeyUpsertArgs>(args: SelectSubset<T, EncryptionKeyUpsertArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EncryptionKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyCountArgs} args - Arguments to filter EncryptionKeys to count.
     * @example
     * // Count the number of EncryptionKeys
     * const count = await prisma.encryptionKey.count({
     *   where: {
     *     // ... the filter for the EncryptionKeys we want to count
     *   }
     * })
    **/
    count<T extends EncryptionKeyCountArgs>(
      args?: Subset<T, EncryptionKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EncryptionKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EncryptionKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EncryptionKeyAggregateArgs>(args: Subset<T, EncryptionKeyAggregateArgs>): Prisma.PrismaPromise<GetEncryptionKeyAggregateType<T>>

    /**
     * Group by EncryptionKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EncryptionKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EncryptionKeyGroupByArgs['orderBy'] }
        : { orderBy?: EncryptionKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EncryptionKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEncryptionKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EncryptionKey model
   */
  readonly fields: EncryptionKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EncryptionKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EncryptionKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    group<T extends EncryptionKey$groupArgs<ExtArgs> = {}>(args?: Subset<T, EncryptionKey$groupArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    relatedKey<T extends EncryptionKey$relatedKeyArgs<ExtArgs> = {}>(args?: Subset<T, EncryptionKey$relatedKeyArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    relatedTo<T extends EncryptionKey$relatedToArgs<ExtArgs> = {}>(args?: Subset<T, EncryptionKey$relatedToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EncryptionKey model
   */
  interface EncryptionKeyFieldRefs {
    readonly id: FieldRef<"EncryptionKey", 'String'>
    readonly keyType: FieldRef<"EncryptionKey", 'String'>
    readonly keyValue: FieldRef<"EncryptionKey", 'String'>
    readonly iv: FieldRef<"EncryptionKey", 'String'>
    readonly algorithm: FieldRef<"EncryptionKey", 'String'>
    readonly createdAt: FieldRef<"EncryptionKey", 'DateTime'>
    readonly expiresAt: FieldRef<"EncryptionKey", 'DateTime'>
    readonly isRevoked: FieldRef<"EncryptionKey", 'Boolean'>
    readonly groupId: FieldRef<"EncryptionKey", 'String'>
    readonly relatedKeyId: FieldRef<"EncryptionKey", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EncryptionKey findUnique
   */
  export type EncryptionKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    /**
     * Filter, which EncryptionKey to fetch.
     */
    where: EncryptionKeyWhereUniqueInput
  }

  /**
   * EncryptionKey findUniqueOrThrow
   */
  export type EncryptionKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    /**
     * Filter, which EncryptionKey to fetch.
     */
    where: EncryptionKeyWhereUniqueInput
  }

  /**
   * EncryptionKey findFirst
   */
  export type EncryptionKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    /**
     * Filter, which EncryptionKey to fetch.
     */
    where?: EncryptionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptionKeys to fetch.
     */
    orderBy?: EncryptionKeyOrderByWithRelationInput | EncryptionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EncryptionKeys.
     */
    cursor?: EncryptionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptionKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EncryptionKeys.
     */
    distinct?: EncryptionKeyScalarFieldEnum | EncryptionKeyScalarFieldEnum[]
  }

  /**
   * EncryptionKey findFirstOrThrow
   */
  export type EncryptionKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    /**
     * Filter, which EncryptionKey to fetch.
     */
    where?: EncryptionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptionKeys to fetch.
     */
    orderBy?: EncryptionKeyOrderByWithRelationInput | EncryptionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EncryptionKeys.
     */
    cursor?: EncryptionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptionKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EncryptionKeys.
     */
    distinct?: EncryptionKeyScalarFieldEnum | EncryptionKeyScalarFieldEnum[]
  }

  /**
   * EncryptionKey findMany
   */
  export type EncryptionKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    /**
     * Filter, which EncryptionKeys to fetch.
     */
    where?: EncryptionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptionKeys to fetch.
     */
    orderBy?: EncryptionKeyOrderByWithRelationInput | EncryptionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EncryptionKeys.
     */
    cursor?: EncryptionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptionKeys.
     */
    skip?: number
    distinct?: EncryptionKeyScalarFieldEnum | EncryptionKeyScalarFieldEnum[]
  }

  /**
   * EncryptionKey create
   */
  export type EncryptionKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a EncryptionKey.
     */
    data: XOR<EncryptionKeyCreateInput, EncryptionKeyUncheckedCreateInput>
  }

  /**
   * EncryptionKey createMany
   */
  export type EncryptionKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EncryptionKeys.
     */
    data: EncryptionKeyCreateManyInput | EncryptionKeyCreateManyInput[]
  }

  /**
   * EncryptionKey createManyAndReturn
   */
  export type EncryptionKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * The data used to create many EncryptionKeys.
     */
    data: EncryptionKeyCreateManyInput | EncryptionKeyCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EncryptionKey update
   */
  export type EncryptionKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a EncryptionKey.
     */
    data: XOR<EncryptionKeyUpdateInput, EncryptionKeyUncheckedUpdateInput>
    /**
     * Choose, which EncryptionKey to update.
     */
    where: EncryptionKeyWhereUniqueInput
  }

  /**
   * EncryptionKey updateMany
   */
  export type EncryptionKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EncryptionKeys.
     */
    data: XOR<EncryptionKeyUpdateManyMutationInput, EncryptionKeyUncheckedUpdateManyInput>
    /**
     * Filter which EncryptionKeys to update
     */
    where?: EncryptionKeyWhereInput
    /**
     * Limit how many EncryptionKeys to update.
     */
    limit?: number
  }

  /**
   * EncryptionKey updateManyAndReturn
   */
  export type EncryptionKeyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * The data used to update EncryptionKeys.
     */
    data: XOR<EncryptionKeyUpdateManyMutationInput, EncryptionKeyUncheckedUpdateManyInput>
    /**
     * Filter which EncryptionKeys to update
     */
    where?: EncryptionKeyWhereInput
    /**
     * Limit how many EncryptionKeys to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EncryptionKey upsert
   */
  export type EncryptionKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the EncryptionKey to update in case it exists.
     */
    where: EncryptionKeyWhereUniqueInput
    /**
     * In case the EncryptionKey found by the `where` argument doesn't exist, create a new EncryptionKey with this data.
     */
    create: XOR<EncryptionKeyCreateInput, EncryptionKeyUncheckedCreateInput>
    /**
     * In case the EncryptionKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EncryptionKeyUpdateInput, EncryptionKeyUncheckedUpdateInput>
  }

  /**
   * EncryptionKey delete
   */
  export type EncryptionKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    /**
     * Filter which EncryptionKey to delete.
     */
    where: EncryptionKeyWhereUniqueInput
  }

  /**
   * EncryptionKey deleteMany
   */
  export type EncryptionKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EncryptionKeys to delete
     */
    where?: EncryptionKeyWhereInput
    /**
     * Limit how many EncryptionKeys to delete.
     */
    limit?: number
  }

  /**
   * EncryptionKey.group
   */
  export type EncryptionKey$groupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
  }

  /**
   * EncryptionKey.relatedKey
   */
  export type EncryptionKey$relatedKeyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    where?: EncryptionKeyWhereInput
  }

  /**
   * EncryptionKey.relatedTo
   */
  export type EncryptionKey$relatedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
    where?: EncryptionKeyWhereInput
    orderBy?: EncryptionKeyOrderByWithRelationInput | EncryptionKeyOrderByWithRelationInput[]
    cursor?: EncryptionKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EncryptionKeyScalarFieldEnum | EncryptionKeyScalarFieldEnum[]
  }

  /**
   * EncryptionKey without action
   */
  export type EncryptionKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EncryptionKey
     */
    omit?: EncryptionKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EncryptionKeyInclude<ExtArgs> | null
  }


  /**
   * Model VulnerabilityDemo
   */

  export type AggregateVulnerabilityDemo = {
    _count: VulnerabilityDemoCountAggregateOutputType | null
    _min: VulnerabilityDemoMinAggregateOutputType | null
    _max: VulnerabilityDemoMaxAggregateOutputType | null
  }

  export type VulnerabilityDemoMinAggregateOutputType = {
    id: string | null
    vulnerabilityType: string | null
    description: string | null
    mitigations: string | null
    demonstrationCode: string | null
    createdAt: Date | null
  }

  export type VulnerabilityDemoMaxAggregateOutputType = {
    id: string | null
    vulnerabilityType: string | null
    description: string | null
    mitigations: string | null
    demonstrationCode: string | null
    createdAt: Date | null
  }

  export type VulnerabilityDemoCountAggregateOutputType = {
    id: number
    vulnerabilityType: number
    description: number
    mitigations: number
    demonstrationCode: number
    createdAt: number
    _all: number
  }


  export type VulnerabilityDemoMinAggregateInputType = {
    id?: true
    vulnerabilityType?: true
    description?: true
    mitigations?: true
    demonstrationCode?: true
    createdAt?: true
  }

  export type VulnerabilityDemoMaxAggregateInputType = {
    id?: true
    vulnerabilityType?: true
    description?: true
    mitigations?: true
    demonstrationCode?: true
    createdAt?: true
  }

  export type VulnerabilityDemoCountAggregateInputType = {
    id?: true
    vulnerabilityType?: true
    description?: true
    mitigations?: true
    demonstrationCode?: true
    createdAt?: true
    _all?: true
  }

  export type VulnerabilityDemoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VulnerabilityDemo to aggregate.
     */
    where?: VulnerabilityDemoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VulnerabilityDemos to fetch.
     */
    orderBy?: VulnerabilityDemoOrderByWithRelationInput | VulnerabilityDemoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VulnerabilityDemoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VulnerabilityDemos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VulnerabilityDemos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VulnerabilityDemos
    **/
    _count?: true | VulnerabilityDemoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VulnerabilityDemoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VulnerabilityDemoMaxAggregateInputType
  }

  export type GetVulnerabilityDemoAggregateType<T extends VulnerabilityDemoAggregateArgs> = {
        [P in keyof T & keyof AggregateVulnerabilityDemo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVulnerabilityDemo[P]>
      : GetScalarType<T[P], AggregateVulnerabilityDemo[P]>
  }




  export type VulnerabilityDemoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VulnerabilityDemoWhereInput
    orderBy?: VulnerabilityDemoOrderByWithAggregationInput | VulnerabilityDemoOrderByWithAggregationInput[]
    by: VulnerabilityDemoScalarFieldEnum[] | VulnerabilityDemoScalarFieldEnum
    having?: VulnerabilityDemoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VulnerabilityDemoCountAggregateInputType | true
    _min?: VulnerabilityDemoMinAggregateInputType
    _max?: VulnerabilityDemoMaxAggregateInputType
  }

  export type VulnerabilityDemoGroupByOutputType = {
    id: string
    vulnerabilityType: string
    description: string
    mitigations: string
    demonstrationCode: string | null
    createdAt: Date
    _count: VulnerabilityDemoCountAggregateOutputType | null
    _min: VulnerabilityDemoMinAggregateOutputType | null
    _max: VulnerabilityDemoMaxAggregateOutputType | null
  }

  type GetVulnerabilityDemoGroupByPayload<T extends VulnerabilityDemoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VulnerabilityDemoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VulnerabilityDemoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VulnerabilityDemoGroupByOutputType[P]>
            : GetScalarType<T[P], VulnerabilityDemoGroupByOutputType[P]>
        }
      >
    >


  export type VulnerabilityDemoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vulnerabilityType?: boolean
    description?: boolean
    mitigations?: boolean
    demonstrationCode?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["vulnerabilityDemo"]>

  export type VulnerabilityDemoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vulnerabilityType?: boolean
    description?: boolean
    mitigations?: boolean
    demonstrationCode?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["vulnerabilityDemo"]>

  export type VulnerabilityDemoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vulnerabilityType?: boolean
    description?: boolean
    mitigations?: boolean
    demonstrationCode?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["vulnerabilityDemo"]>

  export type VulnerabilityDemoSelectScalar = {
    id?: boolean
    vulnerabilityType?: boolean
    description?: boolean
    mitigations?: boolean
    demonstrationCode?: boolean
    createdAt?: boolean
  }

  export type VulnerabilityDemoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "vulnerabilityType" | "description" | "mitigations" | "demonstrationCode" | "createdAt", ExtArgs["result"]["vulnerabilityDemo"]>

  export type $VulnerabilityDemoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VulnerabilityDemo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      vulnerabilityType: string
      description: string
      mitigations: string
      demonstrationCode: string | null
      createdAt: Date
    }, ExtArgs["result"]["vulnerabilityDemo"]>
    composites: {}
  }

  type VulnerabilityDemoGetPayload<S extends boolean | null | undefined | VulnerabilityDemoDefaultArgs> = $Result.GetResult<Prisma.$VulnerabilityDemoPayload, S>

  type VulnerabilityDemoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VulnerabilityDemoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VulnerabilityDemoCountAggregateInputType | true
    }

  export interface VulnerabilityDemoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VulnerabilityDemo'], meta: { name: 'VulnerabilityDemo' } }
    /**
     * Find zero or one VulnerabilityDemo that matches the filter.
     * @param {VulnerabilityDemoFindUniqueArgs} args - Arguments to find a VulnerabilityDemo
     * @example
     * // Get one VulnerabilityDemo
     * const vulnerabilityDemo = await prisma.vulnerabilityDemo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VulnerabilityDemoFindUniqueArgs>(args: SelectSubset<T, VulnerabilityDemoFindUniqueArgs<ExtArgs>>): Prisma__VulnerabilityDemoClient<$Result.GetResult<Prisma.$VulnerabilityDemoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VulnerabilityDemo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VulnerabilityDemoFindUniqueOrThrowArgs} args - Arguments to find a VulnerabilityDemo
     * @example
     * // Get one VulnerabilityDemo
     * const vulnerabilityDemo = await prisma.vulnerabilityDemo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VulnerabilityDemoFindUniqueOrThrowArgs>(args: SelectSubset<T, VulnerabilityDemoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VulnerabilityDemoClient<$Result.GetResult<Prisma.$VulnerabilityDemoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VulnerabilityDemo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityDemoFindFirstArgs} args - Arguments to find a VulnerabilityDemo
     * @example
     * // Get one VulnerabilityDemo
     * const vulnerabilityDemo = await prisma.vulnerabilityDemo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VulnerabilityDemoFindFirstArgs>(args?: SelectSubset<T, VulnerabilityDemoFindFirstArgs<ExtArgs>>): Prisma__VulnerabilityDemoClient<$Result.GetResult<Prisma.$VulnerabilityDemoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VulnerabilityDemo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityDemoFindFirstOrThrowArgs} args - Arguments to find a VulnerabilityDemo
     * @example
     * // Get one VulnerabilityDemo
     * const vulnerabilityDemo = await prisma.vulnerabilityDemo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VulnerabilityDemoFindFirstOrThrowArgs>(args?: SelectSubset<T, VulnerabilityDemoFindFirstOrThrowArgs<ExtArgs>>): Prisma__VulnerabilityDemoClient<$Result.GetResult<Prisma.$VulnerabilityDemoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VulnerabilityDemos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityDemoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VulnerabilityDemos
     * const vulnerabilityDemos = await prisma.vulnerabilityDemo.findMany()
     * 
     * // Get first 10 VulnerabilityDemos
     * const vulnerabilityDemos = await prisma.vulnerabilityDemo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vulnerabilityDemoWithIdOnly = await prisma.vulnerabilityDemo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VulnerabilityDemoFindManyArgs>(args?: SelectSubset<T, VulnerabilityDemoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VulnerabilityDemoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VulnerabilityDemo.
     * @param {VulnerabilityDemoCreateArgs} args - Arguments to create a VulnerabilityDemo.
     * @example
     * // Create one VulnerabilityDemo
     * const VulnerabilityDemo = await prisma.vulnerabilityDemo.create({
     *   data: {
     *     // ... data to create a VulnerabilityDemo
     *   }
     * })
     * 
     */
    create<T extends VulnerabilityDemoCreateArgs>(args: SelectSubset<T, VulnerabilityDemoCreateArgs<ExtArgs>>): Prisma__VulnerabilityDemoClient<$Result.GetResult<Prisma.$VulnerabilityDemoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VulnerabilityDemos.
     * @param {VulnerabilityDemoCreateManyArgs} args - Arguments to create many VulnerabilityDemos.
     * @example
     * // Create many VulnerabilityDemos
     * const vulnerabilityDemo = await prisma.vulnerabilityDemo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VulnerabilityDemoCreateManyArgs>(args?: SelectSubset<T, VulnerabilityDemoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VulnerabilityDemos and returns the data saved in the database.
     * @param {VulnerabilityDemoCreateManyAndReturnArgs} args - Arguments to create many VulnerabilityDemos.
     * @example
     * // Create many VulnerabilityDemos
     * const vulnerabilityDemo = await prisma.vulnerabilityDemo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VulnerabilityDemos and only return the `id`
     * const vulnerabilityDemoWithIdOnly = await prisma.vulnerabilityDemo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VulnerabilityDemoCreateManyAndReturnArgs>(args?: SelectSubset<T, VulnerabilityDemoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VulnerabilityDemoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VulnerabilityDemo.
     * @param {VulnerabilityDemoDeleteArgs} args - Arguments to delete one VulnerabilityDemo.
     * @example
     * // Delete one VulnerabilityDemo
     * const VulnerabilityDemo = await prisma.vulnerabilityDemo.delete({
     *   where: {
     *     // ... filter to delete one VulnerabilityDemo
     *   }
     * })
     * 
     */
    delete<T extends VulnerabilityDemoDeleteArgs>(args: SelectSubset<T, VulnerabilityDemoDeleteArgs<ExtArgs>>): Prisma__VulnerabilityDemoClient<$Result.GetResult<Prisma.$VulnerabilityDemoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VulnerabilityDemo.
     * @param {VulnerabilityDemoUpdateArgs} args - Arguments to update one VulnerabilityDemo.
     * @example
     * // Update one VulnerabilityDemo
     * const vulnerabilityDemo = await prisma.vulnerabilityDemo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VulnerabilityDemoUpdateArgs>(args: SelectSubset<T, VulnerabilityDemoUpdateArgs<ExtArgs>>): Prisma__VulnerabilityDemoClient<$Result.GetResult<Prisma.$VulnerabilityDemoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VulnerabilityDemos.
     * @param {VulnerabilityDemoDeleteManyArgs} args - Arguments to filter VulnerabilityDemos to delete.
     * @example
     * // Delete a few VulnerabilityDemos
     * const { count } = await prisma.vulnerabilityDemo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VulnerabilityDemoDeleteManyArgs>(args?: SelectSubset<T, VulnerabilityDemoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VulnerabilityDemos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityDemoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VulnerabilityDemos
     * const vulnerabilityDemo = await prisma.vulnerabilityDemo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VulnerabilityDemoUpdateManyArgs>(args: SelectSubset<T, VulnerabilityDemoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VulnerabilityDemos and returns the data updated in the database.
     * @param {VulnerabilityDemoUpdateManyAndReturnArgs} args - Arguments to update many VulnerabilityDemos.
     * @example
     * // Update many VulnerabilityDemos
     * const vulnerabilityDemo = await prisma.vulnerabilityDemo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VulnerabilityDemos and only return the `id`
     * const vulnerabilityDemoWithIdOnly = await prisma.vulnerabilityDemo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VulnerabilityDemoUpdateManyAndReturnArgs>(args: SelectSubset<T, VulnerabilityDemoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VulnerabilityDemoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VulnerabilityDemo.
     * @param {VulnerabilityDemoUpsertArgs} args - Arguments to update or create a VulnerabilityDemo.
     * @example
     * // Update or create a VulnerabilityDemo
     * const vulnerabilityDemo = await prisma.vulnerabilityDemo.upsert({
     *   create: {
     *     // ... data to create a VulnerabilityDemo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VulnerabilityDemo we want to update
     *   }
     * })
     */
    upsert<T extends VulnerabilityDemoUpsertArgs>(args: SelectSubset<T, VulnerabilityDemoUpsertArgs<ExtArgs>>): Prisma__VulnerabilityDemoClient<$Result.GetResult<Prisma.$VulnerabilityDemoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VulnerabilityDemos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityDemoCountArgs} args - Arguments to filter VulnerabilityDemos to count.
     * @example
     * // Count the number of VulnerabilityDemos
     * const count = await prisma.vulnerabilityDemo.count({
     *   where: {
     *     // ... the filter for the VulnerabilityDemos we want to count
     *   }
     * })
    **/
    count<T extends VulnerabilityDemoCountArgs>(
      args?: Subset<T, VulnerabilityDemoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VulnerabilityDemoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VulnerabilityDemo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityDemoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VulnerabilityDemoAggregateArgs>(args: Subset<T, VulnerabilityDemoAggregateArgs>): Prisma.PrismaPromise<GetVulnerabilityDemoAggregateType<T>>

    /**
     * Group by VulnerabilityDemo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityDemoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VulnerabilityDemoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VulnerabilityDemoGroupByArgs['orderBy'] }
        : { orderBy?: VulnerabilityDemoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VulnerabilityDemoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVulnerabilityDemoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VulnerabilityDemo model
   */
  readonly fields: VulnerabilityDemoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VulnerabilityDemo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VulnerabilityDemoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VulnerabilityDemo model
   */
  interface VulnerabilityDemoFieldRefs {
    readonly id: FieldRef<"VulnerabilityDemo", 'String'>
    readonly vulnerabilityType: FieldRef<"VulnerabilityDemo", 'String'>
    readonly description: FieldRef<"VulnerabilityDemo", 'String'>
    readonly mitigations: FieldRef<"VulnerabilityDemo", 'String'>
    readonly demonstrationCode: FieldRef<"VulnerabilityDemo", 'String'>
    readonly createdAt: FieldRef<"VulnerabilityDemo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VulnerabilityDemo findUnique
   */
  export type VulnerabilityDemoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
    /**
     * Filter, which VulnerabilityDemo to fetch.
     */
    where: VulnerabilityDemoWhereUniqueInput
  }

  /**
   * VulnerabilityDemo findUniqueOrThrow
   */
  export type VulnerabilityDemoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
    /**
     * Filter, which VulnerabilityDemo to fetch.
     */
    where: VulnerabilityDemoWhereUniqueInput
  }

  /**
   * VulnerabilityDemo findFirst
   */
  export type VulnerabilityDemoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
    /**
     * Filter, which VulnerabilityDemo to fetch.
     */
    where?: VulnerabilityDemoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VulnerabilityDemos to fetch.
     */
    orderBy?: VulnerabilityDemoOrderByWithRelationInput | VulnerabilityDemoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VulnerabilityDemos.
     */
    cursor?: VulnerabilityDemoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VulnerabilityDemos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VulnerabilityDemos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VulnerabilityDemos.
     */
    distinct?: VulnerabilityDemoScalarFieldEnum | VulnerabilityDemoScalarFieldEnum[]
  }

  /**
   * VulnerabilityDemo findFirstOrThrow
   */
  export type VulnerabilityDemoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
    /**
     * Filter, which VulnerabilityDemo to fetch.
     */
    where?: VulnerabilityDemoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VulnerabilityDemos to fetch.
     */
    orderBy?: VulnerabilityDemoOrderByWithRelationInput | VulnerabilityDemoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VulnerabilityDemos.
     */
    cursor?: VulnerabilityDemoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VulnerabilityDemos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VulnerabilityDemos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VulnerabilityDemos.
     */
    distinct?: VulnerabilityDemoScalarFieldEnum | VulnerabilityDemoScalarFieldEnum[]
  }

  /**
   * VulnerabilityDemo findMany
   */
  export type VulnerabilityDemoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
    /**
     * Filter, which VulnerabilityDemos to fetch.
     */
    where?: VulnerabilityDemoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VulnerabilityDemos to fetch.
     */
    orderBy?: VulnerabilityDemoOrderByWithRelationInput | VulnerabilityDemoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VulnerabilityDemos.
     */
    cursor?: VulnerabilityDemoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VulnerabilityDemos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VulnerabilityDemos.
     */
    skip?: number
    distinct?: VulnerabilityDemoScalarFieldEnum | VulnerabilityDemoScalarFieldEnum[]
  }

  /**
   * VulnerabilityDemo create
   */
  export type VulnerabilityDemoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
    /**
     * The data needed to create a VulnerabilityDemo.
     */
    data: XOR<VulnerabilityDemoCreateInput, VulnerabilityDemoUncheckedCreateInput>
  }

  /**
   * VulnerabilityDemo createMany
   */
  export type VulnerabilityDemoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VulnerabilityDemos.
     */
    data: VulnerabilityDemoCreateManyInput | VulnerabilityDemoCreateManyInput[]
  }

  /**
   * VulnerabilityDemo createManyAndReturn
   */
  export type VulnerabilityDemoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
    /**
     * The data used to create many VulnerabilityDemos.
     */
    data: VulnerabilityDemoCreateManyInput | VulnerabilityDemoCreateManyInput[]
  }

  /**
   * VulnerabilityDemo update
   */
  export type VulnerabilityDemoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
    /**
     * The data needed to update a VulnerabilityDemo.
     */
    data: XOR<VulnerabilityDemoUpdateInput, VulnerabilityDemoUncheckedUpdateInput>
    /**
     * Choose, which VulnerabilityDemo to update.
     */
    where: VulnerabilityDemoWhereUniqueInput
  }

  /**
   * VulnerabilityDemo updateMany
   */
  export type VulnerabilityDemoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VulnerabilityDemos.
     */
    data: XOR<VulnerabilityDemoUpdateManyMutationInput, VulnerabilityDemoUncheckedUpdateManyInput>
    /**
     * Filter which VulnerabilityDemos to update
     */
    where?: VulnerabilityDemoWhereInput
    /**
     * Limit how many VulnerabilityDemos to update.
     */
    limit?: number
  }

  /**
   * VulnerabilityDemo updateManyAndReturn
   */
  export type VulnerabilityDemoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
    /**
     * The data used to update VulnerabilityDemos.
     */
    data: XOR<VulnerabilityDemoUpdateManyMutationInput, VulnerabilityDemoUncheckedUpdateManyInput>
    /**
     * Filter which VulnerabilityDemos to update
     */
    where?: VulnerabilityDemoWhereInput
    /**
     * Limit how many VulnerabilityDemos to update.
     */
    limit?: number
  }

  /**
   * VulnerabilityDemo upsert
   */
  export type VulnerabilityDemoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
    /**
     * The filter to search for the VulnerabilityDemo to update in case it exists.
     */
    where: VulnerabilityDemoWhereUniqueInput
    /**
     * In case the VulnerabilityDemo found by the `where` argument doesn't exist, create a new VulnerabilityDemo with this data.
     */
    create: XOR<VulnerabilityDemoCreateInput, VulnerabilityDemoUncheckedCreateInput>
    /**
     * In case the VulnerabilityDemo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VulnerabilityDemoUpdateInput, VulnerabilityDemoUncheckedUpdateInput>
  }

  /**
   * VulnerabilityDemo delete
   */
  export type VulnerabilityDemoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
    /**
     * Filter which VulnerabilityDemo to delete.
     */
    where: VulnerabilityDemoWhereUniqueInput
  }

  /**
   * VulnerabilityDemo deleteMany
   */
  export type VulnerabilityDemoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VulnerabilityDemos to delete
     */
    where?: VulnerabilityDemoWhereInput
    /**
     * Limit how many VulnerabilityDemos to delete.
     */
    limit?: number
  }

  /**
   * VulnerabilityDemo without action
   */
  export type VulnerabilityDemoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityDemo
     */
    select?: VulnerabilityDemoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VulnerabilityDemo
     */
    omit?: VulnerabilityDemoOmit<ExtArgs> | null
  }


  /**
   * Model DiscussionBoard
   */

  export type AggregateDiscussionBoard = {
    _count: DiscussionBoardCountAggregateOutputType | null
    _avg: DiscussionBoardAvgAggregateOutputType | null
    _sum: DiscussionBoardSumAggregateOutputType | null
    _min: DiscussionBoardMinAggregateOutputType | null
    _max: DiscussionBoardMaxAggregateOutputType | null
  }

  export type DiscussionBoardAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type DiscussionBoardSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type DiscussionBoardMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    groupId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isArchived: boolean | null
    sortOrder: number | null
  }

  export type DiscussionBoardMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    groupId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isArchived: boolean | null
    sortOrder: number | null
  }

  export type DiscussionBoardCountAggregateOutputType = {
    id: number
    name: number
    description: number
    groupId: number
    createdAt: number
    updatedAt: number
    isArchived: number
    sortOrder: number
    _all: number
  }


  export type DiscussionBoardAvgAggregateInputType = {
    sortOrder?: true
  }

  export type DiscussionBoardSumAggregateInputType = {
    sortOrder?: true
  }

  export type DiscussionBoardMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
    isArchived?: true
    sortOrder?: true
  }

  export type DiscussionBoardMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
    isArchived?: true
    sortOrder?: true
  }

  export type DiscussionBoardCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
    isArchived?: true
    sortOrder?: true
    _all?: true
  }

  export type DiscussionBoardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscussionBoard to aggregate.
     */
    where?: DiscussionBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionBoards to fetch.
     */
    orderBy?: DiscussionBoardOrderByWithRelationInput | DiscussionBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscussionBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiscussionBoards
    **/
    _count?: true | DiscussionBoardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiscussionBoardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiscussionBoardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscussionBoardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscussionBoardMaxAggregateInputType
  }

  export type GetDiscussionBoardAggregateType<T extends DiscussionBoardAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscussionBoard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscussionBoard[P]>
      : GetScalarType<T[P], AggregateDiscussionBoard[P]>
  }




  export type DiscussionBoardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionBoardWhereInput
    orderBy?: DiscussionBoardOrderByWithAggregationInput | DiscussionBoardOrderByWithAggregationInput[]
    by: DiscussionBoardScalarFieldEnum[] | DiscussionBoardScalarFieldEnum
    having?: DiscussionBoardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscussionBoardCountAggregateInputType | true
    _avg?: DiscussionBoardAvgAggregateInputType
    _sum?: DiscussionBoardSumAggregateInputType
    _min?: DiscussionBoardMinAggregateInputType
    _max?: DiscussionBoardMaxAggregateInputType
  }

  export type DiscussionBoardGroupByOutputType = {
    id: string
    name: string
    description: string | null
    groupId: string
    createdAt: Date
    updatedAt: Date
    isArchived: boolean
    sortOrder: number
    _count: DiscussionBoardCountAggregateOutputType | null
    _avg: DiscussionBoardAvgAggregateOutputType | null
    _sum: DiscussionBoardSumAggregateOutputType | null
    _min: DiscussionBoardMinAggregateOutputType | null
    _max: DiscussionBoardMaxAggregateOutputType | null
  }

  type GetDiscussionBoardGroupByPayload<T extends DiscussionBoardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscussionBoardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscussionBoardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscussionBoardGroupByOutputType[P]>
            : GetScalarType<T[P], DiscussionBoardGroupByOutputType[P]>
        }
      >
    >


  export type DiscussionBoardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    groupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isArchived?: boolean
    sortOrder?: boolean
    group?: boolean | GroupDefaultArgs<ExtArgs>
    posts?: boolean | DiscussionBoard$postsArgs<ExtArgs>
    _count?: boolean | DiscussionBoardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionBoard"]>

  export type DiscussionBoardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    groupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isArchived?: boolean
    sortOrder?: boolean
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionBoard"]>

  export type DiscussionBoardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    groupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isArchived?: boolean
    sortOrder?: boolean
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionBoard"]>

  export type DiscussionBoardSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    groupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isArchived?: boolean
    sortOrder?: boolean
  }

  export type DiscussionBoardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "groupId" | "createdAt" | "updatedAt" | "isArchived" | "sortOrder", ExtArgs["result"]["discussionBoard"]>
  export type DiscussionBoardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | GroupDefaultArgs<ExtArgs>
    posts?: boolean | DiscussionBoard$postsArgs<ExtArgs>
    _count?: boolean | DiscussionBoardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DiscussionBoardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }
  export type DiscussionBoardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $DiscussionBoardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiscussionBoard"
    objects: {
      group: Prisma.$GroupPayload<ExtArgs>
      posts: Prisma.$DiscussionPostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      groupId: string
      createdAt: Date
      updatedAt: Date
      isArchived: boolean
      sortOrder: number
    }, ExtArgs["result"]["discussionBoard"]>
    composites: {}
  }

  type DiscussionBoardGetPayload<S extends boolean | null | undefined | DiscussionBoardDefaultArgs> = $Result.GetResult<Prisma.$DiscussionBoardPayload, S>

  type DiscussionBoardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DiscussionBoardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiscussionBoardCountAggregateInputType | true
    }

  export interface DiscussionBoardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiscussionBoard'], meta: { name: 'DiscussionBoard' } }
    /**
     * Find zero or one DiscussionBoard that matches the filter.
     * @param {DiscussionBoardFindUniqueArgs} args - Arguments to find a DiscussionBoard
     * @example
     * // Get one DiscussionBoard
     * const discussionBoard = await prisma.discussionBoard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiscussionBoardFindUniqueArgs>(args: SelectSubset<T, DiscussionBoardFindUniqueArgs<ExtArgs>>): Prisma__DiscussionBoardClient<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DiscussionBoard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DiscussionBoardFindUniqueOrThrowArgs} args - Arguments to find a DiscussionBoard
     * @example
     * // Get one DiscussionBoard
     * const discussionBoard = await prisma.discussionBoard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiscussionBoardFindUniqueOrThrowArgs>(args: SelectSubset<T, DiscussionBoardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiscussionBoardClient<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscussionBoard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionBoardFindFirstArgs} args - Arguments to find a DiscussionBoard
     * @example
     * // Get one DiscussionBoard
     * const discussionBoard = await prisma.discussionBoard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiscussionBoardFindFirstArgs>(args?: SelectSubset<T, DiscussionBoardFindFirstArgs<ExtArgs>>): Prisma__DiscussionBoardClient<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscussionBoard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionBoardFindFirstOrThrowArgs} args - Arguments to find a DiscussionBoard
     * @example
     * // Get one DiscussionBoard
     * const discussionBoard = await prisma.discussionBoard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiscussionBoardFindFirstOrThrowArgs>(args?: SelectSubset<T, DiscussionBoardFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiscussionBoardClient<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DiscussionBoards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionBoardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiscussionBoards
     * const discussionBoards = await prisma.discussionBoard.findMany()
     * 
     * // Get first 10 DiscussionBoards
     * const discussionBoards = await prisma.discussionBoard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discussionBoardWithIdOnly = await prisma.discussionBoard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiscussionBoardFindManyArgs>(args?: SelectSubset<T, DiscussionBoardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DiscussionBoard.
     * @param {DiscussionBoardCreateArgs} args - Arguments to create a DiscussionBoard.
     * @example
     * // Create one DiscussionBoard
     * const DiscussionBoard = await prisma.discussionBoard.create({
     *   data: {
     *     // ... data to create a DiscussionBoard
     *   }
     * })
     * 
     */
    create<T extends DiscussionBoardCreateArgs>(args: SelectSubset<T, DiscussionBoardCreateArgs<ExtArgs>>): Prisma__DiscussionBoardClient<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DiscussionBoards.
     * @param {DiscussionBoardCreateManyArgs} args - Arguments to create many DiscussionBoards.
     * @example
     * // Create many DiscussionBoards
     * const discussionBoard = await prisma.discussionBoard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiscussionBoardCreateManyArgs>(args?: SelectSubset<T, DiscussionBoardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DiscussionBoards and returns the data saved in the database.
     * @param {DiscussionBoardCreateManyAndReturnArgs} args - Arguments to create many DiscussionBoards.
     * @example
     * // Create many DiscussionBoards
     * const discussionBoard = await prisma.discussionBoard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DiscussionBoards and only return the `id`
     * const discussionBoardWithIdOnly = await prisma.discussionBoard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiscussionBoardCreateManyAndReturnArgs>(args?: SelectSubset<T, DiscussionBoardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DiscussionBoard.
     * @param {DiscussionBoardDeleteArgs} args - Arguments to delete one DiscussionBoard.
     * @example
     * // Delete one DiscussionBoard
     * const DiscussionBoard = await prisma.discussionBoard.delete({
     *   where: {
     *     // ... filter to delete one DiscussionBoard
     *   }
     * })
     * 
     */
    delete<T extends DiscussionBoardDeleteArgs>(args: SelectSubset<T, DiscussionBoardDeleteArgs<ExtArgs>>): Prisma__DiscussionBoardClient<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DiscussionBoard.
     * @param {DiscussionBoardUpdateArgs} args - Arguments to update one DiscussionBoard.
     * @example
     * // Update one DiscussionBoard
     * const discussionBoard = await prisma.discussionBoard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiscussionBoardUpdateArgs>(args: SelectSubset<T, DiscussionBoardUpdateArgs<ExtArgs>>): Prisma__DiscussionBoardClient<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DiscussionBoards.
     * @param {DiscussionBoardDeleteManyArgs} args - Arguments to filter DiscussionBoards to delete.
     * @example
     * // Delete a few DiscussionBoards
     * const { count } = await prisma.discussionBoard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiscussionBoardDeleteManyArgs>(args?: SelectSubset<T, DiscussionBoardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscussionBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionBoardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiscussionBoards
     * const discussionBoard = await prisma.discussionBoard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiscussionBoardUpdateManyArgs>(args: SelectSubset<T, DiscussionBoardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscussionBoards and returns the data updated in the database.
     * @param {DiscussionBoardUpdateManyAndReturnArgs} args - Arguments to update many DiscussionBoards.
     * @example
     * // Update many DiscussionBoards
     * const discussionBoard = await prisma.discussionBoard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DiscussionBoards and only return the `id`
     * const discussionBoardWithIdOnly = await prisma.discussionBoard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DiscussionBoardUpdateManyAndReturnArgs>(args: SelectSubset<T, DiscussionBoardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DiscussionBoard.
     * @param {DiscussionBoardUpsertArgs} args - Arguments to update or create a DiscussionBoard.
     * @example
     * // Update or create a DiscussionBoard
     * const discussionBoard = await prisma.discussionBoard.upsert({
     *   create: {
     *     // ... data to create a DiscussionBoard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiscussionBoard we want to update
     *   }
     * })
     */
    upsert<T extends DiscussionBoardUpsertArgs>(args: SelectSubset<T, DiscussionBoardUpsertArgs<ExtArgs>>): Prisma__DiscussionBoardClient<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DiscussionBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionBoardCountArgs} args - Arguments to filter DiscussionBoards to count.
     * @example
     * // Count the number of DiscussionBoards
     * const count = await prisma.discussionBoard.count({
     *   where: {
     *     // ... the filter for the DiscussionBoards we want to count
     *   }
     * })
    **/
    count<T extends DiscussionBoardCountArgs>(
      args?: Subset<T, DiscussionBoardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscussionBoardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiscussionBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionBoardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscussionBoardAggregateArgs>(args: Subset<T, DiscussionBoardAggregateArgs>): Prisma.PrismaPromise<GetDiscussionBoardAggregateType<T>>

    /**
     * Group by DiscussionBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionBoardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscussionBoardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscussionBoardGroupByArgs['orderBy'] }
        : { orderBy?: DiscussionBoardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscussionBoardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionBoardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiscussionBoard model
   */
  readonly fields: DiscussionBoardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiscussionBoard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscussionBoardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    group<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    posts<T extends DiscussionBoard$postsArgs<ExtArgs> = {}>(args?: Subset<T, DiscussionBoard$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DiscussionBoard model
   */
  interface DiscussionBoardFieldRefs {
    readonly id: FieldRef<"DiscussionBoard", 'String'>
    readonly name: FieldRef<"DiscussionBoard", 'String'>
    readonly description: FieldRef<"DiscussionBoard", 'String'>
    readonly groupId: FieldRef<"DiscussionBoard", 'String'>
    readonly createdAt: FieldRef<"DiscussionBoard", 'DateTime'>
    readonly updatedAt: FieldRef<"DiscussionBoard", 'DateTime'>
    readonly isArchived: FieldRef<"DiscussionBoard", 'Boolean'>
    readonly sortOrder: FieldRef<"DiscussionBoard", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DiscussionBoard findUnique
   */
  export type DiscussionBoardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionBoard to fetch.
     */
    where: DiscussionBoardWhereUniqueInput
  }

  /**
   * DiscussionBoard findUniqueOrThrow
   */
  export type DiscussionBoardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionBoard to fetch.
     */
    where: DiscussionBoardWhereUniqueInput
  }

  /**
   * DiscussionBoard findFirst
   */
  export type DiscussionBoardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionBoard to fetch.
     */
    where?: DiscussionBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionBoards to fetch.
     */
    orderBy?: DiscussionBoardOrderByWithRelationInput | DiscussionBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscussionBoards.
     */
    cursor?: DiscussionBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscussionBoards.
     */
    distinct?: DiscussionBoardScalarFieldEnum | DiscussionBoardScalarFieldEnum[]
  }

  /**
   * DiscussionBoard findFirstOrThrow
   */
  export type DiscussionBoardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionBoard to fetch.
     */
    where?: DiscussionBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionBoards to fetch.
     */
    orderBy?: DiscussionBoardOrderByWithRelationInput | DiscussionBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscussionBoards.
     */
    cursor?: DiscussionBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscussionBoards.
     */
    distinct?: DiscussionBoardScalarFieldEnum | DiscussionBoardScalarFieldEnum[]
  }

  /**
   * DiscussionBoard findMany
   */
  export type DiscussionBoardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionBoards to fetch.
     */
    where?: DiscussionBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionBoards to fetch.
     */
    orderBy?: DiscussionBoardOrderByWithRelationInput | DiscussionBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiscussionBoards.
     */
    cursor?: DiscussionBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionBoards.
     */
    skip?: number
    distinct?: DiscussionBoardScalarFieldEnum | DiscussionBoardScalarFieldEnum[]
  }

  /**
   * DiscussionBoard create
   */
  export type DiscussionBoardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardInclude<ExtArgs> | null
    /**
     * The data needed to create a DiscussionBoard.
     */
    data: XOR<DiscussionBoardCreateInput, DiscussionBoardUncheckedCreateInput>
  }

  /**
   * DiscussionBoard createMany
   */
  export type DiscussionBoardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiscussionBoards.
     */
    data: DiscussionBoardCreateManyInput | DiscussionBoardCreateManyInput[]
  }

  /**
   * DiscussionBoard createManyAndReturn
   */
  export type DiscussionBoardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * The data used to create many DiscussionBoards.
     */
    data: DiscussionBoardCreateManyInput | DiscussionBoardCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiscussionBoard update
   */
  export type DiscussionBoardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardInclude<ExtArgs> | null
    /**
     * The data needed to update a DiscussionBoard.
     */
    data: XOR<DiscussionBoardUpdateInput, DiscussionBoardUncheckedUpdateInput>
    /**
     * Choose, which DiscussionBoard to update.
     */
    where: DiscussionBoardWhereUniqueInput
  }

  /**
   * DiscussionBoard updateMany
   */
  export type DiscussionBoardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiscussionBoards.
     */
    data: XOR<DiscussionBoardUpdateManyMutationInput, DiscussionBoardUncheckedUpdateManyInput>
    /**
     * Filter which DiscussionBoards to update
     */
    where?: DiscussionBoardWhereInput
    /**
     * Limit how many DiscussionBoards to update.
     */
    limit?: number
  }

  /**
   * DiscussionBoard updateManyAndReturn
   */
  export type DiscussionBoardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * The data used to update DiscussionBoards.
     */
    data: XOR<DiscussionBoardUpdateManyMutationInput, DiscussionBoardUncheckedUpdateManyInput>
    /**
     * Filter which DiscussionBoards to update
     */
    where?: DiscussionBoardWhereInput
    /**
     * Limit how many DiscussionBoards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiscussionBoard upsert
   */
  export type DiscussionBoardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardInclude<ExtArgs> | null
    /**
     * The filter to search for the DiscussionBoard to update in case it exists.
     */
    where: DiscussionBoardWhereUniqueInput
    /**
     * In case the DiscussionBoard found by the `where` argument doesn't exist, create a new DiscussionBoard with this data.
     */
    create: XOR<DiscussionBoardCreateInput, DiscussionBoardUncheckedCreateInput>
    /**
     * In case the DiscussionBoard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscussionBoardUpdateInput, DiscussionBoardUncheckedUpdateInput>
  }

  /**
   * DiscussionBoard delete
   */
  export type DiscussionBoardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardInclude<ExtArgs> | null
    /**
     * Filter which DiscussionBoard to delete.
     */
    where: DiscussionBoardWhereUniqueInput
  }

  /**
   * DiscussionBoard deleteMany
   */
  export type DiscussionBoardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscussionBoards to delete
     */
    where?: DiscussionBoardWhereInput
    /**
     * Limit how many DiscussionBoards to delete.
     */
    limit?: number
  }

  /**
   * DiscussionBoard.posts
   */
  export type DiscussionBoard$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    where?: DiscussionPostWhereInput
    orderBy?: DiscussionPostOrderByWithRelationInput | DiscussionPostOrderByWithRelationInput[]
    cursor?: DiscussionPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionPostScalarFieldEnum | DiscussionPostScalarFieldEnum[]
  }

  /**
   * DiscussionBoard without action
   */
  export type DiscussionBoardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionBoard
     */
    select?: DiscussionBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionBoard
     */
    omit?: DiscussionBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionBoardInclude<ExtArgs> | null
  }


  /**
   * Model DiscussionPost
   */

  export type AggregateDiscussionPost = {
    _count: DiscussionPostCountAggregateOutputType | null
    _avg: DiscussionPostAvgAggregateOutputType | null
    _sum: DiscussionPostSumAggregateOutputType | null
    _min: DiscussionPostMinAggregateOutputType | null
    _max: DiscussionPostMaxAggregateOutputType | null
  }

  export type DiscussionPostAvgAggregateOutputType = {
    viewCount: number | null
  }

  export type DiscussionPostSumAggregateOutputType = {
    viewCount: number | null
  }

  export type DiscussionPostMinAggregateOutputType = {
    id: string | null
    title: string | null
    encryptedContent: string | null
    iv: string | null
    keyId: string | null
    authorId: string | null
    boardId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isLocked: boolean | null
    isPinned: boolean | null
    viewCount: number | null
  }

  export type DiscussionPostMaxAggregateOutputType = {
    id: string | null
    title: string | null
    encryptedContent: string | null
    iv: string | null
    keyId: string | null
    authorId: string | null
    boardId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isLocked: boolean | null
    isPinned: boolean | null
    viewCount: number | null
  }

  export type DiscussionPostCountAggregateOutputType = {
    id: number
    title: number
    encryptedContent: number
    iv: number
    keyId: number
    authorId: number
    boardId: number
    createdAt: number
    updatedAt: number
    isLocked: number
    isPinned: number
    viewCount: number
    _all: number
  }


  export type DiscussionPostAvgAggregateInputType = {
    viewCount?: true
  }

  export type DiscussionPostSumAggregateInputType = {
    viewCount?: true
  }

  export type DiscussionPostMinAggregateInputType = {
    id?: true
    title?: true
    encryptedContent?: true
    iv?: true
    keyId?: true
    authorId?: true
    boardId?: true
    createdAt?: true
    updatedAt?: true
    isLocked?: true
    isPinned?: true
    viewCount?: true
  }

  export type DiscussionPostMaxAggregateInputType = {
    id?: true
    title?: true
    encryptedContent?: true
    iv?: true
    keyId?: true
    authorId?: true
    boardId?: true
    createdAt?: true
    updatedAt?: true
    isLocked?: true
    isPinned?: true
    viewCount?: true
  }

  export type DiscussionPostCountAggregateInputType = {
    id?: true
    title?: true
    encryptedContent?: true
    iv?: true
    keyId?: true
    authorId?: true
    boardId?: true
    createdAt?: true
    updatedAt?: true
    isLocked?: true
    isPinned?: true
    viewCount?: true
    _all?: true
  }

  export type DiscussionPostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscussionPost to aggregate.
     */
    where?: DiscussionPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionPosts to fetch.
     */
    orderBy?: DiscussionPostOrderByWithRelationInput | DiscussionPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscussionPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiscussionPosts
    **/
    _count?: true | DiscussionPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiscussionPostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiscussionPostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscussionPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscussionPostMaxAggregateInputType
  }

  export type GetDiscussionPostAggregateType<T extends DiscussionPostAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscussionPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscussionPost[P]>
      : GetScalarType<T[P], AggregateDiscussionPost[P]>
  }




  export type DiscussionPostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionPostWhereInput
    orderBy?: DiscussionPostOrderByWithAggregationInput | DiscussionPostOrderByWithAggregationInput[]
    by: DiscussionPostScalarFieldEnum[] | DiscussionPostScalarFieldEnum
    having?: DiscussionPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscussionPostCountAggregateInputType | true
    _avg?: DiscussionPostAvgAggregateInputType
    _sum?: DiscussionPostSumAggregateInputType
    _min?: DiscussionPostMinAggregateInputType
    _max?: DiscussionPostMaxAggregateInputType
  }

  export type DiscussionPostGroupByOutputType = {
    id: string
    title: string
    encryptedContent: string
    iv: string
    keyId: string | null
    authorId: string
    boardId: string
    createdAt: Date
    updatedAt: Date
    isLocked: boolean
    isPinned: boolean
    viewCount: number
    _count: DiscussionPostCountAggregateOutputType | null
    _avg: DiscussionPostAvgAggregateOutputType | null
    _sum: DiscussionPostSumAggregateOutputType | null
    _min: DiscussionPostMinAggregateOutputType | null
    _max: DiscussionPostMaxAggregateOutputType | null
  }

  type GetDiscussionPostGroupByPayload<T extends DiscussionPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscussionPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscussionPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscussionPostGroupByOutputType[P]>
            : GetScalarType<T[P], DiscussionPostGroupByOutputType[P]>
        }
      >
    >


  export type DiscussionPostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    authorId?: boolean
    boardId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | DiscussionBoardDefaultArgs<ExtArgs>
    comments?: boolean | DiscussionPost$commentsArgs<ExtArgs>
    attachments?: boolean | DiscussionPost$attachmentsArgs<ExtArgs>
    reactions?: boolean | DiscussionPost$reactionsArgs<ExtArgs>
    _count?: boolean | DiscussionPostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionPost"]>

  export type DiscussionPostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    authorId?: boolean
    boardId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | DiscussionBoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionPost"]>

  export type DiscussionPostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    authorId?: boolean
    boardId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | DiscussionBoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionPost"]>

  export type DiscussionPostSelectScalar = {
    id?: boolean
    title?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    authorId?: boolean
    boardId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: boolean
  }

  export type DiscussionPostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "encryptedContent" | "iv" | "keyId" | "authorId" | "boardId" | "createdAt" | "updatedAt" | "isLocked" | "isPinned" | "viewCount", ExtArgs["result"]["discussionPost"]>
  export type DiscussionPostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | DiscussionBoardDefaultArgs<ExtArgs>
    comments?: boolean | DiscussionPost$commentsArgs<ExtArgs>
    attachments?: boolean | DiscussionPost$attachmentsArgs<ExtArgs>
    reactions?: boolean | DiscussionPost$reactionsArgs<ExtArgs>
    _count?: boolean | DiscussionPostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DiscussionPostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | DiscussionBoardDefaultArgs<ExtArgs>
  }
  export type DiscussionPostIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | DiscussionBoardDefaultArgs<ExtArgs>
  }

  export type $DiscussionPostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiscussionPost"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      board: Prisma.$DiscussionBoardPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
      attachments: Prisma.$FilePayload<ExtArgs>[]
      reactions: Prisma.$ReactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      encryptedContent: string
      iv: string
      keyId: string | null
      authorId: string
      boardId: string
      createdAt: Date
      updatedAt: Date
      isLocked: boolean
      isPinned: boolean
      viewCount: number
    }, ExtArgs["result"]["discussionPost"]>
    composites: {}
  }

  type DiscussionPostGetPayload<S extends boolean | null | undefined | DiscussionPostDefaultArgs> = $Result.GetResult<Prisma.$DiscussionPostPayload, S>

  type DiscussionPostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DiscussionPostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiscussionPostCountAggregateInputType | true
    }

  export interface DiscussionPostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiscussionPost'], meta: { name: 'DiscussionPost' } }
    /**
     * Find zero or one DiscussionPost that matches the filter.
     * @param {DiscussionPostFindUniqueArgs} args - Arguments to find a DiscussionPost
     * @example
     * // Get one DiscussionPost
     * const discussionPost = await prisma.discussionPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiscussionPostFindUniqueArgs>(args: SelectSubset<T, DiscussionPostFindUniqueArgs<ExtArgs>>): Prisma__DiscussionPostClient<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DiscussionPost that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DiscussionPostFindUniqueOrThrowArgs} args - Arguments to find a DiscussionPost
     * @example
     * // Get one DiscussionPost
     * const discussionPost = await prisma.discussionPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiscussionPostFindUniqueOrThrowArgs>(args: SelectSubset<T, DiscussionPostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiscussionPostClient<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscussionPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionPostFindFirstArgs} args - Arguments to find a DiscussionPost
     * @example
     * // Get one DiscussionPost
     * const discussionPost = await prisma.discussionPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiscussionPostFindFirstArgs>(args?: SelectSubset<T, DiscussionPostFindFirstArgs<ExtArgs>>): Prisma__DiscussionPostClient<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscussionPost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionPostFindFirstOrThrowArgs} args - Arguments to find a DiscussionPost
     * @example
     * // Get one DiscussionPost
     * const discussionPost = await prisma.discussionPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiscussionPostFindFirstOrThrowArgs>(args?: SelectSubset<T, DiscussionPostFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiscussionPostClient<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DiscussionPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionPostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiscussionPosts
     * const discussionPosts = await prisma.discussionPost.findMany()
     * 
     * // Get first 10 DiscussionPosts
     * const discussionPosts = await prisma.discussionPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discussionPostWithIdOnly = await prisma.discussionPost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiscussionPostFindManyArgs>(args?: SelectSubset<T, DiscussionPostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DiscussionPost.
     * @param {DiscussionPostCreateArgs} args - Arguments to create a DiscussionPost.
     * @example
     * // Create one DiscussionPost
     * const DiscussionPost = await prisma.discussionPost.create({
     *   data: {
     *     // ... data to create a DiscussionPost
     *   }
     * })
     * 
     */
    create<T extends DiscussionPostCreateArgs>(args: SelectSubset<T, DiscussionPostCreateArgs<ExtArgs>>): Prisma__DiscussionPostClient<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DiscussionPosts.
     * @param {DiscussionPostCreateManyArgs} args - Arguments to create many DiscussionPosts.
     * @example
     * // Create many DiscussionPosts
     * const discussionPost = await prisma.discussionPost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiscussionPostCreateManyArgs>(args?: SelectSubset<T, DiscussionPostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DiscussionPosts and returns the data saved in the database.
     * @param {DiscussionPostCreateManyAndReturnArgs} args - Arguments to create many DiscussionPosts.
     * @example
     * // Create many DiscussionPosts
     * const discussionPost = await prisma.discussionPost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DiscussionPosts and only return the `id`
     * const discussionPostWithIdOnly = await prisma.discussionPost.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiscussionPostCreateManyAndReturnArgs>(args?: SelectSubset<T, DiscussionPostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DiscussionPost.
     * @param {DiscussionPostDeleteArgs} args - Arguments to delete one DiscussionPost.
     * @example
     * // Delete one DiscussionPost
     * const DiscussionPost = await prisma.discussionPost.delete({
     *   where: {
     *     // ... filter to delete one DiscussionPost
     *   }
     * })
     * 
     */
    delete<T extends DiscussionPostDeleteArgs>(args: SelectSubset<T, DiscussionPostDeleteArgs<ExtArgs>>): Prisma__DiscussionPostClient<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DiscussionPost.
     * @param {DiscussionPostUpdateArgs} args - Arguments to update one DiscussionPost.
     * @example
     * // Update one DiscussionPost
     * const discussionPost = await prisma.discussionPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiscussionPostUpdateArgs>(args: SelectSubset<T, DiscussionPostUpdateArgs<ExtArgs>>): Prisma__DiscussionPostClient<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DiscussionPosts.
     * @param {DiscussionPostDeleteManyArgs} args - Arguments to filter DiscussionPosts to delete.
     * @example
     * // Delete a few DiscussionPosts
     * const { count } = await prisma.discussionPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiscussionPostDeleteManyArgs>(args?: SelectSubset<T, DiscussionPostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscussionPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiscussionPosts
     * const discussionPost = await prisma.discussionPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiscussionPostUpdateManyArgs>(args: SelectSubset<T, DiscussionPostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscussionPosts and returns the data updated in the database.
     * @param {DiscussionPostUpdateManyAndReturnArgs} args - Arguments to update many DiscussionPosts.
     * @example
     * // Update many DiscussionPosts
     * const discussionPost = await prisma.discussionPost.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DiscussionPosts and only return the `id`
     * const discussionPostWithIdOnly = await prisma.discussionPost.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DiscussionPostUpdateManyAndReturnArgs>(args: SelectSubset<T, DiscussionPostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DiscussionPost.
     * @param {DiscussionPostUpsertArgs} args - Arguments to update or create a DiscussionPost.
     * @example
     * // Update or create a DiscussionPost
     * const discussionPost = await prisma.discussionPost.upsert({
     *   create: {
     *     // ... data to create a DiscussionPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiscussionPost we want to update
     *   }
     * })
     */
    upsert<T extends DiscussionPostUpsertArgs>(args: SelectSubset<T, DiscussionPostUpsertArgs<ExtArgs>>): Prisma__DiscussionPostClient<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DiscussionPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionPostCountArgs} args - Arguments to filter DiscussionPosts to count.
     * @example
     * // Count the number of DiscussionPosts
     * const count = await prisma.discussionPost.count({
     *   where: {
     *     // ... the filter for the DiscussionPosts we want to count
     *   }
     * })
    **/
    count<T extends DiscussionPostCountArgs>(
      args?: Subset<T, DiscussionPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscussionPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiscussionPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscussionPostAggregateArgs>(args: Subset<T, DiscussionPostAggregateArgs>): Prisma.PrismaPromise<GetDiscussionPostAggregateType<T>>

    /**
     * Group by DiscussionPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscussionPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscussionPostGroupByArgs['orderBy'] }
        : { orderBy?: DiscussionPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscussionPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiscussionPost model
   */
  readonly fields: DiscussionPostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiscussionPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscussionPostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    board<T extends DiscussionBoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DiscussionBoardDefaultArgs<ExtArgs>>): Prisma__DiscussionBoardClient<$Result.GetResult<Prisma.$DiscussionBoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    comments<T extends DiscussionPost$commentsArgs<ExtArgs> = {}>(args?: Subset<T, DiscussionPost$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attachments<T extends DiscussionPost$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, DiscussionPost$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reactions<T extends DiscussionPost$reactionsArgs<ExtArgs> = {}>(args?: Subset<T, DiscussionPost$reactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DiscussionPost model
   */
  interface DiscussionPostFieldRefs {
    readonly id: FieldRef<"DiscussionPost", 'String'>
    readonly title: FieldRef<"DiscussionPost", 'String'>
    readonly encryptedContent: FieldRef<"DiscussionPost", 'String'>
    readonly iv: FieldRef<"DiscussionPost", 'String'>
    readonly keyId: FieldRef<"DiscussionPost", 'String'>
    readonly authorId: FieldRef<"DiscussionPost", 'String'>
    readonly boardId: FieldRef<"DiscussionPost", 'String'>
    readonly createdAt: FieldRef<"DiscussionPost", 'DateTime'>
    readonly updatedAt: FieldRef<"DiscussionPost", 'DateTime'>
    readonly isLocked: FieldRef<"DiscussionPost", 'Boolean'>
    readonly isPinned: FieldRef<"DiscussionPost", 'Boolean'>
    readonly viewCount: FieldRef<"DiscussionPost", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DiscussionPost findUnique
   */
  export type DiscussionPostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionPost to fetch.
     */
    where: DiscussionPostWhereUniqueInput
  }

  /**
   * DiscussionPost findUniqueOrThrow
   */
  export type DiscussionPostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionPost to fetch.
     */
    where: DiscussionPostWhereUniqueInput
  }

  /**
   * DiscussionPost findFirst
   */
  export type DiscussionPostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionPost to fetch.
     */
    where?: DiscussionPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionPosts to fetch.
     */
    orderBy?: DiscussionPostOrderByWithRelationInput | DiscussionPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscussionPosts.
     */
    cursor?: DiscussionPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscussionPosts.
     */
    distinct?: DiscussionPostScalarFieldEnum | DiscussionPostScalarFieldEnum[]
  }

  /**
   * DiscussionPost findFirstOrThrow
   */
  export type DiscussionPostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionPost to fetch.
     */
    where?: DiscussionPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionPosts to fetch.
     */
    orderBy?: DiscussionPostOrderByWithRelationInput | DiscussionPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscussionPosts.
     */
    cursor?: DiscussionPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscussionPosts.
     */
    distinct?: DiscussionPostScalarFieldEnum | DiscussionPostScalarFieldEnum[]
  }

  /**
   * DiscussionPost findMany
   */
  export type DiscussionPostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionPosts to fetch.
     */
    where?: DiscussionPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionPosts to fetch.
     */
    orderBy?: DiscussionPostOrderByWithRelationInput | DiscussionPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiscussionPosts.
     */
    cursor?: DiscussionPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionPosts.
     */
    skip?: number
    distinct?: DiscussionPostScalarFieldEnum | DiscussionPostScalarFieldEnum[]
  }

  /**
   * DiscussionPost create
   */
  export type DiscussionPostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    /**
     * The data needed to create a DiscussionPost.
     */
    data: XOR<DiscussionPostCreateInput, DiscussionPostUncheckedCreateInput>
  }

  /**
   * DiscussionPost createMany
   */
  export type DiscussionPostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiscussionPosts.
     */
    data: DiscussionPostCreateManyInput | DiscussionPostCreateManyInput[]
  }

  /**
   * DiscussionPost createManyAndReturn
   */
  export type DiscussionPostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * The data used to create many DiscussionPosts.
     */
    data: DiscussionPostCreateManyInput | DiscussionPostCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiscussionPost update
   */
  export type DiscussionPostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    /**
     * The data needed to update a DiscussionPost.
     */
    data: XOR<DiscussionPostUpdateInput, DiscussionPostUncheckedUpdateInput>
    /**
     * Choose, which DiscussionPost to update.
     */
    where: DiscussionPostWhereUniqueInput
  }

  /**
   * DiscussionPost updateMany
   */
  export type DiscussionPostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiscussionPosts.
     */
    data: XOR<DiscussionPostUpdateManyMutationInput, DiscussionPostUncheckedUpdateManyInput>
    /**
     * Filter which DiscussionPosts to update
     */
    where?: DiscussionPostWhereInput
    /**
     * Limit how many DiscussionPosts to update.
     */
    limit?: number
  }

  /**
   * DiscussionPost updateManyAndReturn
   */
  export type DiscussionPostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * The data used to update DiscussionPosts.
     */
    data: XOR<DiscussionPostUpdateManyMutationInput, DiscussionPostUncheckedUpdateManyInput>
    /**
     * Filter which DiscussionPosts to update
     */
    where?: DiscussionPostWhereInput
    /**
     * Limit how many DiscussionPosts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiscussionPost upsert
   */
  export type DiscussionPostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    /**
     * The filter to search for the DiscussionPost to update in case it exists.
     */
    where: DiscussionPostWhereUniqueInput
    /**
     * In case the DiscussionPost found by the `where` argument doesn't exist, create a new DiscussionPost with this data.
     */
    create: XOR<DiscussionPostCreateInput, DiscussionPostUncheckedCreateInput>
    /**
     * In case the DiscussionPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscussionPostUpdateInput, DiscussionPostUncheckedUpdateInput>
  }

  /**
   * DiscussionPost delete
   */
  export type DiscussionPostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    /**
     * Filter which DiscussionPost to delete.
     */
    where: DiscussionPostWhereUniqueInput
  }

  /**
   * DiscussionPost deleteMany
   */
  export type DiscussionPostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscussionPosts to delete
     */
    where?: DiscussionPostWhereInput
    /**
     * Limit how many DiscussionPosts to delete.
     */
    limit?: number
  }

  /**
   * DiscussionPost.comments
   */
  export type DiscussionPost$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * DiscussionPost.attachments
   */
  export type DiscussionPost$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * DiscussionPost.reactions
   */
  export type DiscussionPost$reactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    where?: ReactionWhereInput
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    cursor?: ReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * DiscussionPost without action
   */
  export type DiscussionPostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    encryptedContent: string | null
    iv: string | null
    keyId: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    parentId: string | null
    postId: string | null
    fileId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    encryptedContent: string | null
    iv: string | null
    keyId: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    parentId: string | null
    postId: string | null
    fileId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    encryptedContent: number
    iv: number
    keyId: number
    authorId: number
    createdAt: number
    updatedAt: number
    parentId: number
    postId: number
    fileId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    encryptedContent?: true
    iv?: true
    keyId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
    postId?: true
    fileId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    encryptedContent?: true
    iv?: true
    keyId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
    postId?: true
    fileId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    encryptedContent?: true
    iv?: true
    keyId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
    postId?: true
    fileId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    encryptedContent: string
    iv: string
    keyId: string | null
    authorId: string
    createdAt: Date
    updatedAt: Date
    parentId: string | null
    postId: string | null
    fileId: string | null
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    postId?: boolean
    fileId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | Comment$postArgs<ExtArgs>
    file?: boolean | Comment$fileArgs<ExtArgs>
    parentComment?: boolean | Comment$parentCommentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    reactions?: boolean | Comment$reactionsArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    postId?: boolean
    fileId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | Comment$postArgs<ExtArgs>
    file?: boolean | Comment$fileArgs<ExtArgs>
    parentComment?: boolean | Comment$parentCommentArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    postId?: boolean
    fileId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | Comment$postArgs<ExtArgs>
    file?: boolean | Comment$fileArgs<ExtArgs>
    parentComment?: boolean | Comment$parentCommentArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    encryptedContent?: boolean
    iv?: boolean
    keyId?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    postId?: boolean
    fileId?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "encryptedContent" | "iv" | "keyId" | "authorId" | "createdAt" | "updatedAt" | "parentId" | "postId" | "fileId", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | Comment$postArgs<ExtArgs>
    file?: boolean | Comment$fileArgs<ExtArgs>
    parentComment?: boolean | Comment$parentCommentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    reactions?: boolean | Comment$reactionsArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | Comment$postArgs<ExtArgs>
    file?: boolean | Comment$fileArgs<ExtArgs>
    parentComment?: boolean | Comment$parentCommentArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | Comment$postArgs<ExtArgs>
    file?: boolean | Comment$fileArgs<ExtArgs>
    parentComment?: boolean | Comment$parentCommentArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$DiscussionPostPayload<ExtArgs> | null
      file: Prisma.$FilePayload<ExtArgs> | null
      parentComment: Prisma.$CommentPayload<ExtArgs> | null
      replies: Prisma.$CommentPayload<ExtArgs>[]
      reactions: Prisma.$ReactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      encryptedContent: string
      iv: string
      keyId: string | null
      authorId: string
      createdAt: Date
      updatedAt: Date
      parentId: string | null
      postId: string | null
      fileId: string | null
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends Comment$postArgs<ExtArgs> = {}>(args?: Subset<T, Comment$postArgs<ExtArgs>>): Prisma__DiscussionPostClient<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    file<T extends Comment$fileArgs<ExtArgs> = {}>(args?: Subset<T, Comment$fileArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    parentComment<T extends Comment$parentCommentArgs<ExtArgs> = {}>(args?: Subset<T, Comment$parentCommentArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    replies<T extends Comment$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Comment$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reactions<T extends Comment$reactionsArgs<ExtArgs> = {}>(args?: Subset<T, Comment$reactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly encryptedContent: FieldRef<"Comment", 'String'>
    readonly iv: FieldRef<"Comment", 'String'>
    readonly keyId: FieldRef<"Comment", 'String'>
    readonly authorId: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly parentId: FieldRef<"Comment", 'String'>
    readonly postId: FieldRef<"Comment", 'String'>
    readonly fileId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment.post
   */
  export type Comment$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    where?: DiscussionPostWhereInput
  }

  /**
   * Comment.file
   */
  export type Comment$fileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * Comment.parentComment
   */
  export type Comment$parentCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
  }

  /**
   * Comment.replies
   */
  export type Comment$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment.reactions
   */
  export type Comment$reactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    where?: ReactionWhereInput
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    cursor?: ReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Reaction
   */

  export type AggregateReaction = {
    _count: ReactionCountAggregateOutputType | null
    _min: ReactionMinAggregateOutputType | null
    _max: ReactionMaxAggregateOutputType | null
  }

  export type ReactionMinAggregateOutputType = {
    id: string | null
    type: string | null
    userId: string | null
    createdAt: Date | null
    messageId: string | null
    postId: string | null
    commentId: string | null
    fileId: string | null
  }

  export type ReactionMaxAggregateOutputType = {
    id: string | null
    type: string | null
    userId: string | null
    createdAt: Date | null
    messageId: string | null
    postId: string | null
    commentId: string | null
    fileId: string | null
  }

  export type ReactionCountAggregateOutputType = {
    id: number
    type: number
    userId: number
    createdAt: number
    messageId: number
    postId: number
    commentId: number
    fileId: number
    _all: number
  }


  export type ReactionMinAggregateInputType = {
    id?: true
    type?: true
    userId?: true
    createdAt?: true
    messageId?: true
    postId?: true
    commentId?: true
    fileId?: true
  }

  export type ReactionMaxAggregateInputType = {
    id?: true
    type?: true
    userId?: true
    createdAt?: true
    messageId?: true
    postId?: true
    commentId?: true
    fileId?: true
  }

  export type ReactionCountAggregateInputType = {
    id?: true
    type?: true
    userId?: true
    createdAt?: true
    messageId?: true
    postId?: true
    commentId?: true
    fileId?: true
    _all?: true
  }

  export type ReactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reaction to aggregate.
     */
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     */
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reactions
    **/
    _count?: true | ReactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReactionMaxAggregateInputType
  }

  export type GetReactionAggregateType<T extends ReactionAggregateArgs> = {
        [P in keyof T & keyof AggregateReaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReaction[P]>
      : GetScalarType<T[P], AggregateReaction[P]>
  }




  export type ReactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReactionWhereInput
    orderBy?: ReactionOrderByWithAggregationInput | ReactionOrderByWithAggregationInput[]
    by: ReactionScalarFieldEnum[] | ReactionScalarFieldEnum
    having?: ReactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReactionCountAggregateInputType | true
    _min?: ReactionMinAggregateInputType
    _max?: ReactionMaxAggregateInputType
  }

  export type ReactionGroupByOutputType = {
    id: string
    type: string
    userId: string
    createdAt: Date
    messageId: string | null
    postId: string | null
    commentId: string | null
    fileId: string | null
    _count: ReactionCountAggregateOutputType | null
    _min: ReactionMinAggregateOutputType | null
    _max: ReactionMaxAggregateOutputType | null
  }

  type GetReactionGroupByPayload<T extends ReactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReactionGroupByOutputType[P]>
            : GetScalarType<T[P], ReactionGroupByOutputType[P]>
        }
      >
    >


  export type ReactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    userId?: boolean
    createdAt?: boolean
    messageId?: boolean
    postId?: boolean
    commentId?: boolean
    fileId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | Reaction$messageArgs<ExtArgs>
    post?: boolean | Reaction$postArgs<ExtArgs>
    comment?: boolean | Reaction$commentArgs<ExtArgs>
    file?: boolean | Reaction$fileArgs<ExtArgs>
  }, ExtArgs["result"]["reaction"]>

  export type ReactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    userId?: boolean
    createdAt?: boolean
    messageId?: boolean
    postId?: boolean
    commentId?: boolean
    fileId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | Reaction$messageArgs<ExtArgs>
    post?: boolean | Reaction$postArgs<ExtArgs>
    comment?: boolean | Reaction$commentArgs<ExtArgs>
    file?: boolean | Reaction$fileArgs<ExtArgs>
  }, ExtArgs["result"]["reaction"]>

  export type ReactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    userId?: boolean
    createdAt?: boolean
    messageId?: boolean
    postId?: boolean
    commentId?: boolean
    fileId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | Reaction$messageArgs<ExtArgs>
    post?: boolean | Reaction$postArgs<ExtArgs>
    comment?: boolean | Reaction$commentArgs<ExtArgs>
    file?: boolean | Reaction$fileArgs<ExtArgs>
  }, ExtArgs["result"]["reaction"]>

  export type ReactionSelectScalar = {
    id?: boolean
    type?: boolean
    userId?: boolean
    createdAt?: boolean
    messageId?: boolean
    postId?: boolean
    commentId?: boolean
    fileId?: boolean
  }

  export type ReactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "userId" | "createdAt" | "messageId" | "postId" | "commentId" | "fileId", ExtArgs["result"]["reaction"]>
  export type ReactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | Reaction$messageArgs<ExtArgs>
    post?: boolean | Reaction$postArgs<ExtArgs>
    comment?: boolean | Reaction$commentArgs<ExtArgs>
    file?: boolean | Reaction$fileArgs<ExtArgs>
  }
  export type ReactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | Reaction$messageArgs<ExtArgs>
    post?: boolean | Reaction$postArgs<ExtArgs>
    comment?: boolean | Reaction$commentArgs<ExtArgs>
    file?: boolean | Reaction$fileArgs<ExtArgs>
  }
  export type ReactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | Reaction$messageArgs<ExtArgs>
    post?: boolean | Reaction$postArgs<ExtArgs>
    comment?: boolean | Reaction$commentArgs<ExtArgs>
    file?: boolean | Reaction$fileArgs<ExtArgs>
  }

  export type $ReactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      message: Prisma.$MessagePayload<ExtArgs> | null
      post: Prisma.$DiscussionPostPayload<ExtArgs> | null
      comment: Prisma.$CommentPayload<ExtArgs> | null
      file: Prisma.$FilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      userId: string
      createdAt: Date
      messageId: string | null
      postId: string | null
      commentId: string | null
      fileId: string | null
    }, ExtArgs["result"]["reaction"]>
    composites: {}
  }

  type ReactionGetPayload<S extends boolean | null | undefined | ReactionDefaultArgs> = $Result.GetResult<Prisma.$ReactionPayload, S>

  type ReactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReactionCountAggregateInputType | true
    }

  export interface ReactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reaction'], meta: { name: 'Reaction' } }
    /**
     * Find zero or one Reaction that matches the filter.
     * @param {ReactionFindUniqueArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReactionFindUniqueArgs>(args: SelectSubset<T, ReactionFindUniqueArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReactionFindUniqueOrThrowArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReactionFindUniqueOrThrowArgs>(args: SelectSubset<T, ReactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindFirstArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReactionFindFirstArgs>(args?: SelectSubset<T, ReactionFindFirstArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindFirstOrThrowArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReactionFindFirstOrThrowArgs>(args?: SelectSubset<T, ReactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reactions
     * const reactions = await prisma.reaction.findMany()
     * 
     * // Get first 10 Reactions
     * const reactions = await prisma.reaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reactionWithIdOnly = await prisma.reaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReactionFindManyArgs>(args?: SelectSubset<T, ReactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reaction.
     * @param {ReactionCreateArgs} args - Arguments to create a Reaction.
     * @example
     * // Create one Reaction
     * const Reaction = await prisma.reaction.create({
     *   data: {
     *     // ... data to create a Reaction
     *   }
     * })
     * 
     */
    create<T extends ReactionCreateArgs>(args: SelectSubset<T, ReactionCreateArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reactions.
     * @param {ReactionCreateManyArgs} args - Arguments to create many Reactions.
     * @example
     * // Create many Reactions
     * const reaction = await prisma.reaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReactionCreateManyArgs>(args?: SelectSubset<T, ReactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reactions and returns the data saved in the database.
     * @param {ReactionCreateManyAndReturnArgs} args - Arguments to create many Reactions.
     * @example
     * // Create many Reactions
     * const reaction = await prisma.reaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reactions and only return the `id`
     * const reactionWithIdOnly = await prisma.reaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReactionCreateManyAndReturnArgs>(args?: SelectSubset<T, ReactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Reaction.
     * @param {ReactionDeleteArgs} args - Arguments to delete one Reaction.
     * @example
     * // Delete one Reaction
     * const Reaction = await prisma.reaction.delete({
     *   where: {
     *     // ... filter to delete one Reaction
     *   }
     * })
     * 
     */
    delete<T extends ReactionDeleteArgs>(args: SelectSubset<T, ReactionDeleteArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reaction.
     * @param {ReactionUpdateArgs} args - Arguments to update one Reaction.
     * @example
     * // Update one Reaction
     * const reaction = await prisma.reaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReactionUpdateArgs>(args: SelectSubset<T, ReactionUpdateArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reactions.
     * @param {ReactionDeleteManyArgs} args - Arguments to filter Reactions to delete.
     * @example
     * // Delete a few Reactions
     * const { count } = await prisma.reaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReactionDeleteManyArgs>(args?: SelectSubset<T, ReactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reactions
     * const reaction = await prisma.reaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReactionUpdateManyArgs>(args: SelectSubset<T, ReactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reactions and returns the data updated in the database.
     * @param {ReactionUpdateManyAndReturnArgs} args - Arguments to update many Reactions.
     * @example
     * // Update many Reactions
     * const reaction = await prisma.reaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reactions and only return the `id`
     * const reactionWithIdOnly = await prisma.reaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReactionUpdateManyAndReturnArgs>(args: SelectSubset<T, ReactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Reaction.
     * @param {ReactionUpsertArgs} args - Arguments to update or create a Reaction.
     * @example
     * // Update or create a Reaction
     * const reaction = await prisma.reaction.upsert({
     *   create: {
     *     // ... data to create a Reaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reaction we want to update
     *   }
     * })
     */
    upsert<T extends ReactionUpsertArgs>(args: SelectSubset<T, ReactionUpsertArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionCountArgs} args - Arguments to filter Reactions to count.
     * @example
     * // Count the number of Reactions
     * const count = await prisma.reaction.count({
     *   where: {
     *     // ... the filter for the Reactions we want to count
     *   }
     * })
    **/
    count<T extends ReactionCountArgs>(
      args?: Subset<T, ReactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReactionAggregateArgs>(args: Subset<T, ReactionAggregateArgs>): Prisma.PrismaPromise<GetReactionAggregateType<T>>

    /**
     * Group by Reaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReactionGroupByArgs['orderBy'] }
        : { orderBy?: ReactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reaction model
   */
  readonly fields: ReactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    message<T extends Reaction$messageArgs<ExtArgs> = {}>(args?: Subset<T, Reaction$messageArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    post<T extends Reaction$postArgs<ExtArgs> = {}>(args?: Subset<T, Reaction$postArgs<ExtArgs>>): Prisma__DiscussionPostClient<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    comment<T extends Reaction$commentArgs<ExtArgs> = {}>(args?: Subset<T, Reaction$commentArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    file<T extends Reaction$fileArgs<ExtArgs> = {}>(args?: Subset<T, Reaction$fileArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reaction model
   */
  interface ReactionFieldRefs {
    readonly id: FieldRef<"Reaction", 'String'>
    readonly type: FieldRef<"Reaction", 'String'>
    readonly userId: FieldRef<"Reaction", 'String'>
    readonly createdAt: FieldRef<"Reaction", 'DateTime'>
    readonly messageId: FieldRef<"Reaction", 'String'>
    readonly postId: FieldRef<"Reaction", 'String'>
    readonly commentId: FieldRef<"Reaction", 'String'>
    readonly fileId: FieldRef<"Reaction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Reaction findUnique
   */
  export type ReactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter, which Reaction to fetch.
     */
    where: ReactionWhereUniqueInput
  }

  /**
   * Reaction findUniqueOrThrow
   */
  export type ReactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter, which Reaction to fetch.
     */
    where: ReactionWhereUniqueInput
  }

  /**
   * Reaction findFirst
   */
  export type ReactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter, which Reaction to fetch.
     */
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     */
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reactions.
     */
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reactions.
     */
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * Reaction findFirstOrThrow
   */
  export type ReactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter, which Reaction to fetch.
     */
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     */
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reactions.
     */
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reactions.
     */
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * Reaction findMany
   */
  export type ReactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter, which Reactions to fetch.
     */
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     */
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reactions.
     */
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     */
    skip?: number
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * Reaction create
   */
  export type ReactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Reaction.
     */
    data: XOR<ReactionCreateInput, ReactionUncheckedCreateInput>
  }

  /**
   * Reaction createMany
   */
  export type ReactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reactions.
     */
    data: ReactionCreateManyInput | ReactionCreateManyInput[]
  }

  /**
   * Reaction createManyAndReturn
   */
  export type ReactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * The data used to create many Reactions.
     */
    data: ReactionCreateManyInput | ReactionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reaction update
   */
  export type ReactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Reaction.
     */
    data: XOR<ReactionUpdateInput, ReactionUncheckedUpdateInput>
    /**
     * Choose, which Reaction to update.
     */
    where: ReactionWhereUniqueInput
  }

  /**
   * Reaction updateMany
   */
  export type ReactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reactions.
     */
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyInput>
    /**
     * Filter which Reactions to update
     */
    where?: ReactionWhereInput
    /**
     * Limit how many Reactions to update.
     */
    limit?: number
  }

  /**
   * Reaction updateManyAndReturn
   */
  export type ReactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * The data used to update Reactions.
     */
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyInput>
    /**
     * Filter which Reactions to update
     */
    where?: ReactionWhereInput
    /**
     * Limit how many Reactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reaction upsert
   */
  export type ReactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Reaction to update in case it exists.
     */
    where: ReactionWhereUniqueInput
    /**
     * In case the Reaction found by the `where` argument doesn't exist, create a new Reaction with this data.
     */
    create: XOR<ReactionCreateInput, ReactionUncheckedCreateInput>
    /**
     * In case the Reaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReactionUpdateInput, ReactionUncheckedUpdateInput>
  }

  /**
   * Reaction delete
   */
  export type ReactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter which Reaction to delete.
     */
    where: ReactionWhereUniqueInput
  }

  /**
   * Reaction deleteMany
   */
  export type ReactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reactions to delete
     */
    where?: ReactionWhereInput
    /**
     * Limit how many Reactions to delete.
     */
    limit?: number
  }

  /**
   * Reaction.message
   */
  export type Reaction$messageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
  }

  /**
   * Reaction.post
   */
  export type Reaction$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    where?: DiscussionPostWhereInput
  }

  /**
   * Reaction.comment
   */
  export type Reaction$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
  }

  /**
   * Reaction.file
   */
  export type Reaction$fileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * Reaction without action
   */
  export type ReactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    size: number | null
  }

  export type FileSumAggregateOutputType = {
    size: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    filename: string | null
    originalName: string | null
    mimeType: string | null
    size: number | null
    path: string | null
    isEncrypted: boolean | null
    encryptionKeyId: string | null
    encryptionIv: string | null
    checksum: string | null
    uploaderId: string | null
    groupId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isArchived: boolean | null
    thumbnailPath: string | null
    metadata: string | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    filename: string | null
    originalName: string | null
    mimeType: string | null
    size: number | null
    path: string | null
    isEncrypted: boolean | null
    encryptionKeyId: string | null
    encryptionIv: string | null
    checksum: string | null
    uploaderId: string | null
    groupId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isArchived: boolean | null
    thumbnailPath: string | null
    metadata: string | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    filename: number
    originalName: number
    mimeType: number
    size: number
    path: number
    isEncrypted: number
    encryptionKeyId: number
    encryptionIv: number
    checksum: number
    uploaderId: number
    groupId: number
    createdAt: number
    updatedAt: number
    isArchived: number
    thumbnailPath: number
    metadata: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    size?: true
  }

  export type FileSumAggregateInputType = {
    size?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    size?: true
    path?: true
    isEncrypted?: true
    encryptionKeyId?: true
    encryptionIv?: true
    checksum?: true
    uploaderId?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
    isArchived?: true
    thumbnailPath?: true
    metadata?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    size?: true
    path?: true
    isEncrypted?: true
    encryptionKeyId?: true
    encryptionIv?: true
    checksum?: true
    uploaderId?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
    isArchived?: true
    thumbnailPath?: true
    metadata?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    size?: true
    path?: true
    isEncrypted?: true
    encryptionKeyId?: true
    encryptionIv?: true
    checksum?: true
    uploaderId?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
    isArchived?: true
    thumbnailPath?: true
    metadata?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted: boolean
    encryptionKeyId: string | null
    encryptionIv: string | null
    checksum: string | null
    uploaderId: string
    groupId: string | null
    createdAt: Date
    updatedAt: Date
    isArchived: boolean
    thumbnailPath: string | null
    metadata: string | null
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    size?: boolean
    path?: boolean
    isEncrypted?: boolean
    encryptionKeyId?: boolean
    encryptionIv?: boolean
    checksum?: boolean
    uploaderId?: boolean
    groupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isArchived?: boolean
    thumbnailPath?: boolean
    metadata?: boolean
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | File$groupArgs<ExtArgs>
    comments?: boolean | File$commentsArgs<ExtArgs>
    reactions?: boolean | File$reactionsArgs<ExtArgs>
    messages?: boolean | File$messagesArgs<ExtArgs>
    posts?: boolean | File$postsArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    size?: boolean
    path?: boolean
    isEncrypted?: boolean
    encryptionKeyId?: boolean
    encryptionIv?: boolean
    checksum?: boolean
    uploaderId?: boolean
    groupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isArchived?: boolean
    thumbnailPath?: boolean
    metadata?: boolean
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | File$groupArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    size?: boolean
    path?: boolean
    isEncrypted?: boolean
    encryptionKeyId?: boolean
    encryptionIv?: boolean
    checksum?: boolean
    uploaderId?: boolean
    groupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isArchived?: boolean
    thumbnailPath?: boolean
    metadata?: boolean
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | File$groupArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    size?: boolean
    path?: boolean
    isEncrypted?: boolean
    encryptionKeyId?: boolean
    encryptionIv?: boolean
    checksum?: boolean
    uploaderId?: boolean
    groupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isArchived?: boolean
    thumbnailPath?: boolean
    metadata?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "filename" | "originalName" | "mimeType" | "size" | "path" | "isEncrypted" | "encryptionKeyId" | "encryptionIv" | "checksum" | "uploaderId" | "groupId" | "createdAt" | "updatedAt" | "isArchived" | "thumbnailPath" | "metadata", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | File$groupArgs<ExtArgs>
    comments?: boolean | File$commentsArgs<ExtArgs>
    reactions?: boolean | File$reactionsArgs<ExtArgs>
    messages?: boolean | File$messagesArgs<ExtArgs>
    posts?: boolean | File$postsArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | File$groupArgs<ExtArgs>
  }
  export type FileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | File$groupArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      uploader: Prisma.$UserPayload<ExtArgs>
      group: Prisma.$GroupPayload<ExtArgs> | null
      comments: Prisma.$CommentPayload<ExtArgs>[]
      reactions: Prisma.$ReactionPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      posts: Prisma.$DiscussionPostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filename: string
      originalName: string
      mimeType: string
      size: number
      path: string
      isEncrypted: boolean
      encryptionKeyId: string | null
      encryptionIv: string | null
      checksum: string | null
      uploaderId: string
      groupId: string | null
      createdAt: Date
      updatedAt: Date
      isArchived: boolean
      thumbnailPath: string | null
      metadata: string | null
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    uploader<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    group<T extends File$groupArgs<ExtArgs> = {}>(args?: Subset<T, File$groupArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    comments<T extends File$commentsArgs<ExtArgs> = {}>(args?: Subset<T, File$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reactions<T extends File$reactionsArgs<ExtArgs> = {}>(args?: Subset<T, File$reactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends File$messagesArgs<ExtArgs> = {}>(args?: Subset<T, File$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    posts<T extends File$postsArgs<ExtArgs> = {}>(args?: Subset<T, File$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly filename: FieldRef<"File", 'String'>
    readonly originalName: FieldRef<"File", 'String'>
    readonly mimeType: FieldRef<"File", 'String'>
    readonly size: FieldRef<"File", 'Int'>
    readonly path: FieldRef<"File", 'String'>
    readonly isEncrypted: FieldRef<"File", 'Boolean'>
    readonly encryptionKeyId: FieldRef<"File", 'String'>
    readonly encryptionIv: FieldRef<"File", 'String'>
    readonly checksum: FieldRef<"File", 'String'>
    readonly uploaderId: FieldRef<"File", 'String'>
    readonly groupId: FieldRef<"File", 'String'>
    readonly createdAt: FieldRef<"File", 'DateTime'>
    readonly updatedAt: FieldRef<"File", 'DateTime'>
    readonly isArchived: FieldRef<"File", 'Boolean'>
    readonly thumbnailPath: FieldRef<"File", 'String'>
    readonly metadata: FieldRef<"File", 'String'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File updateManyAndReturn
   */
  export type FileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File.group
   */
  export type File$groupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Group
     */
    omit?: GroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
  }

  /**
   * File.comments
   */
  export type File$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * File.reactions
   */
  export type File$reactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    where?: ReactionWhereInput
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    cursor?: ReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * File.messages
   */
  export type File$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * File.posts
   */
  export type File$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionPost
     */
    select?: DiscussionPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionPost
     */
    omit?: DiscussionPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionPostInclude<ExtArgs> | null
    where?: DiscussionPostWhereInput
    orderBy?: DiscussionPostOrderByWithRelationInput | DiscussionPostOrderByWithRelationInput[]
    cursor?: DiscussionPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionPostScalarFieldEnum | DiscussionPostScalarFieldEnum[]
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model PinnedItem
   */

  export type AggregatePinnedItem = {
    _count: PinnedItemCountAggregateOutputType | null
    _min: PinnedItemMinAggregateOutputType | null
    _max: PinnedItemMaxAggregateOutputType | null
  }

  export type PinnedItemMinAggregateOutputType = {
    id: string | null
    userId: string | null
    groupId: string | null
    itemType: string | null
    itemId: string | null
    pinnedAt: Date | null
    note: string | null
  }

  export type PinnedItemMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    groupId: string | null
    itemType: string | null
    itemId: string | null
    pinnedAt: Date | null
    note: string | null
  }

  export type PinnedItemCountAggregateOutputType = {
    id: number
    userId: number
    groupId: number
    itemType: number
    itemId: number
    pinnedAt: number
    note: number
    _all: number
  }


  export type PinnedItemMinAggregateInputType = {
    id?: true
    userId?: true
    groupId?: true
    itemType?: true
    itemId?: true
    pinnedAt?: true
    note?: true
  }

  export type PinnedItemMaxAggregateInputType = {
    id?: true
    userId?: true
    groupId?: true
    itemType?: true
    itemId?: true
    pinnedAt?: true
    note?: true
  }

  export type PinnedItemCountAggregateInputType = {
    id?: true
    userId?: true
    groupId?: true
    itemType?: true
    itemId?: true
    pinnedAt?: true
    note?: true
    _all?: true
  }

  export type PinnedItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PinnedItem to aggregate.
     */
    where?: PinnedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PinnedItems to fetch.
     */
    orderBy?: PinnedItemOrderByWithRelationInput | PinnedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PinnedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PinnedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PinnedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PinnedItems
    **/
    _count?: true | PinnedItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PinnedItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PinnedItemMaxAggregateInputType
  }

  export type GetPinnedItemAggregateType<T extends PinnedItemAggregateArgs> = {
        [P in keyof T & keyof AggregatePinnedItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePinnedItem[P]>
      : GetScalarType<T[P], AggregatePinnedItem[P]>
  }




  export type PinnedItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PinnedItemWhereInput
    orderBy?: PinnedItemOrderByWithAggregationInput | PinnedItemOrderByWithAggregationInput[]
    by: PinnedItemScalarFieldEnum[] | PinnedItemScalarFieldEnum
    having?: PinnedItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PinnedItemCountAggregateInputType | true
    _min?: PinnedItemMinAggregateInputType
    _max?: PinnedItemMaxAggregateInputType
  }

  export type PinnedItemGroupByOutputType = {
    id: string
    userId: string
    groupId: string
    itemType: string
    itemId: string
    pinnedAt: Date
    note: string | null
    _count: PinnedItemCountAggregateOutputType | null
    _min: PinnedItemMinAggregateOutputType | null
    _max: PinnedItemMaxAggregateOutputType | null
  }

  type GetPinnedItemGroupByPayload<T extends PinnedItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PinnedItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PinnedItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PinnedItemGroupByOutputType[P]>
            : GetScalarType<T[P], PinnedItemGroupByOutputType[P]>
        }
      >
    >


  export type PinnedItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    groupId?: boolean
    itemType?: boolean
    itemId?: boolean
    pinnedAt?: boolean
    note?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pinnedItem"]>

  export type PinnedItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    groupId?: boolean
    itemType?: boolean
    itemId?: boolean
    pinnedAt?: boolean
    note?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pinnedItem"]>

  export type PinnedItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    groupId?: boolean
    itemType?: boolean
    itemId?: boolean
    pinnedAt?: boolean
    note?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pinnedItem"]>

  export type PinnedItemSelectScalar = {
    id?: boolean
    userId?: boolean
    groupId?: boolean
    itemType?: boolean
    itemId?: boolean
    pinnedAt?: boolean
    note?: boolean
  }

  export type PinnedItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "groupId" | "itemType" | "itemId" | "pinnedAt" | "note", ExtArgs["result"]["pinnedItem"]>
  export type PinnedItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }
  export type PinnedItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }
  export type PinnedItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $PinnedItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PinnedItem"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      group: Prisma.$GroupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      groupId: string
      itemType: string
      itemId: string
      pinnedAt: Date
      note: string | null
    }, ExtArgs["result"]["pinnedItem"]>
    composites: {}
  }

  type PinnedItemGetPayload<S extends boolean | null | undefined | PinnedItemDefaultArgs> = $Result.GetResult<Prisma.$PinnedItemPayload, S>

  type PinnedItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PinnedItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PinnedItemCountAggregateInputType | true
    }

  export interface PinnedItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PinnedItem'], meta: { name: 'PinnedItem' } }
    /**
     * Find zero or one PinnedItem that matches the filter.
     * @param {PinnedItemFindUniqueArgs} args - Arguments to find a PinnedItem
     * @example
     * // Get one PinnedItem
     * const pinnedItem = await prisma.pinnedItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PinnedItemFindUniqueArgs>(args: SelectSubset<T, PinnedItemFindUniqueArgs<ExtArgs>>): Prisma__PinnedItemClient<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PinnedItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PinnedItemFindUniqueOrThrowArgs} args - Arguments to find a PinnedItem
     * @example
     * // Get one PinnedItem
     * const pinnedItem = await prisma.pinnedItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PinnedItemFindUniqueOrThrowArgs>(args: SelectSubset<T, PinnedItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PinnedItemClient<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PinnedItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PinnedItemFindFirstArgs} args - Arguments to find a PinnedItem
     * @example
     * // Get one PinnedItem
     * const pinnedItem = await prisma.pinnedItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PinnedItemFindFirstArgs>(args?: SelectSubset<T, PinnedItemFindFirstArgs<ExtArgs>>): Prisma__PinnedItemClient<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PinnedItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PinnedItemFindFirstOrThrowArgs} args - Arguments to find a PinnedItem
     * @example
     * // Get one PinnedItem
     * const pinnedItem = await prisma.pinnedItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PinnedItemFindFirstOrThrowArgs>(args?: SelectSubset<T, PinnedItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__PinnedItemClient<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PinnedItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PinnedItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PinnedItems
     * const pinnedItems = await prisma.pinnedItem.findMany()
     * 
     * // Get first 10 PinnedItems
     * const pinnedItems = await prisma.pinnedItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pinnedItemWithIdOnly = await prisma.pinnedItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PinnedItemFindManyArgs>(args?: SelectSubset<T, PinnedItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PinnedItem.
     * @param {PinnedItemCreateArgs} args - Arguments to create a PinnedItem.
     * @example
     * // Create one PinnedItem
     * const PinnedItem = await prisma.pinnedItem.create({
     *   data: {
     *     // ... data to create a PinnedItem
     *   }
     * })
     * 
     */
    create<T extends PinnedItemCreateArgs>(args: SelectSubset<T, PinnedItemCreateArgs<ExtArgs>>): Prisma__PinnedItemClient<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PinnedItems.
     * @param {PinnedItemCreateManyArgs} args - Arguments to create many PinnedItems.
     * @example
     * // Create many PinnedItems
     * const pinnedItem = await prisma.pinnedItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PinnedItemCreateManyArgs>(args?: SelectSubset<T, PinnedItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PinnedItems and returns the data saved in the database.
     * @param {PinnedItemCreateManyAndReturnArgs} args - Arguments to create many PinnedItems.
     * @example
     * // Create many PinnedItems
     * const pinnedItem = await prisma.pinnedItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PinnedItems and only return the `id`
     * const pinnedItemWithIdOnly = await prisma.pinnedItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PinnedItemCreateManyAndReturnArgs>(args?: SelectSubset<T, PinnedItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PinnedItem.
     * @param {PinnedItemDeleteArgs} args - Arguments to delete one PinnedItem.
     * @example
     * // Delete one PinnedItem
     * const PinnedItem = await prisma.pinnedItem.delete({
     *   where: {
     *     // ... filter to delete one PinnedItem
     *   }
     * })
     * 
     */
    delete<T extends PinnedItemDeleteArgs>(args: SelectSubset<T, PinnedItemDeleteArgs<ExtArgs>>): Prisma__PinnedItemClient<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PinnedItem.
     * @param {PinnedItemUpdateArgs} args - Arguments to update one PinnedItem.
     * @example
     * // Update one PinnedItem
     * const pinnedItem = await prisma.pinnedItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PinnedItemUpdateArgs>(args: SelectSubset<T, PinnedItemUpdateArgs<ExtArgs>>): Prisma__PinnedItemClient<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PinnedItems.
     * @param {PinnedItemDeleteManyArgs} args - Arguments to filter PinnedItems to delete.
     * @example
     * // Delete a few PinnedItems
     * const { count } = await prisma.pinnedItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PinnedItemDeleteManyArgs>(args?: SelectSubset<T, PinnedItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PinnedItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PinnedItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PinnedItems
     * const pinnedItem = await prisma.pinnedItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PinnedItemUpdateManyArgs>(args: SelectSubset<T, PinnedItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PinnedItems and returns the data updated in the database.
     * @param {PinnedItemUpdateManyAndReturnArgs} args - Arguments to update many PinnedItems.
     * @example
     * // Update many PinnedItems
     * const pinnedItem = await prisma.pinnedItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PinnedItems and only return the `id`
     * const pinnedItemWithIdOnly = await prisma.pinnedItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PinnedItemUpdateManyAndReturnArgs>(args: SelectSubset<T, PinnedItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PinnedItem.
     * @param {PinnedItemUpsertArgs} args - Arguments to update or create a PinnedItem.
     * @example
     * // Update or create a PinnedItem
     * const pinnedItem = await prisma.pinnedItem.upsert({
     *   create: {
     *     // ... data to create a PinnedItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PinnedItem we want to update
     *   }
     * })
     */
    upsert<T extends PinnedItemUpsertArgs>(args: SelectSubset<T, PinnedItemUpsertArgs<ExtArgs>>): Prisma__PinnedItemClient<$Result.GetResult<Prisma.$PinnedItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PinnedItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PinnedItemCountArgs} args - Arguments to filter PinnedItems to count.
     * @example
     * // Count the number of PinnedItems
     * const count = await prisma.pinnedItem.count({
     *   where: {
     *     // ... the filter for the PinnedItems we want to count
     *   }
     * })
    **/
    count<T extends PinnedItemCountArgs>(
      args?: Subset<T, PinnedItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PinnedItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PinnedItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PinnedItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PinnedItemAggregateArgs>(args: Subset<T, PinnedItemAggregateArgs>): Prisma.PrismaPromise<GetPinnedItemAggregateType<T>>

    /**
     * Group by PinnedItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PinnedItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PinnedItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PinnedItemGroupByArgs['orderBy'] }
        : { orderBy?: PinnedItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PinnedItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPinnedItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PinnedItem model
   */
  readonly fields: PinnedItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PinnedItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PinnedItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    group<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PinnedItem model
   */
  interface PinnedItemFieldRefs {
    readonly id: FieldRef<"PinnedItem", 'String'>
    readonly userId: FieldRef<"PinnedItem", 'String'>
    readonly groupId: FieldRef<"PinnedItem", 'String'>
    readonly itemType: FieldRef<"PinnedItem", 'String'>
    readonly itemId: FieldRef<"PinnedItem", 'String'>
    readonly pinnedAt: FieldRef<"PinnedItem", 'DateTime'>
    readonly note: FieldRef<"PinnedItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PinnedItem findUnique
   */
  export type PinnedItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
    /**
     * Filter, which PinnedItem to fetch.
     */
    where: PinnedItemWhereUniqueInput
  }

  /**
   * PinnedItem findUniqueOrThrow
   */
  export type PinnedItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
    /**
     * Filter, which PinnedItem to fetch.
     */
    where: PinnedItemWhereUniqueInput
  }

  /**
   * PinnedItem findFirst
   */
  export type PinnedItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
    /**
     * Filter, which PinnedItem to fetch.
     */
    where?: PinnedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PinnedItems to fetch.
     */
    orderBy?: PinnedItemOrderByWithRelationInput | PinnedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PinnedItems.
     */
    cursor?: PinnedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PinnedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PinnedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PinnedItems.
     */
    distinct?: PinnedItemScalarFieldEnum | PinnedItemScalarFieldEnum[]
  }

  /**
   * PinnedItem findFirstOrThrow
   */
  export type PinnedItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
    /**
     * Filter, which PinnedItem to fetch.
     */
    where?: PinnedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PinnedItems to fetch.
     */
    orderBy?: PinnedItemOrderByWithRelationInput | PinnedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PinnedItems.
     */
    cursor?: PinnedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PinnedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PinnedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PinnedItems.
     */
    distinct?: PinnedItemScalarFieldEnum | PinnedItemScalarFieldEnum[]
  }

  /**
   * PinnedItem findMany
   */
  export type PinnedItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
    /**
     * Filter, which PinnedItems to fetch.
     */
    where?: PinnedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PinnedItems to fetch.
     */
    orderBy?: PinnedItemOrderByWithRelationInput | PinnedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PinnedItems.
     */
    cursor?: PinnedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PinnedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PinnedItems.
     */
    skip?: number
    distinct?: PinnedItemScalarFieldEnum | PinnedItemScalarFieldEnum[]
  }

  /**
   * PinnedItem create
   */
  export type PinnedItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
    /**
     * The data needed to create a PinnedItem.
     */
    data: XOR<PinnedItemCreateInput, PinnedItemUncheckedCreateInput>
  }

  /**
   * PinnedItem createMany
   */
  export type PinnedItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PinnedItems.
     */
    data: PinnedItemCreateManyInput | PinnedItemCreateManyInput[]
  }

  /**
   * PinnedItem createManyAndReturn
   */
  export type PinnedItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * The data used to create many PinnedItems.
     */
    data: PinnedItemCreateManyInput | PinnedItemCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PinnedItem update
   */
  export type PinnedItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
    /**
     * The data needed to update a PinnedItem.
     */
    data: XOR<PinnedItemUpdateInput, PinnedItemUncheckedUpdateInput>
    /**
     * Choose, which PinnedItem to update.
     */
    where: PinnedItemWhereUniqueInput
  }

  /**
   * PinnedItem updateMany
   */
  export type PinnedItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PinnedItems.
     */
    data: XOR<PinnedItemUpdateManyMutationInput, PinnedItemUncheckedUpdateManyInput>
    /**
     * Filter which PinnedItems to update
     */
    where?: PinnedItemWhereInput
    /**
     * Limit how many PinnedItems to update.
     */
    limit?: number
  }

  /**
   * PinnedItem updateManyAndReturn
   */
  export type PinnedItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * The data used to update PinnedItems.
     */
    data: XOR<PinnedItemUpdateManyMutationInput, PinnedItemUncheckedUpdateManyInput>
    /**
     * Filter which PinnedItems to update
     */
    where?: PinnedItemWhereInput
    /**
     * Limit how many PinnedItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PinnedItem upsert
   */
  export type PinnedItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
    /**
     * The filter to search for the PinnedItem to update in case it exists.
     */
    where: PinnedItemWhereUniqueInput
    /**
     * In case the PinnedItem found by the `where` argument doesn't exist, create a new PinnedItem with this data.
     */
    create: XOR<PinnedItemCreateInput, PinnedItemUncheckedCreateInput>
    /**
     * In case the PinnedItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PinnedItemUpdateInput, PinnedItemUncheckedUpdateInput>
  }

  /**
   * PinnedItem delete
   */
  export type PinnedItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
    /**
     * Filter which PinnedItem to delete.
     */
    where: PinnedItemWhereUniqueInput
  }

  /**
   * PinnedItem deleteMany
   */
  export type PinnedItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PinnedItems to delete
     */
    where?: PinnedItemWhereInput
    /**
     * Limit how many PinnedItems to delete.
     */
    limit?: number
  }

  /**
   * PinnedItem without action
   */
  export type PinnedItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PinnedItem
     */
    select?: PinnedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PinnedItem
     */
    omit?: PinnedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PinnedItemInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: string | null
    priority: string | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    creatorId: string | null
    groupId: string | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: string | null
    priority: string | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    creatorId: string | null
    groupId: string | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    dueDate: number
    createdAt: number
    updatedAt: number
    creatorId: number
    groupId: number
    _all: number
  }


  export type TaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    creatorId?: true
    groupId?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    creatorId?: true
    groupId?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    creatorId?: true
    groupId?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    title: string
    description: string | null
    status: string
    priority: string
    dueDate: Date | null
    createdAt: Date
    updatedAt: Date
    creatorId: string
    groupId: string
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creatorId?: boolean
    groupId?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
    assignments?: boolean | Task$assignmentsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creatorId?: boolean
    groupId?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creatorId?: boolean
    groupId?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creatorId?: boolean
    groupId?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "status" | "priority" | "dueDate" | "createdAt" | "updatedAt" | "creatorId" | "groupId", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
    assignments?: boolean | Task$assignmentsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      group: Prisma.$GroupPayload<ExtArgs>
      assignments: Prisma.$TaskAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      status: string
      priority: string
      dueDate: Date | null
      createdAt: Date
      updatedAt: Date
      creatorId: string
      groupId: string
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    group<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignments<T extends Task$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Task$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'String'>
    readonly priority: FieldRef<"Task", 'String'>
    readonly dueDate: FieldRef<"Task", 'DateTime'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
    readonly creatorId: FieldRef<"Task", 'String'>
    readonly groupId: FieldRef<"Task", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task.assignments
   */
  export type Task$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    where?: TaskAssignmentWhereInput
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    cursor?: TaskAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskAssignmentScalarFieldEnum | TaskAssignmentScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model TaskAssignment
   */

  export type AggregateTaskAssignment = {
    _count: TaskAssignmentCountAggregateOutputType | null
    _min: TaskAssignmentMinAggregateOutputType | null
    _max: TaskAssignmentMaxAggregateOutputType | null
  }

  export type TaskAssignmentMinAggregateOutputType = {
    id: string | null
    taskId: string | null
    userId: string | null
    assignedAt: Date | null
  }

  export type TaskAssignmentMaxAggregateOutputType = {
    id: string | null
    taskId: string | null
    userId: string | null
    assignedAt: Date | null
  }

  export type TaskAssignmentCountAggregateOutputType = {
    id: number
    taskId: number
    userId: number
    assignedAt: number
    _all: number
  }


  export type TaskAssignmentMinAggregateInputType = {
    id?: true
    taskId?: true
    userId?: true
    assignedAt?: true
  }

  export type TaskAssignmentMaxAggregateInputType = {
    id?: true
    taskId?: true
    userId?: true
    assignedAt?: true
  }

  export type TaskAssignmentCountAggregateInputType = {
    id?: true
    taskId?: true
    userId?: true
    assignedAt?: true
    _all?: true
  }

  export type TaskAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskAssignment to aggregate.
     */
    where?: TaskAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskAssignments to fetch.
     */
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskAssignments
    **/
    _count?: true | TaskAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskAssignmentMaxAggregateInputType
  }

  export type GetTaskAssignmentAggregateType<T extends TaskAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskAssignment[P]>
      : GetScalarType<T[P], AggregateTaskAssignment[P]>
  }




  export type TaskAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskAssignmentWhereInput
    orderBy?: TaskAssignmentOrderByWithAggregationInput | TaskAssignmentOrderByWithAggregationInput[]
    by: TaskAssignmentScalarFieldEnum[] | TaskAssignmentScalarFieldEnum
    having?: TaskAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskAssignmentCountAggregateInputType | true
    _min?: TaskAssignmentMinAggregateInputType
    _max?: TaskAssignmentMaxAggregateInputType
  }

  export type TaskAssignmentGroupByOutputType = {
    id: string
    taskId: string
    userId: string
    assignedAt: Date
    _count: TaskAssignmentCountAggregateOutputType | null
    _min: TaskAssignmentMinAggregateOutputType | null
    _max: TaskAssignmentMaxAggregateOutputType | null
  }

  type GetTaskAssignmentGroupByPayload<T extends TaskAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], TaskAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type TaskAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    userId?: boolean
    assignedAt?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskAssignment"]>

  export type TaskAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    userId?: boolean
    assignedAt?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskAssignment"]>

  export type TaskAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    userId?: boolean
    assignedAt?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskAssignment"]>

  export type TaskAssignmentSelectScalar = {
    id?: boolean
    taskId?: boolean
    userId?: boolean
    assignedAt?: boolean
  }

  export type TaskAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "taskId" | "userId" | "assignedAt", ExtArgs["result"]["taskAssignment"]>
  export type TaskAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TaskAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TaskAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TaskAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaskAssignment"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      taskId: string
      userId: string
      assignedAt: Date
    }, ExtArgs["result"]["taskAssignment"]>
    composites: {}
  }

  type TaskAssignmentGetPayload<S extends boolean | null | undefined | TaskAssignmentDefaultArgs> = $Result.GetResult<Prisma.$TaskAssignmentPayload, S>

  type TaskAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskAssignmentCountAggregateInputType | true
    }

  export interface TaskAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskAssignment'], meta: { name: 'TaskAssignment' } }
    /**
     * Find zero or one TaskAssignment that matches the filter.
     * @param {TaskAssignmentFindUniqueArgs} args - Arguments to find a TaskAssignment
     * @example
     * // Get one TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskAssignmentFindUniqueArgs>(args: SelectSubset<T, TaskAssignmentFindUniqueArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TaskAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskAssignmentFindUniqueOrThrowArgs} args - Arguments to find a TaskAssignment
     * @example
     * // Get one TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentFindFirstArgs} args - Arguments to find a TaskAssignment
     * @example
     * // Get one TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskAssignmentFindFirstArgs>(args?: SelectSubset<T, TaskAssignmentFindFirstArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentFindFirstOrThrowArgs} args - Arguments to find a TaskAssignment
     * @example
     * // Get one TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TaskAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskAssignments
     * const taskAssignments = await prisma.taskAssignment.findMany()
     * 
     * // Get first 10 TaskAssignments
     * const taskAssignments = await prisma.taskAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskAssignmentWithIdOnly = await prisma.taskAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskAssignmentFindManyArgs>(args?: SelectSubset<T, TaskAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TaskAssignment.
     * @param {TaskAssignmentCreateArgs} args - Arguments to create a TaskAssignment.
     * @example
     * // Create one TaskAssignment
     * const TaskAssignment = await prisma.taskAssignment.create({
     *   data: {
     *     // ... data to create a TaskAssignment
     *   }
     * })
     * 
     */
    create<T extends TaskAssignmentCreateArgs>(args: SelectSubset<T, TaskAssignmentCreateArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TaskAssignments.
     * @param {TaskAssignmentCreateManyArgs} args - Arguments to create many TaskAssignments.
     * @example
     * // Create many TaskAssignments
     * const taskAssignment = await prisma.taskAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskAssignmentCreateManyArgs>(args?: SelectSubset<T, TaskAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaskAssignments and returns the data saved in the database.
     * @param {TaskAssignmentCreateManyAndReturnArgs} args - Arguments to create many TaskAssignments.
     * @example
     * // Create many TaskAssignments
     * const taskAssignment = await prisma.taskAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaskAssignments and only return the `id`
     * const taskAssignmentWithIdOnly = await prisma.taskAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TaskAssignment.
     * @param {TaskAssignmentDeleteArgs} args - Arguments to delete one TaskAssignment.
     * @example
     * // Delete one TaskAssignment
     * const TaskAssignment = await prisma.taskAssignment.delete({
     *   where: {
     *     // ... filter to delete one TaskAssignment
     *   }
     * })
     * 
     */
    delete<T extends TaskAssignmentDeleteArgs>(args: SelectSubset<T, TaskAssignmentDeleteArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TaskAssignment.
     * @param {TaskAssignmentUpdateArgs} args - Arguments to update one TaskAssignment.
     * @example
     * // Update one TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskAssignmentUpdateArgs>(args: SelectSubset<T, TaskAssignmentUpdateArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TaskAssignments.
     * @param {TaskAssignmentDeleteManyArgs} args - Arguments to filter TaskAssignments to delete.
     * @example
     * // Delete a few TaskAssignments
     * const { count } = await prisma.taskAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskAssignmentDeleteManyArgs>(args?: SelectSubset<T, TaskAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskAssignments
     * const taskAssignment = await prisma.taskAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskAssignmentUpdateManyArgs>(args: SelectSubset<T, TaskAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskAssignments and returns the data updated in the database.
     * @param {TaskAssignmentUpdateManyAndReturnArgs} args - Arguments to update many TaskAssignments.
     * @example
     * // Update many TaskAssignments
     * const taskAssignment = await prisma.taskAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TaskAssignments and only return the `id`
     * const taskAssignmentWithIdOnly = await prisma.taskAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TaskAssignment.
     * @param {TaskAssignmentUpsertArgs} args - Arguments to update or create a TaskAssignment.
     * @example
     * // Update or create a TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.upsert({
     *   create: {
     *     // ... data to create a TaskAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskAssignment we want to update
     *   }
     * })
     */
    upsert<T extends TaskAssignmentUpsertArgs>(args: SelectSubset<T, TaskAssignmentUpsertArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TaskAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentCountArgs} args - Arguments to filter TaskAssignments to count.
     * @example
     * // Count the number of TaskAssignments
     * const count = await prisma.taskAssignment.count({
     *   where: {
     *     // ... the filter for the TaskAssignments we want to count
     *   }
     * })
    **/
    count<T extends TaskAssignmentCountArgs>(
      args?: Subset<T, TaskAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAssignmentAggregateArgs>(args: Subset<T, TaskAssignmentAggregateArgs>): Prisma.PrismaPromise<GetTaskAssignmentAggregateType<T>>

    /**
     * Group by TaskAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: TaskAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaskAssignment model
   */
  readonly fields: TaskAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaskAssignment model
   */
  interface TaskAssignmentFieldRefs {
    readonly id: FieldRef<"TaskAssignment", 'String'>
    readonly taskId: FieldRef<"TaskAssignment", 'String'>
    readonly userId: FieldRef<"TaskAssignment", 'String'>
    readonly assignedAt: FieldRef<"TaskAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TaskAssignment findUnique
   */
  export type TaskAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TaskAssignment to fetch.
     */
    where: TaskAssignmentWhereUniqueInput
  }

  /**
   * TaskAssignment findUniqueOrThrow
   */
  export type TaskAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TaskAssignment to fetch.
     */
    where: TaskAssignmentWhereUniqueInput
  }

  /**
   * TaskAssignment findFirst
   */
  export type TaskAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TaskAssignment to fetch.
     */
    where?: TaskAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskAssignments to fetch.
     */
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskAssignments.
     */
    cursor?: TaskAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskAssignments.
     */
    distinct?: TaskAssignmentScalarFieldEnum | TaskAssignmentScalarFieldEnum[]
  }

  /**
   * TaskAssignment findFirstOrThrow
   */
  export type TaskAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TaskAssignment to fetch.
     */
    where?: TaskAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskAssignments to fetch.
     */
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskAssignments.
     */
    cursor?: TaskAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskAssignments.
     */
    distinct?: TaskAssignmentScalarFieldEnum | TaskAssignmentScalarFieldEnum[]
  }

  /**
   * TaskAssignment findMany
   */
  export type TaskAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TaskAssignments to fetch.
     */
    where?: TaskAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskAssignments to fetch.
     */
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskAssignments.
     */
    cursor?: TaskAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskAssignments.
     */
    skip?: number
    distinct?: TaskAssignmentScalarFieldEnum | TaskAssignmentScalarFieldEnum[]
  }

  /**
   * TaskAssignment create
   */
  export type TaskAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a TaskAssignment.
     */
    data: XOR<TaskAssignmentCreateInput, TaskAssignmentUncheckedCreateInput>
  }

  /**
   * TaskAssignment createMany
   */
  export type TaskAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaskAssignments.
     */
    data: TaskAssignmentCreateManyInput | TaskAssignmentCreateManyInput[]
  }

  /**
   * TaskAssignment createManyAndReturn
   */
  export type TaskAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many TaskAssignments.
     */
    data: TaskAssignmentCreateManyInput | TaskAssignmentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskAssignment update
   */
  export type TaskAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a TaskAssignment.
     */
    data: XOR<TaskAssignmentUpdateInput, TaskAssignmentUncheckedUpdateInput>
    /**
     * Choose, which TaskAssignment to update.
     */
    where: TaskAssignmentWhereUniqueInput
  }

  /**
   * TaskAssignment updateMany
   */
  export type TaskAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaskAssignments.
     */
    data: XOR<TaskAssignmentUpdateManyMutationInput, TaskAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which TaskAssignments to update
     */
    where?: TaskAssignmentWhereInput
    /**
     * Limit how many TaskAssignments to update.
     */
    limit?: number
  }

  /**
   * TaskAssignment updateManyAndReturn
   */
  export type TaskAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update TaskAssignments.
     */
    data: XOR<TaskAssignmentUpdateManyMutationInput, TaskAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which TaskAssignments to update
     */
    where?: TaskAssignmentWhereInput
    /**
     * Limit how many TaskAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskAssignment upsert
   */
  export type TaskAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the TaskAssignment to update in case it exists.
     */
    where: TaskAssignmentWhereUniqueInput
    /**
     * In case the TaskAssignment found by the `where` argument doesn't exist, create a new TaskAssignment with this data.
     */
    create: XOR<TaskAssignmentCreateInput, TaskAssignmentUncheckedCreateInput>
    /**
     * In case the TaskAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskAssignmentUpdateInput, TaskAssignmentUncheckedUpdateInput>
  }

  /**
   * TaskAssignment delete
   */
  export type TaskAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter which TaskAssignment to delete.
     */
    where: TaskAssignmentWhereUniqueInput
  }

  /**
   * TaskAssignment deleteMany
   */
  export type TaskAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskAssignments to delete
     */
    where?: TaskAssignmentWhereInput
    /**
     * Limit how many TaskAssignments to delete.
     */
    limit?: number
  }

  /**
   * TaskAssignment without action
   */
  export type TaskAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    hashedPassword: 'hashedPassword',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isVerified: 'isVerified',
    verificationToken: 'verificationToken',
    verificationExpires: 'verificationExpires',
    resetToken: 'resetToken',
    resetTokenExpires: 'resetTokenExpires',
    lastLogin: 'lastLogin',
    twoFactorEnabled: 'twoFactorEnabled',
    twoFactorSecret: 'twoFactorSecret',
    lastPasswordChange: 'lastPasswordChange',
    previousPasswordHashes: 'previousPasswordHashes',
    displayName: 'displayName',
    avatarUrl: 'avatarUrl',
    bio: 'bio'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    deviceInfo: 'deviceInfo',
    ipAddress: 'ipAddress',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    isRevoked: 'isRevoked'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ownerId: 'ownerId',
    isPrivate: 'isPrivate',
    avatarUrl: 'avatarUrl'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const GroupMemberScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    groupId: 'groupId',
    role: 'role',
    joinedAt: 'joinedAt',
    invitedBy: 'invitedBy',
    notifyOnNewMessage: 'notifyOnNewMessage',
    notifyOnMention: 'notifyOnMention',
    notifyOnNewDiscussion: 'notifyOnNewDiscussion'
  };

  export type GroupMemberScalarFieldEnum = (typeof GroupMemberScalarFieldEnum)[keyof typeof GroupMemberScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    groupId: 'groupId',
    encryptedContent: 'encryptedContent',
    iv: 'iv',
    keyId: 'keyId',
    metaData: 'metaData',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    replyToId: 'replyToId',
    ephemeralExpiry: 'ephemeralExpiry',
    isEphemeral: 'isEphemeral'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const MessageReadScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    userId: 'userId',
    readAt: 'readAt'
  };

  export type MessageReadScalarFieldEnum = (typeof MessageReadScalarFieldEnum)[keyof typeof MessageReadScalarFieldEnum]


  export const UserSecurityLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    timestamp: 'timestamp',
    success: 'success',
    details: 'details'
  };

  export type UserSecurityLogScalarFieldEnum = (typeof UserSecurityLogScalarFieldEnum)[keyof typeof UserSecurityLogScalarFieldEnum]


  export const EncryptionKeyScalarFieldEnum: {
    id: 'id',
    keyType: 'keyType',
    keyValue: 'keyValue',
    iv: 'iv',
    algorithm: 'algorithm',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    isRevoked: 'isRevoked',
    groupId: 'groupId',
    relatedKeyId: 'relatedKeyId'
  };

  export type EncryptionKeyScalarFieldEnum = (typeof EncryptionKeyScalarFieldEnum)[keyof typeof EncryptionKeyScalarFieldEnum]


  export const VulnerabilityDemoScalarFieldEnum: {
    id: 'id',
    vulnerabilityType: 'vulnerabilityType',
    description: 'description',
    mitigations: 'mitigations',
    demonstrationCode: 'demonstrationCode',
    createdAt: 'createdAt'
  };

  export type VulnerabilityDemoScalarFieldEnum = (typeof VulnerabilityDemoScalarFieldEnum)[keyof typeof VulnerabilityDemoScalarFieldEnum]


  export const DiscussionBoardScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    groupId: 'groupId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isArchived: 'isArchived',
    sortOrder: 'sortOrder'
  };

  export type DiscussionBoardScalarFieldEnum = (typeof DiscussionBoardScalarFieldEnum)[keyof typeof DiscussionBoardScalarFieldEnum]


  export const DiscussionPostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    encryptedContent: 'encryptedContent',
    iv: 'iv',
    keyId: 'keyId',
    authorId: 'authorId',
    boardId: 'boardId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isLocked: 'isLocked',
    isPinned: 'isPinned',
    viewCount: 'viewCount'
  };

  export type DiscussionPostScalarFieldEnum = (typeof DiscussionPostScalarFieldEnum)[keyof typeof DiscussionPostScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    encryptedContent: 'encryptedContent',
    iv: 'iv',
    keyId: 'keyId',
    authorId: 'authorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    parentId: 'parentId',
    postId: 'postId',
    fileId: 'fileId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const ReactionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    userId: 'userId',
    createdAt: 'createdAt',
    messageId: 'messageId',
    postId: 'postId',
    commentId: 'commentId',
    fileId: 'fileId'
  };

  export type ReactionScalarFieldEnum = (typeof ReactionScalarFieldEnum)[keyof typeof ReactionScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    originalName: 'originalName',
    mimeType: 'mimeType',
    size: 'size',
    path: 'path',
    isEncrypted: 'isEncrypted',
    encryptionKeyId: 'encryptionKeyId',
    encryptionIv: 'encryptionIv',
    checksum: 'checksum',
    uploaderId: 'uploaderId',
    groupId: 'groupId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isArchived: 'isArchived',
    thumbnailPath: 'thumbnailPath',
    metadata: 'metadata'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const PinnedItemScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    groupId: 'groupId',
    itemType: 'itemType',
    itemId: 'itemId',
    pinnedAt: 'pinnedAt',
    note: 'note'
  };

  export type PinnedItemScalarFieldEnum = (typeof PinnedItemScalarFieldEnum)[keyof typeof PinnedItemScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    dueDate: 'dueDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    creatorId: 'creatorId',
    groupId: 'groupId'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const TaskAssignmentScalarFieldEnum: {
    id: 'id',
    taskId: 'taskId',
    userId: 'userId',
    assignedAt: 'assignedAt'
  };

  export type TaskAssignmentScalarFieldEnum = (typeof TaskAssignmentScalarFieldEnum)[keyof typeof TaskAssignmentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    hashedPassword?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isVerified?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
    verificationExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    twoFactorEnabled?: BoolFilter<"User"> | boolean
    twoFactorSecret?: StringNullableFilter<"User"> | string | null
    lastPasswordChange?: DateTimeNullableFilter<"User"> | Date | string | null
    previousPasswordHashes?: StringNullableFilter<"User"> | string | null
    displayName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    sentMessages?: MessageListRelationFilter
    ownedGroups?: GroupListRelationFilter
    memberOfGroups?: GroupMemberListRelationFilter
    sessions?: SessionListRelationFilter
    userSecurityLogs?: UserSecurityLogListRelationFilter
    posts?: DiscussionPostListRelationFilter
    comments?: CommentListRelationFilter
    reactions?: ReactionListRelationFilter
    uploadedFiles?: FileListRelationFilter
    pinnedItems?: PinnedItemListRelationFilter
    tasks?: TaskListRelationFilter
    taskAssignments?: TaskAssignmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    verificationExpires?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpires?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    lastPasswordChange?: SortOrderInput | SortOrder
    previousPasswordHashes?: SortOrderInput | SortOrder
    displayName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    sentMessages?: MessageOrderByRelationAggregateInput
    ownedGroups?: GroupOrderByRelationAggregateInput
    memberOfGroups?: GroupMemberOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    userSecurityLogs?: UserSecurityLogOrderByRelationAggregateInput
    posts?: DiscussionPostOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    reactions?: ReactionOrderByRelationAggregateInput
    uploadedFiles?: FileOrderByRelationAggregateInput
    pinnedItems?: PinnedItemOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
    taskAssignments?: TaskAssignmentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    hashedPassword?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isVerified?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
    verificationExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    twoFactorEnabled?: BoolFilter<"User"> | boolean
    twoFactorSecret?: StringNullableFilter<"User"> | string | null
    lastPasswordChange?: DateTimeNullableFilter<"User"> | Date | string | null
    previousPasswordHashes?: StringNullableFilter<"User"> | string | null
    displayName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    sentMessages?: MessageListRelationFilter
    ownedGroups?: GroupListRelationFilter
    memberOfGroups?: GroupMemberListRelationFilter
    sessions?: SessionListRelationFilter
    userSecurityLogs?: UserSecurityLogListRelationFilter
    posts?: DiscussionPostListRelationFilter
    comments?: CommentListRelationFilter
    reactions?: ReactionListRelationFilter
    uploadedFiles?: FileListRelationFilter
    pinnedItems?: PinnedItemListRelationFilter
    tasks?: TaskListRelationFilter
    taskAssignments?: TaskAssignmentListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    verificationExpires?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpires?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    lastPasswordChange?: SortOrderInput | SortOrder
    previousPasswordHashes?: SortOrderInput | SortOrder
    displayName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    hashedPassword?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    verificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    verificationExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    resetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetTokenExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    twoFactorEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    twoFactorSecret?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastPasswordChange?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    previousPasswordHashes?: StringNullableWithAggregatesFilter<"User"> | string | null
    displayName?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    deviceInfo?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    isRevoked?: BoolFilter<"Session"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    deviceInfo?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    isRevoked?: BoolFilter<"Session"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    token?: StringWithAggregatesFilter<"Session"> | string
    deviceInfo?: StringNullableWithAggregatesFilter<"Session"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    isRevoked?: BoolWithAggregatesFilter<"Session"> | boolean
  }

  export type GroupWhereInput = {
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    id?: StringFilter<"Group"> | string
    name?: StringFilter<"Group"> | string
    description?: StringNullableFilter<"Group"> | string | null
    createdAt?: DateTimeFilter<"Group"> | Date | string
    updatedAt?: DateTimeFilter<"Group"> | Date | string
    ownerId?: StringFilter<"Group"> | string
    isPrivate?: BoolFilter<"Group"> | boolean
    avatarUrl?: StringNullableFilter<"Group"> | string | null
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    members?: GroupMemberListRelationFilter
    messages?: MessageListRelationFilter
    discussionBoards?: DiscussionBoardListRelationFilter
    files?: FileListRelationFilter
    encryptionKeys?: EncryptionKeyListRelationFilter
    pinnedItems?: PinnedItemListRelationFilter
    tasks?: TaskListRelationFilter
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    isPrivate?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    owner?: UserOrderByWithRelationInput
    members?: GroupMemberOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    discussionBoards?: DiscussionBoardOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    encryptionKeys?: EncryptionKeyOrderByRelationAggregateInput
    pinnedItems?: PinnedItemOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
  }

  export type GroupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    name?: StringFilter<"Group"> | string
    description?: StringNullableFilter<"Group"> | string | null
    createdAt?: DateTimeFilter<"Group"> | Date | string
    updatedAt?: DateTimeFilter<"Group"> | Date | string
    ownerId?: StringFilter<"Group"> | string
    isPrivate?: BoolFilter<"Group"> | boolean
    avatarUrl?: StringNullableFilter<"Group"> | string | null
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    members?: GroupMemberListRelationFilter
    messages?: MessageListRelationFilter
    discussionBoards?: DiscussionBoardListRelationFilter
    files?: FileListRelationFilter
    encryptionKeys?: EncryptionKeyListRelationFilter
    pinnedItems?: PinnedItemListRelationFilter
    tasks?: TaskListRelationFilter
  }, "id">

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    isPrivate?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    _count?: GroupCountOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    OR?: GroupScalarWhereWithAggregatesInput[]
    NOT?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Group"> | string
    name?: StringWithAggregatesFilter<"Group"> | string
    description?: StringNullableWithAggregatesFilter<"Group"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Group"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Group"> | Date | string
    ownerId?: StringWithAggregatesFilter<"Group"> | string
    isPrivate?: BoolWithAggregatesFilter<"Group"> | boolean
    avatarUrl?: StringNullableWithAggregatesFilter<"Group"> | string | null
  }

  export type GroupMemberWhereInput = {
    AND?: GroupMemberWhereInput | GroupMemberWhereInput[]
    OR?: GroupMemberWhereInput[]
    NOT?: GroupMemberWhereInput | GroupMemberWhereInput[]
    id?: StringFilter<"GroupMember"> | string
    userId?: StringFilter<"GroupMember"> | string
    groupId?: StringFilter<"GroupMember"> | string
    role?: StringFilter<"GroupMember"> | string
    joinedAt?: DateTimeFilter<"GroupMember"> | Date | string
    invitedBy?: StringNullableFilter<"GroupMember"> | string | null
    notifyOnNewMessage?: BoolFilter<"GroupMember"> | boolean
    notifyOnMention?: BoolFilter<"GroupMember"> | boolean
    notifyOnNewDiscussion?: BoolFilter<"GroupMember"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    group?: XOR<GroupScalarRelationFilter, GroupWhereInput>
  }

  export type GroupMemberOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    invitedBy?: SortOrderInput | SortOrder
    notifyOnNewMessage?: SortOrder
    notifyOnMention?: SortOrder
    notifyOnNewDiscussion?: SortOrder
    user?: UserOrderByWithRelationInput
    group?: GroupOrderByWithRelationInput
  }

  export type GroupMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_groupId?: GroupMemberUserIdGroupIdCompoundUniqueInput
    AND?: GroupMemberWhereInput | GroupMemberWhereInput[]
    OR?: GroupMemberWhereInput[]
    NOT?: GroupMemberWhereInput | GroupMemberWhereInput[]
    userId?: StringFilter<"GroupMember"> | string
    groupId?: StringFilter<"GroupMember"> | string
    role?: StringFilter<"GroupMember"> | string
    joinedAt?: DateTimeFilter<"GroupMember"> | Date | string
    invitedBy?: StringNullableFilter<"GroupMember"> | string | null
    notifyOnNewMessage?: BoolFilter<"GroupMember"> | boolean
    notifyOnMention?: BoolFilter<"GroupMember"> | boolean
    notifyOnNewDiscussion?: BoolFilter<"GroupMember"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    group?: XOR<GroupScalarRelationFilter, GroupWhereInput>
  }, "id" | "userId_groupId">

  export type GroupMemberOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    invitedBy?: SortOrderInput | SortOrder
    notifyOnNewMessage?: SortOrder
    notifyOnMention?: SortOrder
    notifyOnNewDiscussion?: SortOrder
    _count?: GroupMemberCountOrderByAggregateInput
    _max?: GroupMemberMaxOrderByAggregateInput
    _min?: GroupMemberMinOrderByAggregateInput
  }

  export type GroupMemberScalarWhereWithAggregatesInput = {
    AND?: GroupMemberScalarWhereWithAggregatesInput | GroupMemberScalarWhereWithAggregatesInput[]
    OR?: GroupMemberScalarWhereWithAggregatesInput[]
    NOT?: GroupMemberScalarWhereWithAggregatesInput | GroupMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GroupMember"> | string
    userId?: StringWithAggregatesFilter<"GroupMember"> | string
    groupId?: StringWithAggregatesFilter<"GroupMember"> | string
    role?: StringWithAggregatesFilter<"GroupMember"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"GroupMember"> | Date | string
    invitedBy?: StringNullableWithAggregatesFilter<"GroupMember"> | string | null
    notifyOnNewMessage?: BoolWithAggregatesFilter<"GroupMember"> | boolean
    notifyOnMention?: BoolWithAggregatesFilter<"GroupMember"> | boolean
    notifyOnNewDiscussion?: BoolWithAggregatesFilter<"GroupMember"> | boolean
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    groupId?: StringFilter<"Message"> | string
    encryptedContent?: StringFilter<"Message"> | string
    iv?: StringFilter<"Message"> | string
    keyId?: StringNullableFilter<"Message"> | string | null
    metaData?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    replyToId?: StringNullableFilter<"Message"> | string | null
    ephemeralExpiry?: DateTimeNullableFilter<"Message"> | Date | string | null
    isEphemeral?: BoolFilter<"Message"> | boolean
    readBy?: MessageReadListRelationFilter
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    group?: XOR<GroupScalarRelationFilter, GroupWhereInput>
    replyTo?: XOR<MessageNullableScalarRelationFilter, MessageWhereInput> | null
    replies?: MessageListRelationFilter
    attachments?: FileListRelationFilter
    reactions?: ReactionListRelationFilter
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    groupId?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrderInput | SortOrder
    metaData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    replyToId?: SortOrderInput | SortOrder
    ephemeralExpiry?: SortOrderInput | SortOrder
    isEphemeral?: SortOrder
    readBy?: MessageReadOrderByRelationAggregateInput
    sender?: UserOrderByWithRelationInput
    group?: GroupOrderByWithRelationInput
    replyTo?: MessageOrderByWithRelationInput
    replies?: MessageOrderByRelationAggregateInput
    attachments?: FileOrderByRelationAggregateInput
    reactions?: ReactionOrderByRelationAggregateInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    senderId?: StringFilter<"Message"> | string
    groupId?: StringFilter<"Message"> | string
    encryptedContent?: StringFilter<"Message"> | string
    iv?: StringFilter<"Message"> | string
    keyId?: StringNullableFilter<"Message"> | string | null
    metaData?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    replyToId?: StringNullableFilter<"Message"> | string | null
    ephemeralExpiry?: DateTimeNullableFilter<"Message"> | Date | string | null
    isEphemeral?: BoolFilter<"Message"> | boolean
    readBy?: MessageReadListRelationFilter
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    group?: XOR<GroupScalarRelationFilter, GroupWhereInput>
    replyTo?: XOR<MessageNullableScalarRelationFilter, MessageWhereInput> | null
    replies?: MessageListRelationFilter
    attachments?: FileListRelationFilter
    reactions?: ReactionListRelationFilter
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    groupId?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrderInput | SortOrder
    metaData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    replyToId?: SortOrderInput | SortOrder
    ephemeralExpiry?: SortOrderInput | SortOrder
    isEphemeral?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    groupId?: StringWithAggregatesFilter<"Message"> | string
    encryptedContent?: StringWithAggregatesFilter<"Message"> | string
    iv?: StringWithAggregatesFilter<"Message"> | string
    keyId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    metaData?: StringNullableWithAggregatesFilter<"Message"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    replyToId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    ephemeralExpiry?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
    isEphemeral?: BoolWithAggregatesFilter<"Message"> | boolean
  }

  export type MessageReadWhereInput = {
    AND?: MessageReadWhereInput | MessageReadWhereInput[]
    OR?: MessageReadWhereInput[]
    NOT?: MessageReadWhereInput | MessageReadWhereInput[]
    id?: StringFilter<"MessageRead"> | string
    messageId?: StringFilter<"MessageRead"> | string
    userId?: StringFilter<"MessageRead"> | string
    readAt?: DateTimeFilter<"MessageRead"> | Date | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
  }

  export type MessageReadOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
    message?: MessageOrderByWithRelationInput
  }

  export type MessageReadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    messageId_userId?: MessageReadMessageIdUserIdCompoundUniqueInput
    AND?: MessageReadWhereInput | MessageReadWhereInput[]
    OR?: MessageReadWhereInput[]
    NOT?: MessageReadWhereInput | MessageReadWhereInput[]
    messageId?: StringFilter<"MessageRead"> | string
    userId?: StringFilter<"MessageRead"> | string
    readAt?: DateTimeFilter<"MessageRead"> | Date | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
  }, "id" | "messageId_userId">

  export type MessageReadOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
    _count?: MessageReadCountOrderByAggregateInput
    _max?: MessageReadMaxOrderByAggregateInput
    _min?: MessageReadMinOrderByAggregateInput
  }

  export type MessageReadScalarWhereWithAggregatesInput = {
    AND?: MessageReadScalarWhereWithAggregatesInput | MessageReadScalarWhereWithAggregatesInput[]
    OR?: MessageReadScalarWhereWithAggregatesInput[]
    NOT?: MessageReadScalarWhereWithAggregatesInput | MessageReadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MessageRead"> | string
    messageId?: StringWithAggregatesFilter<"MessageRead"> | string
    userId?: StringWithAggregatesFilter<"MessageRead"> | string
    readAt?: DateTimeWithAggregatesFilter<"MessageRead"> | Date | string
  }

  export type UserSecurityLogWhereInput = {
    AND?: UserSecurityLogWhereInput | UserSecurityLogWhereInput[]
    OR?: UserSecurityLogWhereInput[]
    NOT?: UserSecurityLogWhereInput | UserSecurityLogWhereInput[]
    id?: StringFilter<"UserSecurityLog"> | string
    userId?: StringFilter<"UserSecurityLog"> | string
    action?: StringFilter<"UserSecurityLog"> | string
    ipAddress?: StringNullableFilter<"UserSecurityLog"> | string | null
    userAgent?: StringNullableFilter<"UserSecurityLog"> | string | null
    timestamp?: DateTimeFilter<"UserSecurityLog"> | Date | string
    success?: BoolFilter<"UserSecurityLog"> | boolean
    details?: StringNullableFilter<"UserSecurityLog"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSecurityLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    success?: SortOrder
    details?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSecurityLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserSecurityLogWhereInput | UserSecurityLogWhereInput[]
    OR?: UserSecurityLogWhereInput[]
    NOT?: UserSecurityLogWhereInput | UserSecurityLogWhereInput[]
    userId?: StringFilter<"UserSecurityLog"> | string
    action?: StringFilter<"UserSecurityLog"> | string
    ipAddress?: StringNullableFilter<"UserSecurityLog"> | string | null
    userAgent?: StringNullableFilter<"UserSecurityLog"> | string | null
    timestamp?: DateTimeFilter<"UserSecurityLog"> | Date | string
    success?: BoolFilter<"UserSecurityLog"> | boolean
    details?: StringNullableFilter<"UserSecurityLog"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserSecurityLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    success?: SortOrder
    details?: SortOrderInput | SortOrder
    _count?: UserSecurityLogCountOrderByAggregateInput
    _max?: UserSecurityLogMaxOrderByAggregateInput
    _min?: UserSecurityLogMinOrderByAggregateInput
  }

  export type UserSecurityLogScalarWhereWithAggregatesInput = {
    AND?: UserSecurityLogScalarWhereWithAggregatesInput | UserSecurityLogScalarWhereWithAggregatesInput[]
    OR?: UserSecurityLogScalarWhereWithAggregatesInput[]
    NOT?: UserSecurityLogScalarWhereWithAggregatesInput | UserSecurityLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSecurityLog"> | string
    userId?: StringWithAggregatesFilter<"UserSecurityLog"> | string
    action?: StringWithAggregatesFilter<"UserSecurityLog"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"UserSecurityLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UserSecurityLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"UserSecurityLog"> | Date | string
    success?: BoolWithAggregatesFilter<"UserSecurityLog"> | boolean
    details?: StringNullableWithAggregatesFilter<"UserSecurityLog"> | string | null
  }

  export type EncryptionKeyWhereInput = {
    AND?: EncryptionKeyWhereInput | EncryptionKeyWhereInput[]
    OR?: EncryptionKeyWhereInput[]
    NOT?: EncryptionKeyWhereInput | EncryptionKeyWhereInput[]
    id?: StringFilter<"EncryptionKey"> | string
    keyType?: StringFilter<"EncryptionKey"> | string
    keyValue?: StringFilter<"EncryptionKey"> | string
    iv?: StringFilter<"EncryptionKey"> | string
    algorithm?: StringFilter<"EncryptionKey"> | string
    createdAt?: DateTimeFilter<"EncryptionKey"> | Date | string
    expiresAt?: DateTimeFilter<"EncryptionKey"> | Date | string
    isRevoked?: BoolFilter<"EncryptionKey"> | boolean
    groupId?: StringNullableFilter<"EncryptionKey"> | string | null
    relatedKeyId?: StringNullableFilter<"EncryptionKey"> | string | null
    group?: XOR<GroupNullableScalarRelationFilter, GroupWhereInput> | null
    relatedKey?: XOR<EncryptionKeyNullableScalarRelationFilter, EncryptionKeyWhereInput> | null
    relatedTo?: EncryptionKeyListRelationFilter
  }

  export type EncryptionKeyOrderByWithRelationInput = {
    id?: SortOrder
    keyType?: SortOrder
    keyValue?: SortOrder
    iv?: SortOrder
    algorithm?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    groupId?: SortOrderInput | SortOrder
    relatedKeyId?: SortOrderInput | SortOrder
    group?: GroupOrderByWithRelationInput
    relatedKey?: EncryptionKeyOrderByWithRelationInput
    relatedTo?: EncryptionKeyOrderByRelationAggregateInput
  }

  export type EncryptionKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EncryptionKeyWhereInput | EncryptionKeyWhereInput[]
    OR?: EncryptionKeyWhereInput[]
    NOT?: EncryptionKeyWhereInput | EncryptionKeyWhereInput[]
    keyType?: StringFilter<"EncryptionKey"> | string
    keyValue?: StringFilter<"EncryptionKey"> | string
    iv?: StringFilter<"EncryptionKey"> | string
    algorithm?: StringFilter<"EncryptionKey"> | string
    createdAt?: DateTimeFilter<"EncryptionKey"> | Date | string
    expiresAt?: DateTimeFilter<"EncryptionKey"> | Date | string
    isRevoked?: BoolFilter<"EncryptionKey"> | boolean
    groupId?: StringNullableFilter<"EncryptionKey"> | string | null
    relatedKeyId?: StringNullableFilter<"EncryptionKey"> | string | null
    group?: XOR<GroupNullableScalarRelationFilter, GroupWhereInput> | null
    relatedKey?: XOR<EncryptionKeyNullableScalarRelationFilter, EncryptionKeyWhereInput> | null
    relatedTo?: EncryptionKeyListRelationFilter
  }, "id">

  export type EncryptionKeyOrderByWithAggregationInput = {
    id?: SortOrder
    keyType?: SortOrder
    keyValue?: SortOrder
    iv?: SortOrder
    algorithm?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    groupId?: SortOrderInput | SortOrder
    relatedKeyId?: SortOrderInput | SortOrder
    _count?: EncryptionKeyCountOrderByAggregateInput
    _max?: EncryptionKeyMaxOrderByAggregateInput
    _min?: EncryptionKeyMinOrderByAggregateInput
  }

  export type EncryptionKeyScalarWhereWithAggregatesInput = {
    AND?: EncryptionKeyScalarWhereWithAggregatesInput | EncryptionKeyScalarWhereWithAggregatesInput[]
    OR?: EncryptionKeyScalarWhereWithAggregatesInput[]
    NOT?: EncryptionKeyScalarWhereWithAggregatesInput | EncryptionKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EncryptionKey"> | string
    keyType?: StringWithAggregatesFilter<"EncryptionKey"> | string
    keyValue?: StringWithAggregatesFilter<"EncryptionKey"> | string
    iv?: StringWithAggregatesFilter<"EncryptionKey"> | string
    algorithm?: StringWithAggregatesFilter<"EncryptionKey"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EncryptionKey"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"EncryptionKey"> | Date | string
    isRevoked?: BoolWithAggregatesFilter<"EncryptionKey"> | boolean
    groupId?: StringNullableWithAggregatesFilter<"EncryptionKey"> | string | null
    relatedKeyId?: StringNullableWithAggregatesFilter<"EncryptionKey"> | string | null
  }

  export type VulnerabilityDemoWhereInput = {
    AND?: VulnerabilityDemoWhereInput | VulnerabilityDemoWhereInput[]
    OR?: VulnerabilityDemoWhereInput[]
    NOT?: VulnerabilityDemoWhereInput | VulnerabilityDemoWhereInput[]
    id?: StringFilter<"VulnerabilityDemo"> | string
    vulnerabilityType?: StringFilter<"VulnerabilityDemo"> | string
    description?: StringFilter<"VulnerabilityDemo"> | string
    mitigations?: StringFilter<"VulnerabilityDemo"> | string
    demonstrationCode?: StringNullableFilter<"VulnerabilityDemo"> | string | null
    createdAt?: DateTimeFilter<"VulnerabilityDemo"> | Date | string
  }

  export type VulnerabilityDemoOrderByWithRelationInput = {
    id?: SortOrder
    vulnerabilityType?: SortOrder
    description?: SortOrder
    mitigations?: SortOrder
    demonstrationCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type VulnerabilityDemoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VulnerabilityDemoWhereInput | VulnerabilityDemoWhereInput[]
    OR?: VulnerabilityDemoWhereInput[]
    NOT?: VulnerabilityDemoWhereInput | VulnerabilityDemoWhereInput[]
    vulnerabilityType?: StringFilter<"VulnerabilityDemo"> | string
    description?: StringFilter<"VulnerabilityDemo"> | string
    mitigations?: StringFilter<"VulnerabilityDemo"> | string
    demonstrationCode?: StringNullableFilter<"VulnerabilityDemo"> | string | null
    createdAt?: DateTimeFilter<"VulnerabilityDemo"> | Date | string
  }, "id">

  export type VulnerabilityDemoOrderByWithAggregationInput = {
    id?: SortOrder
    vulnerabilityType?: SortOrder
    description?: SortOrder
    mitigations?: SortOrder
    demonstrationCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: VulnerabilityDemoCountOrderByAggregateInput
    _max?: VulnerabilityDemoMaxOrderByAggregateInput
    _min?: VulnerabilityDemoMinOrderByAggregateInput
  }

  export type VulnerabilityDemoScalarWhereWithAggregatesInput = {
    AND?: VulnerabilityDemoScalarWhereWithAggregatesInput | VulnerabilityDemoScalarWhereWithAggregatesInput[]
    OR?: VulnerabilityDemoScalarWhereWithAggregatesInput[]
    NOT?: VulnerabilityDemoScalarWhereWithAggregatesInput | VulnerabilityDemoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VulnerabilityDemo"> | string
    vulnerabilityType?: StringWithAggregatesFilter<"VulnerabilityDemo"> | string
    description?: StringWithAggregatesFilter<"VulnerabilityDemo"> | string
    mitigations?: StringWithAggregatesFilter<"VulnerabilityDemo"> | string
    demonstrationCode?: StringNullableWithAggregatesFilter<"VulnerabilityDemo"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"VulnerabilityDemo"> | Date | string
  }

  export type DiscussionBoardWhereInput = {
    AND?: DiscussionBoardWhereInput | DiscussionBoardWhereInput[]
    OR?: DiscussionBoardWhereInput[]
    NOT?: DiscussionBoardWhereInput | DiscussionBoardWhereInput[]
    id?: StringFilter<"DiscussionBoard"> | string
    name?: StringFilter<"DiscussionBoard"> | string
    description?: StringNullableFilter<"DiscussionBoard"> | string | null
    groupId?: StringFilter<"DiscussionBoard"> | string
    createdAt?: DateTimeFilter<"DiscussionBoard"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionBoard"> | Date | string
    isArchived?: BoolFilter<"DiscussionBoard"> | boolean
    sortOrder?: IntFilter<"DiscussionBoard"> | number
    group?: XOR<GroupScalarRelationFilter, GroupWhereInput>
    posts?: DiscussionPostListRelationFilter
  }

  export type DiscussionBoardOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isArchived?: SortOrder
    sortOrder?: SortOrder
    group?: GroupOrderByWithRelationInput
    posts?: DiscussionPostOrderByRelationAggregateInput
  }

  export type DiscussionBoardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DiscussionBoardWhereInput | DiscussionBoardWhereInput[]
    OR?: DiscussionBoardWhereInput[]
    NOT?: DiscussionBoardWhereInput | DiscussionBoardWhereInput[]
    name?: StringFilter<"DiscussionBoard"> | string
    description?: StringNullableFilter<"DiscussionBoard"> | string | null
    groupId?: StringFilter<"DiscussionBoard"> | string
    createdAt?: DateTimeFilter<"DiscussionBoard"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionBoard"> | Date | string
    isArchived?: BoolFilter<"DiscussionBoard"> | boolean
    sortOrder?: IntFilter<"DiscussionBoard"> | number
    group?: XOR<GroupScalarRelationFilter, GroupWhereInput>
    posts?: DiscussionPostListRelationFilter
  }, "id">

  export type DiscussionBoardOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isArchived?: SortOrder
    sortOrder?: SortOrder
    _count?: DiscussionBoardCountOrderByAggregateInput
    _avg?: DiscussionBoardAvgOrderByAggregateInput
    _max?: DiscussionBoardMaxOrderByAggregateInput
    _min?: DiscussionBoardMinOrderByAggregateInput
    _sum?: DiscussionBoardSumOrderByAggregateInput
  }

  export type DiscussionBoardScalarWhereWithAggregatesInput = {
    AND?: DiscussionBoardScalarWhereWithAggregatesInput | DiscussionBoardScalarWhereWithAggregatesInput[]
    OR?: DiscussionBoardScalarWhereWithAggregatesInput[]
    NOT?: DiscussionBoardScalarWhereWithAggregatesInput | DiscussionBoardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DiscussionBoard"> | string
    name?: StringWithAggregatesFilter<"DiscussionBoard"> | string
    description?: StringNullableWithAggregatesFilter<"DiscussionBoard"> | string | null
    groupId?: StringWithAggregatesFilter<"DiscussionBoard"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DiscussionBoard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DiscussionBoard"> | Date | string
    isArchived?: BoolWithAggregatesFilter<"DiscussionBoard"> | boolean
    sortOrder?: IntWithAggregatesFilter<"DiscussionBoard"> | number
  }

  export type DiscussionPostWhereInput = {
    AND?: DiscussionPostWhereInput | DiscussionPostWhereInput[]
    OR?: DiscussionPostWhereInput[]
    NOT?: DiscussionPostWhereInput | DiscussionPostWhereInput[]
    id?: StringFilter<"DiscussionPost"> | string
    title?: StringFilter<"DiscussionPost"> | string
    encryptedContent?: StringFilter<"DiscussionPost"> | string
    iv?: StringFilter<"DiscussionPost"> | string
    keyId?: StringNullableFilter<"DiscussionPost"> | string | null
    authorId?: StringFilter<"DiscussionPost"> | string
    boardId?: StringFilter<"DiscussionPost"> | string
    createdAt?: DateTimeFilter<"DiscussionPost"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionPost"> | Date | string
    isLocked?: BoolFilter<"DiscussionPost"> | boolean
    isPinned?: BoolFilter<"DiscussionPost"> | boolean
    viewCount?: IntFilter<"DiscussionPost"> | number
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    board?: XOR<DiscussionBoardScalarRelationFilter, DiscussionBoardWhereInput>
    comments?: CommentListRelationFilter
    attachments?: FileListRelationFilter
    reactions?: ReactionListRelationFilter
  }

  export type DiscussionPostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrderInput | SortOrder
    authorId?: SortOrder
    boardId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isLocked?: SortOrder
    isPinned?: SortOrder
    viewCount?: SortOrder
    author?: UserOrderByWithRelationInput
    board?: DiscussionBoardOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    attachments?: FileOrderByRelationAggregateInput
    reactions?: ReactionOrderByRelationAggregateInput
  }

  export type DiscussionPostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DiscussionPostWhereInput | DiscussionPostWhereInput[]
    OR?: DiscussionPostWhereInput[]
    NOT?: DiscussionPostWhereInput | DiscussionPostWhereInput[]
    title?: StringFilter<"DiscussionPost"> | string
    encryptedContent?: StringFilter<"DiscussionPost"> | string
    iv?: StringFilter<"DiscussionPost"> | string
    keyId?: StringNullableFilter<"DiscussionPost"> | string | null
    authorId?: StringFilter<"DiscussionPost"> | string
    boardId?: StringFilter<"DiscussionPost"> | string
    createdAt?: DateTimeFilter<"DiscussionPost"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionPost"> | Date | string
    isLocked?: BoolFilter<"DiscussionPost"> | boolean
    isPinned?: BoolFilter<"DiscussionPost"> | boolean
    viewCount?: IntFilter<"DiscussionPost"> | number
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    board?: XOR<DiscussionBoardScalarRelationFilter, DiscussionBoardWhereInput>
    comments?: CommentListRelationFilter
    attachments?: FileListRelationFilter
    reactions?: ReactionListRelationFilter
  }, "id">

  export type DiscussionPostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrderInput | SortOrder
    authorId?: SortOrder
    boardId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isLocked?: SortOrder
    isPinned?: SortOrder
    viewCount?: SortOrder
    _count?: DiscussionPostCountOrderByAggregateInput
    _avg?: DiscussionPostAvgOrderByAggregateInput
    _max?: DiscussionPostMaxOrderByAggregateInput
    _min?: DiscussionPostMinOrderByAggregateInput
    _sum?: DiscussionPostSumOrderByAggregateInput
  }

  export type DiscussionPostScalarWhereWithAggregatesInput = {
    AND?: DiscussionPostScalarWhereWithAggregatesInput | DiscussionPostScalarWhereWithAggregatesInput[]
    OR?: DiscussionPostScalarWhereWithAggregatesInput[]
    NOT?: DiscussionPostScalarWhereWithAggregatesInput | DiscussionPostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DiscussionPost"> | string
    title?: StringWithAggregatesFilter<"DiscussionPost"> | string
    encryptedContent?: StringWithAggregatesFilter<"DiscussionPost"> | string
    iv?: StringWithAggregatesFilter<"DiscussionPost"> | string
    keyId?: StringNullableWithAggregatesFilter<"DiscussionPost"> | string | null
    authorId?: StringWithAggregatesFilter<"DiscussionPost"> | string
    boardId?: StringWithAggregatesFilter<"DiscussionPost"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DiscussionPost"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DiscussionPost"> | Date | string
    isLocked?: BoolWithAggregatesFilter<"DiscussionPost"> | boolean
    isPinned?: BoolWithAggregatesFilter<"DiscussionPost"> | boolean
    viewCount?: IntWithAggregatesFilter<"DiscussionPost"> | number
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    encryptedContent?: StringFilter<"Comment"> | string
    iv?: StringFilter<"Comment"> | string
    keyId?: StringNullableFilter<"Comment"> | string | null
    authorId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    parentId?: StringNullableFilter<"Comment"> | string | null
    postId?: StringNullableFilter<"Comment"> | string | null
    fileId?: StringNullableFilter<"Comment"> | string | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<DiscussionPostNullableScalarRelationFilter, DiscussionPostWhereInput> | null
    file?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    parentComment?: XOR<CommentNullableScalarRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
    reactions?: ReactionListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrderInput | SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrderInput | SortOrder
    postId?: SortOrderInput | SortOrder
    fileId?: SortOrderInput | SortOrder
    author?: UserOrderByWithRelationInput
    post?: DiscussionPostOrderByWithRelationInput
    file?: FileOrderByWithRelationInput
    parentComment?: CommentOrderByWithRelationInput
    replies?: CommentOrderByRelationAggregateInput
    reactions?: ReactionOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    encryptedContent?: StringFilter<"Comment"> | string
    iv?: StringFilter<"Comment"> | string
    keyId?: StringNullableFilter<"Comment"> | string | null
    authorId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    parentId?: StringNullableFilter<"Comment"> | string | null
    postId?: StringNullableFilter<"Comment"> | string | null
    fileId?: StringNullableFilter<"Comment"> | string | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<DiscussionPostNullableScalarRelationFilter, DiscussionPostWhereInput> | null
    file?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    parentComment?: XOR<CommentNullableScalarRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
    reactions?: ReactionListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrderInput | SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrderInput | SortOrder
    postId?: SortOrderInput | SortOrder
    fileId?: SortOrderInput | SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    encryptedContent?: StringWithAggregatesFilter<"Comment"> | string
    iv?: StringWithAggregatesFilter<"Comment"> | string
    keyId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    authorId?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    parentId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    postId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    fileId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
  }

  export type ReactionWhereInput = {
    AND?: ReactionWhereInput | ReactionWhereInput[]
    OR?: ReactionWhereInput[]
    NOT?: ReactionWhereInput | ReactionWhereInput[]
    id?: StringFilter<"Reaction"> | string
    type?: StringFilter<"Reaction"> | string
    userId?: StringFilter<"Reaction"> | string
    createdAt?: DateTimeFilter<"Reaction"> | Date | string
    messageId?: StringNullableFilter<"Reaction"> | string | null
    postId?: StringNullableFilter<"Reaction"> | string | null
    commentId?: StringNullableFilter<"Reaction"> | string | null
    fileId?: StringNullableFilter<"Reaction"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    message?: XOR<MessageNullableScalarRelationFilter, MessageWhereInput> | null
    post?: XOR<DiscussionPostNullableScalarRelationFilter, DiscussionPostWhereInput> | null
    comment?: XOR<CommentNullableScalarRelationFilter, CommentWhereInput> | null
    file?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
  }

  export type ReactionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    messageId?: SortOrderInput | SortOrder
    postId?: SortOrderInput | SortOrder
    commentId?: SortOrderInput | SortOrder
    fileId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    message?: MessageOrderByWithRelationInput
    post?: DiscussionPostOrderByWithRelationInput
    comment?: CommentOrderByWithRelationInput
    file?: FileOrderByWithRelationInput
  }

  export type ReactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_messageId_postId_commentId_fileId_type?: ReactionUserIdMessageIdPostIdCommentIdFileIdTypeCompoundUniqueInput
    AND?: ReactionWhereInput | ReactionWhereInput[]
    OR?: ReactionWhereInput[]
    NOT?: ReactionWhereInput | ReactionWhereInput[]
    type?: StringFilter<"Reaction"> | string
    userId?: StringFilter<"Reaction"> | string
    createdAt?: DateTimeFilter<"Reaction"> | Date | string
    messageId?: StringNullableFilter<"Reaction"> | string | null
    postId?: StringNullableFilter<"Reaction"> | string | null
    commentId?: StringNullableFilter<"Reaction"> | string | null
    fileId?: StringNullableFilter<"Reaction"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    message?: XOR<MessageNullableScalarRelationFilter, MessageWhereInput> | null
    post?: XOR<DiscussionPostNullableScalarRelationFilter, DiscussionPostWhereInput> | null
    comment?: XOR<CommentNullableScalarRelationFilter, CommentWhereInput> | null
    file?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
  }, "id" | "userId_messageId_postId_commentId_fileId_type">

  export type ReactionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    messageId?: SortOrderInput | SortOrder
    postId?: SortOrderInput | SortOrder
    commentId?: SortOrderInput | SortOrder
    fileId?: SortOrderInput | SortOrder
    _count?: ReactionCountOrderByAggregateInput
    _max?: ReactionMaxOrderByAggregateInput
    _min?: ReactionMinOrderByAggregateInput
  }

  export type ReactionScalarWhereWithAggregatesInput = {
    AND?: ReactionScalarWhereWithAggregatesInput | ReactionScalarWhereWithAggregatesInput[]
    OR?: ReactionScalarWhereWithAggregatesInput[]
    NOT?: ReactionScalarWhereWithAggregatesInput | ReactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reaction"> | string
    type?: StringWithAggregatesFilter<"Reaction"> | string
    userId?: StringWithAggregatesFilter<"Reaction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Reaction"> | Date | string
    messageId?: StringNullableWithAggregatesFilter<"Reaction"> | string | null
    postId?: StringNullableWithAggregatesFilter<"Reaction"> | string | null
    commentId?: StringNullableWithAggregatesFilter<"Reaction"> | string | null
    fileId?: StringNullableWithAggregatesFilter<"Reaction"> | string | null
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    filename?: StringFilter<"File"> | string
    originalName?: StringFilter<"File"> | string
    mimeType?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    path?: StringFilter<"File"> | string
    isEncrypted?: BoolFilter<"File"> | boolean
    encryptionKeyId?: StringNullableFilter<"File"> | string | null
    encryptionIv?: StringNullableFilter<"File"> | string | null
    checksum?: StringNullableFilter<"File"> | string | null
    uploaderId?: StringFilter<"File"> | string
    groupId?: StringNullableFilter<"File"> | string | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    isArchived?: BoolFilter<"File"> | boolean
    thumbnailPath?: StringNullableFilter<"File"> | string | null
    metadata?: StringNullableFilter<"File"> | string | null
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
    group?: XOR<GroupNullableScalarRelationFilter, GroupWhereInput> | null
    comments?: CommentListRelationFilter
    reactions?: ReactionListRelationFilter
    messages?: MessageListRelationFilter
    posts?: DiscussionPostListRelationFilter
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    path?: SortOrder
    isEncrypted?: SortOrder
    encryptionKeyId?: SortOrderInput | SortOrder
    encryptionIv?: SortOrderInput | SortOrder
    checksum?: SortOrderInput | SortOrder
    uploaderId?: SortOrder
    groupId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isArchived?: SortOrder
    thumbnailPath?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    uploader?: UserOrderByWithRelationInput
    group?: GroupOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    reactions?: ReactionOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    posts?: DiscussionPostOrderByRelationAggregateInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    filename?: StringFilter<"File"> | string
    originalName?: StringFilter<"File"> | string
    mimeType?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    path?: StringFilter<"File"> | string
    isEncrypted?: BoolFilter<"File"> | boolean
    encryptionKeyId?: StringNullableFilter<"File"> | string | null
    encryptionIv?: StringNullableFilter<"File"> | string | null
    checksum?: StringNullableFilter<"File"> | string | null
    uploaderId?: StringFilter<"File"> | string
    groupId?: StringNullableFilter<"File"> | string | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    isArchived?: BoolFilter<"File"> | boolean
    thumbnailPath?: StringNullableFilter<"File"> | string | null
    metadata?: StringNullableFilter<"File"> | string | null
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
    group?: XOR<GroupNullableScalarRelationFilter, GroupWhereInput> | null
    comments?: CommentListRelationFilter
    reactions?: ReactionListRelationFilter
    messages?: MessageListRelationFilter
    posts?: DiscussionPostListRelationFilter
  }, "id">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    path?: SortOrder
    isEncrypted?: SortOrder
    encryptionKeyId?: SortOrderInput | SortOrder
    encryptionIv?: SortOrderInput | SortOrder
    checksum?: SortOrderInput | SortOrder
    uploaderId?: SortOrder
    groupId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isArchived?: SortOrder
    thumbnailPath?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    filename?: StringWithAggregatesFilter<"File"> | string
    originalName?: StringWithAggregatesFilter<"File"> | string
    mimeType?: StringWithAggregatesFilter<"File"> | string
    size?: IntWithAggregatesFilter<"File"> | number
    path?: StringWithAggregatesFilter<"File"> | string
    isEncrypted?: BoolWithAggregatesFilter<"File"> | boolean
    encryptionKeyId?: StringNullableWithAggregatesFilter<"File"> | string | null
    encryptionIv?: StringNullableWithAggregatesFilter<"File"> | string | null
    checksum?: StringNullableWithAggregatesFilter<"File"> | string | null
    uploaderId?: StringWithAggregatesFilter<"File"> | string
    groupId?: StringNullableWithAggregatesFilter<"File"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    isArchived?: BoolWithAggregatesFilter<"File"> | boolean
    thumbnailPath?: StringNullableWithAggregatesFilter<"File"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"File"> | string | null
  }

  export type PinnedItemWhereInput = {
    AND?: PinnedItemWhereInput | PinnedItemWhereInput[]
    OR?: PinnedItemWhereInput[]
    NOT?: PinnedItemWhereInput | PinnedItemWhereInput[]
    id?: StringFilter<"PinnedItem"> | string
    userId?: StringFilter<"PinnedItem"> | string
    groupId?: StringFilter<"PinnedItem"> | string
    itemType?: StringFilter<"PinnedItem"> | string
    itemId?: StringFilter<"PinnedItem"> | string
    pinnedAt?: DateTimeFilter<"PinnedItem"> | Date | string
    note?: StringNullableFilter<"PinnedItem"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    group?: XOR<GroupScalarRelationFilter, GroupWhereInput>
  }

  export type PinnedItemOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    itemType?: SortOrder
    itemId?: SortOrder
    pinnedAt?: SortOrder
    note?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    group?: GroupOrderByWithRelationInput
  }

  export type PinnedItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_itemType_itemId?: PinnedItemUserIdItemTypeItemIdCompoundUniqueInput
    AND?: PinnedItemWhereInput | PinnedItemWhereInput[]
    OR?: PinnedItemWhereInput[]
    NOT?: PinnedItemWhereInput | PinnedItemWhereInput[]
    userId?: StringFilter<"PinnedItem"> | string
    groupId?: StringFilter<"PinnedItem"> | string
    itemType?: StringFilter<"PinnedItem"> | string
    itemId?: StringFilter<"PinnedItem"> | string
    pinnedAt?: DateTimeFilter<"PinnedItem"> | Date | string
    note?: StringNullableFilter<"PinnedItem"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    group?: XOR<GroupScalarRelationFilter, GroupWhereInput>
  }, "id" | "userId_itemType_itemId">

  export type PinnedItemOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    itemType?: SortOrder
    itemId?: SortOrder
    pinnedAt?: SortOrder
    note?: SortOrderInput | SortOrder
    _count?: PinnedItemCountOrderByAggregateInput
    _max?: PinnedItemMaxOrderByAggregateInput
    _min?: PinnedItemMinOrderByAggregateInput
  }

  export type PinnedItemScalarWhereWithAggregatesInput = {
    AND?: PinnedItemScalarWhereWithAggregatesInput | PinnedItemScalarWhereWithAggregatesInput[]
    OR?: PinnedItemScalarWhereWithAggregatesInput[]
    NOT?: PinnedItemScalarWhereWithAggregatesInput | PinnedItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PinnedItem"> | string
    userId?: StringWithAggregatesFilter<"PinnedItem"> | string
    groupId?: StringWithAggregatesFilter<"PinnedItem"> | string
    itemType?: StringWithAggregatesFilter<"PinnedItem"> | string
    itemId?: StringWithAggregatesFilter<"PinnedItem"> | string
    pinnedAt?: DateTimeWithAggregatesFilter<"PinnedItem"> | Date | string
    note?: StringNullableWithAggregatesFilter<"PinnedItem"> | string | null
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: StringFilter<"Task"> | string
    priority?: StringFilter<"Task"> | string
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    creatorId?: StringFilter<"Task"> | string
    groupId?: StringFilter<"Task"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    group?: XOR<GroupScalarRelationFilter, GroupWhereInput>
    assignments?: TaskAssignmentListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creatorId?: SortOrder
    groupId?: SortOrder
    creator?: UserOrderByWithRelationInput
    group?: GroupOrderByWithRelationInput
    assignments?: TaskAssignmentOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: StringFilter<"Task"> | string
    priority?: StringFilter<"Task"> | string
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    creatorId?: StringFilter<"Task"> | string
    groupId?: StringFilter<"Task"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    group?: XOR<GroupScalarRelationFilter, GroupWhereInput>
    assignments?: TaskAssignmentListRelationFilter
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creatorId?: SortOrder
    groupId?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null
    status?: StringWithAggregatesFilter<"Task"> | string
    priority?: StringWithAggregatesFilter<"Task"> | string
    dueDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    creatorId?: StringWithAggregatesFilter<"Task"> | string
    groupId?: StringWithAggregatesFilter<"Task"> | string
  }

  export type TaskAssignmentWhereInput = {
    AND?: TaskAssignmentWhereInput | TaskAssignmentWhereInput[]
    OR?: TaskAssignmentWhereInput[]
    NOT?: TaskAssignmentWhereInput | TaskAssignmentWhereInput[]
    id?: StringFilter<"TaskAssignment"> | string
    taskId?: StringFilter<"TaskAssignment"> | string
    userId?: StringFilter<"TaskAssignment"> | string
    assignedAt?: DateTimeFilter<"TaskAssignment"> | Date | string
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TaskAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    task?: TaskOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TaskAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    taskId_userId?: TaskAssignmentTaskIdUserIdCompoundUniqueInput
    AND?: TaskAssignmentWhereInput | TaskAssignmentWhereInput[]
    OR?: TaskAssignmentWhereInput[]
    NOT?: TaskAssignmentWhereInput | TaskAssignmentWhereInput[]
    taskId?: StringFilter<"TaskAssignment"> | string
    userId?: StringFilter<"TaskAssignment"> | string
    assignedAt?: DateTimeFilter<"TaskAssignment"> | Date | string
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "taskId_userId">

  export type TaskAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    _count?: TaskAssignmentCountOrderByAggregateInput
    _max?: TaskAssignmentMaxOrderByAggregateInput
    _min?: TaskAssignmentMinOrderByAggregateInput
  }

  export type TaskAssignmentScalarWhereWithAggregatesInput = {
    AND?: TaskAssignmentScalarWhereWithAggregatesInput | TaskAssignmentScalarWhereWithAggregatesInput[]
    OR?: TaskAssignmentScalarWhereWithAggregatesInput[]
    NOT?: TaskAssignmentScalarWhereWithAggregatesInput | TaskAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TaskAssignment"> | string
    taskId?: StringWithAggregatesFilter<"TaskAssignment"> | string
    userId?: StringWithAggregatesFilter<"TaskAssignment"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"TaskAssignment"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GroupCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    avatarUrl?: string | null
    owner: UserCreateNestedOneWithoutOwnedGroupsInput
    members?: GroupMemberCreateNestedManyWithoutGroupInput
    messages?: MessageCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardCreateNestedManyWithoutGroupInput
    files?: FileCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutGroupInput
    tasks?: TaskCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    isPrivate?: boolean
    avatarUrl?: string | null
    members?: GroupMemberUncheckedCreateNestedManyWithoutGroupInput
    messages?: MessageUncheckedCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardUncheckedCreateNestedManyWithoutGroupInput
    files?: FileUncheckedCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyUncheckedCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutGroupInput
    tasks?: TaskUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutOwnedGroupsNestedInput
    members?: GroupMemberUpdateManyWithoutGroupNestedInput
    messages?: MessageUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUpdateManyWithoutGroupNestedInput
    files?: FileUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutGroupNestedInput
    tasks?: TaskUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    members?: GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
    messages?: MessageUncheckedUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUncheckedUpdateManyWithoutGroupNestedInput
    files?: FileUncheckedUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUncheckedUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutGroupNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    isPrivate?: boolean
    avatarUrl?: string | null
  }

  export type GroupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupMemberCreateInput = {
    id?: string
    role?: string
    joinedAt?: Date | string
    invitedBy?: string | null
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
    user: UserCreateNestedOneWithoutMemberOfGroupsInput
    group: GroupCreateNestedOneWithoutMembersInput
  }

  export type GroupMemberUncheckedCreateInput = {
    id?: string
    userId: string
    groupId: string
    role?: string
    joinedAt?: Date | string
    invitedBy?: string | null
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
  }

  export type GroupMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnNewMessage?: BoolFieldUpdateOperationsInput | boolean
    notifyOnMention?: BoolFieldUpdateOperationsInput | boolean
    notifyOnNewDiscussion?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutMemberOfGroupsNestedInput
    group?: GroupUpdateOneRequiredWithoutMembersNestedInput
  }

  export type GroupMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnNewMessage?: BoolFieldUpdateOperationsInput | boolean
    notifyOnMention?: BoolFieldUpdateOperationsInput | boolean
    notifyOnNewDiscussion?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GroupMemberCreateManyInput = {
    id?: string
    userId: string
    groupId: string
    role?: string
    joinedAt?: Date | string
    invitedBy?: string | null
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
  }

  export type GroupMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnNewMessage?: BoolFieldUpdateOperationsInput | boolean
    notifyOnMention?: BoolFieldUpdateOperationsInput | boolean
    notifyOnNewDiscussion?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GroupMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnNewMessage?: BoolFieldUpdateOperationsInput | boolean
    notifyOnMention?: BoolFieldUpdateOperationsInput | boolean
    notifyOnNewDiscussion?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageCreateInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadCreateNestedManyWithoutMessageInput
    sender: UserCreateNestedOneWithoutSentMessagesInput
    group: GroupCreateNestedOneWithoutMessagesInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    attachments?: FileCreateNestedManyWithoutMessagesInput
    reactions?: ReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    senderId: string
    groupId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replyToId?: string | null
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
    attachments?: FileUncheckedCreateNestedManyWithoutMessagesInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUpdateManyWithoutMessageNestedInput
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    group?: GroupUpdateOneRequiredWithoutMessagesNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    attachments?: FileUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
    attachments?: FileUncheckedUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageCreateManyInput = {
    id?: string
    senderId: string
    groupId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replyToId?: string | null
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageReadCreateInput = {
    id?: string
    userId: string
    readAt?: Date | string
    message: MessageCreateNestedOneWithoutReadByInput
  }

  export type MessageReadUncheckedCreateInput = {
    id?: string
    messageId: string
    userId: string
    readAt?: Date | string
  }

  export type MessageReadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: MessageUpdateOneRequiredWithoutReadByNestedInput
  }

  export type MessageReadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReadCreateManyInput = {
    id?: string
    messageId: string
    userId: string
    readAt?: Date | string
  }

  export type MessageReadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSecurityLogCreateInput = {
    id?: string
    action: string
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    success?: boolean
    details?: string | null
    user: UserCreateNestedOneWithoutUserSecurityLogsInput
  }

  export type UserSecurityLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    success?: boolean
    details?: string | null
  }

  export type UserSecurityLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutUserSecurityLogsNestedInput
  }

  export type UserSecurityLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSecurityLogCreateManyInput = {
    id?: string
    userId: string
    action: string
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    success?: boolean
    details?: string | null
  }

  export type UserSecurityLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSecurityLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EncryptionKeyCreateInput = {
    id?: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    group?: GroupCreateNestedOneWithoutEncryptionKeysInput
    relatedKey?: EncryptionKeyCreateNestedOneWithoutRelatedToInput
    relatedTo?: EncryptionKeyCreateNestedManyWithoutRelatedKeyInput
  }

  export type EncryptionKeyUncheckedCreateInput = {
    id?: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    groupId?: string | null
    relatedKeyId?: string | null
    relatedTo?: EncryptionKeyUncheckedCreateNestedManyWithoutRelatedKeyInput
  }

  export type EncryptionKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    group?: GroupUpdateOneWithoutEncryptionKeysNestedInput
    relatedKey?: EncryptionKeyUpdateOneWithoutRelatedToNestedInput
    relatedTo?: EncryptionKeyUpdateManyWithoutRelatedKeyNestedInput
  }

  export type EncryptionKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedTo?: EncryptionKeyUncheckedUpdateManyWithoutRelatedKeyNestedInput
  }

  export type EncryptionKeyCreateManyInput = {
    id?: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    groupId?: string | null
    relatedKeyId?: string | null
  }

  export type EncryptionKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EncryptionKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedKeyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VulnerabilityDemoCreateInput = {
    id?: string
    vulnerabilityType: string
    description: string
    mitigations: string
    demonstrationCode?: string | null
    createdAt?: Date | string
  }

  export type VulnerabilityDemoUncheckedCreateInput = {
    id?: string
    vulnerabilityType: string
    description: string
    mitigations: string
    demonstrationCode?: string | null
    createdAt?: Date | string
  }

  export type VulnerabilityDemoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vulnerabilityType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mitigations?: StringFieldUpdateOperationsInput | string
    demonstrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VulnerabilityDemoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vulnerabilityType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mitigations?: StringFieldUpdateOperationsInput | string
    demonstrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VulnerabilityDemoCreateManyInput = {
    id?: string
    vulnerabilityType: string
    description: string
    mitigations: string
    demonstrationCode?: string | null
    createdAt?: Date | string
  }

  export type VulnerabilityDemoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    vulnerabilityType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mitigations?: StringFieldUpdateOperationsInput | string
    demonstrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VulnerabilityDemoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    vulnerabilityType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mitigations?: StringFieldUpdateOperationsInput | string
    demonstrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionBoardCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    sortOrder?: number
    group: GroupCreateNestedOneWithoutDiscussionBoardsInput
    posts?: DiscussionPostCreateNestedManyWithoutBoardInput
  }

  export type DiscussionBoardUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    groupId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    sortOrder?: number
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutBoardInput
  }

  export type DiscussionBoardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    group?: GroupUpdateOneRequiredWithoutDiscussionBoardsNestedInput
    posts?: DiscussionPostUpdateManyWithoutBoardNestedInput
  }

  export type DiscussionBoardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    posts?: DiscussionPostUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type DiscussionBoardCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    groupId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    sortOrder?: number
  }

  export type DiscussionBoardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type DiscussionBoardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type DiscussionPostCreateInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    author: UserCreateNestedOneWithoutPostsInput
    board: DiscussionBoardCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    attachments?: FileCreateNestedManyWithoutPostsInput
    reactions?: ReactionCreateNestedManyWithoutPostInput
  }

  export type DiscussionPostUncheckedCreateInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    boardId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    attachments?: FileUncheckedCreateNestedManyWithoutPostsInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutPostInput
  }

  export type DiscussionPostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    board?: DiscussionBoardUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    attachments?: FileUpdateManyWithoutPostsNestedInput
    reactions?: ReactionUpdateManyWithoutPostNestedInput
  }

  export type DiscussionPostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    attachments?: FileUncheckedUpdateManyWithoutPostsNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type DiscussionPostCreateManyInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    boardId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
  }

  export type DiscussionPostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type DiscussionPostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    post?: DiscussionPostCreateNestedOneWithoutCommentsInput
    file?: FileCreateNestedOneWithoutCommentsInput
    parentComment?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentCommentInput
    reactions?: ReactionCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    postId?: string | null
    fileId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentCommentInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: DiscussionPostUpdateOneWithoutCommentsNestedInput
    file?: FileUpdateOneWithoutCommentsNestedInput
    parentComment?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentCommentNestedInput
    reactions?: ReactionUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentCommentNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    postId?: string | null
    fileId?: string | null
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionCreateInput = {
    id?: string
    type: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReactionsInput
    message?: MessageCreateNestedOneWithoutReactionsInput
    post?: DiscussionPostCreateNestedOneWithoutReactionsInput
    comment?: CommentCreateNestedOneWithoutReactionsInput
    file?: FileCreateNestedOneWithoutReactionsInput
  }

  export type ReactionUncheckedCreateInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
    messageId?: string | null
    postId?: string | null
    commentId?: string | null
    fileId?: string | null
  }

  export type ReactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReactionsNestedInput
    message?: MessageUpdateOneWithoutReactionsNestedInput
    post?: DiscussionPostUpdateOneWithoutReactionsNestedInput
    comment?: CommentUpdateOneWithoutReactionsNestedInput
    file?: FileUpdateOneWithoutReactionsNestedInput
  }

  export type ReactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    commentId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionCreateManyInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
    messageId?: string | null
    postId?: string | null
    commentId?: string | null
    fileId?: string | null
  }

  export type ReactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    commentId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileCreateInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
    group?: GroupCreateNestedOneWithoutFilesInput
    comments?: CommentCreateNestedManyWithoutFileInput
    reactions?: ReactionCreateNestedManyWithoutFileInput
    messages?: MessageCreateNestedManyWithoutAttachmentsInput
    posts?: DiscussionPostCreateNestedManyWithoutAttachmentsInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    uploaderId: string
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutFileInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutFileInput
    messages?: MessageUncheckedCreateNestedManyWithoutAttachmentsInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAttachmentsInput
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    group?: GroupUpdateOneWithoutFilesNestedInput
    comments?: CommentUpdateManyWithoutFileNestedInput
    reactions?: ReactionUpdateManyWithoutFileNestedInput
    messages?: MessageUpdateManyWithoutAttachmentsNestedInput
    posts?: DiscussionPostUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutFileNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutFileNestedInput
    messages?: MessageUncheckedUpdateManyWithoutAttachmentsNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileCreateManyInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    uploaderId: string
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PinnedItemCreateInput = {
    id?: string
    itemType: string
    itemId: string
    pinnedAt?: Date | string
    note?: string | null
    user: UserCreateNestedOneWithoutPinnedItemsInput
    group: GroupCreateNestedOneWithoutPinnedItemsInput
  }

  export type PinnedItemUncheckedCreateInput = {
    id?: string
    userId: string
    groupId: string
    itemType: string
    itemId: string
    pinnedAt?: Date | string
    note?: string | null
  }

  export type PinnedItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    pinnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPinnedItemsNestedInput
    group?: GroupUpdateOneRequiredWithoutPinnedItemsNestedInput
  }

  export type PinnedItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    pinnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PinnedItemCreateManyInput = {
    id?: string
    userId: string
    groupId: string
    itemType: string
    itemId: string
    pinnedAt?: Date | string
    note?: string | null
  }

  export type PinnedItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    pinnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PinnedItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    pinnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: string
    priority?: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutTasksInput
    group: GroupCreateNestedOneWithoutTasksInput
    assignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: string
    priority?: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId: string
    groupId: string
    assignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutTasksNestedInput
    group?: GroupUpdateOneRequiredWithoutTasksNestedInput
    assignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    assignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    status?: string
    priority?: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId: string
    groupId: string
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskAssignmentCreateInput = {
    id?: string
    assignedAt?: Date | string
    task: TaskCreateNestedOneWithoutAssignmentsInput
    user: UserCreateNestedOneWithoutTaskAssignmentsInput
  }

  export type TaskAssignmentUncheckedCreateInput = {
    id?: string
    taskId: string
    userId: string
    assignedAt?: Date | string
  }

  export type TaskAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutAssignmentsNestedInput
    user?: UserUpdateOneRequiredWithoutTaskAssignmentsNestedInput
  }

  export type TaskAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskAssignmentCreateManyInput = {
    id?: string
    taskId: string
    userId: string
    assignedAt?: Date | string
  }

  export type TaskAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type GroupListRelationFilter = {
    every?: GroupWhereInput
    some?: GroupWhereInput
    none?: GroupWhereInput
  }

  export type GroupMemberListRelationFilter = {
    every?: GroupMemberWhereInput
    some?: GroupMemberWhereInput
    none?: GroupMemberWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type UserSecurityLogListRelationFilter = {
    every?: UserSecurityLogWhereInput
    some?: UserSecurityLogWhereInput
    none?: UserSecurityLogWhereInput
  }

  export type DiscussionPostListRelationFilter = {
    every?: DiscussionPostWhereInput
    some?: DiscussionPostWhereInput
    none?: DiscussionPostWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type ReactionListRelationFilter = {
    every?: ReactionWhereInput
    some?: ReactionWhereInput
    none?: ReactionWhereInput
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type PinnedItemListRelationFilter = {
    every?: PinnedItemWhereInput
    some?: PinnedItemWhereInput
    none?: PinnedItemWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type TaskAssignmentListRelationFilter = {
    every?: TaskAssignmentWhereInput
    some?: TaskAssignmentWhereInput
    none?: TaskAssignmentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSecurityLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiscussionPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PinnedItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    verificationExpires?: SortOrder
    resetToken?: SortOrder
    resetTokenExpires?: SortOrder
    lastLogin?: SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorSecret?: SortOrder
    lastPasswordChange?: SortOrder
    previousPasswordHashes?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    bio?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    verificationExpires?: SortOrder
    resetToken?: SortOrder
    resetTokenExpires?: SortOrder
    lastLogin?: SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorSecret?: SortOrder
    lastPasswordChange?: SortOrder
    previousPasswordHashes?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    bio?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    verificationExpires?: SortOrder
    resetToken?: SortOrder
    resetTokenExpires?: SortOrder
    lastLogin?: SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorSecret?: SortOrder
    lastPasswordChange?: SortOrder
    previousPasswordHashes?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    bio?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
  }

  export type DiscussionBoardListRelationFilter = {
    every?: DiscussionBoardWhereInput
    some?: DiscussionBoardWhereInput
    none?: DiscussionBoardWhereInput
  }

  export type EncryptionKeyListRelationFilter = {
    every?: EncryptionKeyWhereInput
    some?: EncryptionKeyWhereInput
    none?: EncryptionKeyWhereInput
  }

  export type DiscussionBoardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EncryptionKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    isPrivate?: SortOrder
    avatarUrl?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    isPrivate?: SortOrder
    avatarUrl?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    isPrivate?: SortOrder
    avatarUrl?: SortOrder
  }

  export type GroupScalarRelationFilter = {
    is?: GroupWhereInput
    isNot?: GroupWhereInput
  }

  export type GroupMemberUserIdGroupIdCompoundUniqueInput = {
    userId: string
    groupId: string
  }

  export type GroupMemberCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    invitedBy?: SortOrder
    notifyOnNewMessage?: SortOrder
    notifyOnMention?: SortOrder
    notifyOnNewDiscussion?: SortOrder
  }

  export type GroupMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    invitedBy?: SortOrder
    notifyOnNewMessage?: SortOrder
    notifyOnMention?: SortOrder
    notifyOnNewDiscussion?: SortOrder
  }

  export type GroupMemberMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    invitedBy?: SortOrder
    notifyOnNewMessage?: SortOrder
    notifyOnMention?: SortOrder
    notifyOnNewDiscussion?: SortOrder
  }

  export type MessageReadListRelationFilter = {
    every?: MessageReadWhereInput
    some?: MessageReadWhereInput
    none?: MessageReadWhereInput
  }

  export type MessageNullableScalarRelationFilter = {
    is?: MessageWhereInput | null
    isNot?: MessageWhereInput | null
  }

  export type MessageReadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    groupId?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrder
    metaData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    replyToId?: SortOrder
    ephemeralExpiry?: SortOrder
    isEphemeral?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    groupId?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrder
    metaData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    replyToId?: SortOrder
    ephemeralExpiry?: SortOrder
    isEphemeral?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    groupId?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrder
    metaData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    replyToId?: SortOrder
    ephemeralExpiry?: SortOrder
    isEphemeral?: SortOrder
  }

  export type MessageScalarRelationFilter = {
    is?: MessageWhereInput
    isNot?: MessageWhereInput
  }

  export type MessageReadMessageIdUserIdCompoundUniqueInput = {
    messageId: string
    userId: string
  }

  export type MessageReadCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type MessageReadMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type MessageReadMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type UserSecurityLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    success?: SortOrder
    details?: SortOrder
  }

  export type UserSecurityLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    success?: SortOrder
    details?: SortOrder
  }

  export type UserSecurityLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    success?: SortOrder
    details?: SortOrder
  }

  export type GroupNullableScalarRelationFilter = {
    is?: GroupWhereInput | null
    isNot?: GroupWhereInput | null
  }

  export type EncryptionKeyNullableScalarRelationFilter = {
    is?: EncryptionKeyWhereInput | null
    isNot?: EncryptionKeyWhereInput | null
  }

  export type EncryptionKeyCountOrderByAggregateInput = {
    id?: SortOrder
    keyType?: SortOrder
    keyValue?: SortOrder
    iv?: SortOrder
    algorithm?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    groupId?: SortOrder
    relatedKeyId?: SortOrder
  }

  export type EncryptionKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    keyType?: SortOrder
    keyValue?: SortOrder
    iv?: SortOrder
    algorithm?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    groupId?: SortOrder
    relatedKeyId?: SortOrder
  }

  export type EncryptionKeyMinOrderByAggregateInput = {
    id?: SortOrder
    keyType?: SortOrder
    keyValue?: SortOrder
    iv?: SortOrder
    algorithm?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    groupId?: SortOrder
    relatedKeyId?: SortOrder
  }

  export type VulnerabilityDemoCountOrderByAggregateInput = {
    id?: SortOrder
    vulnerabilityType?: SortOrder
    description?: SortOrder
    mitigations?: SortOrder
    demonstrationCode?: SortOrder
    createdAt?: SortOrder
  }

  export type VulnerabilityDemoMaxOrderByAggregateInput = {
    id?: SortOrder
    vulnerabilityType?: SortOrder
    description?: SortOrder
    mitigations?: SortOrder
    demonstrationCode?: SortOrder
    createdAt?: SortOrder
  }

  export type VulnerabilityDemoMinOrderByAggregateInput = {
    id?: SortOrder
    vulnerabilityType?: SortOrder
    description?: SortOrder
    mitigations?: SortOrder
    demonstrationCode?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DiscussionBoardCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isArchived?: SortOrder
    sortOrder?: SortOrder
  }

  export type DiscussionBoardAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type DiscussionBoardMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isArchived?: SortOrder
    sortOrder?: SortOrder
  }

  export type DiscussionBoardMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isArchived?: SortOrder
    sortOrder?: SortOrder
  }

  export type DiscussionBoardSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DiscussionBoardScalarRelationFilter = {
    is?: DiscussionBoardWhereInput
    isNot?: DiscussionBoardWhereInput
  }

  export type DiscussionPostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrder
    authorId?: SortOrder
    boardId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isLocked?: SortOrder
    isPinned?: SortOrder
    viewCount?: SortOrder
  }

  export type DiscussionPostAvgOrderByAggregateInput = {
    viewCount?: SortOrder
  }

  export type DiscussionPostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrder
    authorId?: SortOrder
    boardId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isLocked?: SortOrder
    isPinned?: SortOrder
    viewCount?: SortOrder
  }

  export type DiscussionPostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrder
    authorId?: SortOrder
    boardId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isLocked?: SortOrder
    isPinned?: SortOrder
    viewCount?: SortOrder
  }

  export type DiscussionPostSumOrderByAggregateInput = {
    viewCount?: SortOrder
  }

  export type DiscussionPostNullableScalarRelationFilter = {
    is?: DiscussionPostWhereInput | null
    isNot?: DiscussionPostWhereInput | null
  }

  export type FileNullableScalarRelationFilter = {
    is?: FileWhereInput | null
    isNot?: FileWhereInput | null
  }

  export type CommentNullableScalarRelationFilter = {
    is?: CommentWhereInput | null
    isNot?: CommentWhereInput | null
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
    postId?: SortOrder
    fileId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
    postId?: SortOrder
    fileId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    encryptedContent?: SortOrder
    iv?: SortOrder
    keyId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
    postId?: SortOrder
    fileId?: SortOrder
  }

  export type ReactionUserIdMessageIdPostIdCommentIdFileIdTypeCompoundUniqueInput = {
    userId: string
    messageId: string
    postId: string
    commentId: string
    fileId: string
    type: string
  }

  export type ReactionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    messageId?: SortOrder
    postId?: SortOrder
    commentId?: SortOrder
    fileId?: SortOrder
  }

  export type ReactionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    messageId?: SortOrder
    postId?: SortOrder
    commentId?: SortOrder
    fileId?: SortOrder
  }

  export type ReactionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    messageId?: SortOrder
    postId?: SortOrder
    commentId?: SortOrder
    fileId?: SortOrder
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    path?: SortOrder
    isEncrypted?: SortOrder
    encryptionKeyId?: SortOrder
    encryptionIv?: SortOrder
    checksum?: SortOrder
    uploaderId?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isArchived?: SortOrder
    thumbnailPath?: SortOrder
    metadata?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    path?: SortOrder
    isEncrypted?: SortOrder
    encryptionKeyId?: SortOrder
    encryptionIv?: SortOrder
    checksum?: SortOrder
    uploaderId?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isArchived?: SortOrder
    thumbnailPath?: SortOrder
    metadata?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    path?: SortOrder
    isEncrypted?: SortOrder
    encryptionKeyId?: SortOrder
    encryptionIv?: SortOrder
    checksum?: SortOrder
    uploaderId?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isArchived?: SortOrder
    thumbnailPath?: SortOrder
    metadata?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type PinnedItemUserIdItemTypeItemIdCompoundUniqueInput = {
    userId: string
    itemType: string
    itemId: string
  }

  export type PinnedItemCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    itemType?: SortOrder
    itemId?: SortOrder
    pinnedAt?: SortOrder
    note?: SortOrder
  }

  export type PinnedItemMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    itemType?: SortOrder
    itemId?: SortOrder
    pinnedAt?: SortOrder
    note?: SortOrder
  }

  export type PinnedItemMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    itemType?: SortOrder
    itemId?: SortOrder
    pinnedAt?: SortOrder
    note?: SortOrder
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creatorId?: SortOrder
    groupId?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creatorId?: SortOrder
    groupId?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creatorId?: SortOrder
    groupId?: SortOrder
  }

  export type TaskScalarRelationFilter = {
    is?: TaskWhereInput
    isNot?: TaskWhereInput
  }

  export type TaskAssignmentTaskIdUserIdCompoundUniqueInput = {
    taskId: string
    userId: string
  }

  export type TaskAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type TaskAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type TaskAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type GroupCreateNestedManyWithoutOwnerInput = {
    create?: XOR<GroupCreateWithoutOwnerInput, GroupUncheckedCreateWithoutOwnerInput> | GroupCreateWithoutOwnerInput[] | GroupUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutOwnerInput | GroupCreateOrConnectWithoutOwnerInput[]
    createMany?: GroupCreateManyOwnerInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type GroupMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<GroupMemberCreateWithoutUserInput, GroupMemberUncheckedCreateWithoutUserInput> | GroupMemberCreateWithoutUserInput[] | GroupMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutUserInput | GroupMemberCreateOrConnectWithoutUserInput[]
    createMany?: GroupMemberCreateManyUserInputEnvelope
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserSecurityLogCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSecurityLogCreateWithoutUserInput, UserSecurityLogUncheckedCreateWithoutUserInput> | UserSecurityLogCreateWithoutUserInput[] | UserSecurityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSecurityLogCreateOrConnectWithoutUserInput | UserSecurityLogCreateOrConnectWithoutUserInput[]
    createMany?: UserSecurityLogCreateManyUserInputEnvelope
    connect?: UserSecurityLogWhereUniqueInput | UserSecurityLogWhereUniqueInput[]
  }

  export type DiscussionPostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<DiscussionPostCreateWithoutAuthorInput, DiscussionPostUncheckedCreateWithoutAuthorInput> | DiscussionPostCreateWithoutAuthorInput[] | DiscussionPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutAuthorInput | DiscussionPostCreateOrConnectWithoutAuthorInput[]
    createMany?: DiscussionPostCreateManyAuthorInputEnvelope
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ReactionCreateNestedManyWithoutUserInput = {
    create?: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput> | ReactionCreateWithoutUserInput[] | ReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutUserInput | ReactionCreateOrConnectWithoutUserInput[]
    createMany?: ReactionCreateManyUserInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutUploaderInput = {
    create?: XOR<FileCreateWithoutUploaderInput, FileUncheckedCreateWithoutUploaderInput> | FileCreateWithoutUploaderInput[] | FileUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUploaderInput | FileCreateOrConnectWithoutUploaderInput[]
    createMany?: FileCreateManyUploaderInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type PinnedItemCreateNestedManyWithoutUserInput = {
    create?: XOR<PinnedItemCreateWithoutUserInput, PinnedItemUncheckedCreateWithoutUserInput> | PinnedItemCreateWithoutUserInput[] | PinnedItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PinnedItemCreateOrConnectWithoutUserInput | PinnedItemCreateOrConnectWithoutUserInput[]
    createMany?: PinnedItemCreateManyUserInputEnvelope
    connect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput> | TaskCreateWithoutCreatorInput[] | TaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatorInput | TaskCreateOrConnectWithoutCreatorInput[]
    createMany?: TaskCreateManyCreatorInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskAssignmentCreateNestedManyWithoutUserInput = {
    create?: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput> | TaskAssignmentCreateWithoutUserInput[] | TaskAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutUserInput | TaskAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: TaskAssignmentCreateManyUserInputEnvelope
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type GroupUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<GroupCreateWithoutOwnerInput, GroupUncheckedCreateWithoutOwnerInput> | GroupCreateWithoutOwnerInput[] | GroupUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutOwnerInput | GroupCreateOrConnectWithoutOwnerInput[]
    createMany?: GroupCreateManyOwnerInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type GroupMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GroupMemberCreateWithoutUserInput, GroupMemberUncheckedCreateWithoutUserInput> | GroupMemberCreateWithoutUserInput[] | GroupMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutUserInput | GroupMemberCreateOrConnectWithoutUserInput[]
    createMany?: GroupMemberCreateManyUserInputEnvelope
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserSecurityLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSecurityLogCreateWithoutUserInput, UserSecurityLogUncheckedCreateWithoutUserInput> | UserSecurityLogCreateWithoutUserInput[] | UserSecurityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSecurityLogCreateOrConnectWithoutUserInput | UserSecurityLogCreateOrConnectWithoutUserInput[]
    createMany?: UserSecurityLogCreateManyUserInputEnvelope
    connect?: UserSecurityLogWhereUniqueInput | UserSecurityLogWhereUniqueInput[]
  }

  export type DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<DiscussionPostCreateWithoutAuthorInput, DiscussionPostUncheckedCreateWithoutAuthorInput> | DiscussionPostCreateWithoutAuthorInput[] | DiscussionPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutAuthorInput | DiscussionPostCreateOrConnectWithoutAuthorInput[]
    createMany?: DiscussionPostCreateManyAuthorInputEnvelope
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ReactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput> | ReactionCreateWithoutUserInput[] | ReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutUserInput | ReactionCreateOrConnectWithoutUserInput[]
    createMany?: ReactionCreateManyUserInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutUploaderInput = {
    create?: XOR<FileCreateWithoutUploaderInput, FileUncheckedCreateWithoutUploaderInput> | FileCreateWithoutUploaderInput[] | FileUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUploaderInput | FileCreateOrConnectWithoutUploaderInput[]
    createMany?: FileCreateManyUploaderInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type PinnedItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PinnedItemCreateWithoutUserInput, PinnedItemUncheckedCreateWithoutUserInput> | PinnedItemCreateWithoutUserInput[] | PinnedItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PinnedItemCreateOrConnectWithoutUserInput | PinnedItemCreateOrConnectWithoutUserInput[]
    createMany?: PinnedItemCreateManyUserInputEnvelope
    connect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput> | TaskCreateWithoutCreatorInput[] | TaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatorInput | TaskCreateOrConnectWithoutCreatorInput[]
    createMany?: TaskCreateManyCreatorInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskAssignmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput> | TaskAssignmentCreateWithoutUserInput[] | TaskAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutUserInput | TaskAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: TaskAssignmentCreateManyUserInputEnvelope
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type GroupUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<GroupCreateWithoutOwnerInput, GroupUncheckedCreateWithoutOwnerInput> | GroupCreateWithoutOwnerInput[] | GroupUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutOwnerInput | GroupCreateOrConnectWithoutOwnerInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutOwnerInput | GroupUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: GroupCreateManyOwnerInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutOwnerInput | GroupUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutOwnerInput | GroupUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type GroupMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<GroupMemberCreateWithoutUserInput, GroupMemberUncheckedCreateWithoutUserInput> | GroupMemberCreateWithoutUserInput[] | GroupMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutUserInput | GroupMemberCreateOrConnectWithoutUserInput[]
    upsert?: GroupMemberUpsertWithWhereUniqueWithoutUserInput | GroupMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GroupMemberCreateManyUserInputEnvelope
    set?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    disconnect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    delete?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    update?: GroupMemberUpdateWithWhereUniqueWithoutUserInput | GroupMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GroupMemberUpdateManyWithWhereWithoutUserInput | GroupMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserSecurityLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSecurityLogCreateWithoutUserInput, UserSecurityLogUncheckedCreateWithoutUserInput> | UserSecurityLogCreateWithoutUserInput[] | UserSecurityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSecurityLogCreateOrConnectWithoutUserInput | UserSecurityLogCreateOrConnectWithoutUserInput[]
    upsert?: UserSecurityLogUpsertWithWhereUniqueWithoutUserInput | UserSecurityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSecurityLogCreateManyUserInputEnvelope
    set?: UserSecurityLogWhereUniqueInput | UserSecurityLogWhereUniqueInput[]
    disconnect?: UserSecurityLogWhereUniqueInput | UserSecurityLogWhereUniqueInput[]
    delete?: UserSecurityLogWhereUniqueInput | UserSecurityLogWhereUniqueInput[]
    connect?: UserSecurityLogWhereUniqueInput | UserSecurityLogWhereUniqueInput[]
    update?: UserSecurityLogUpdateWithWhereUniqueWithoutUserInput | UserSecurityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSecurityLogUpdateManyWithWhereWithoutUserInput | UserSecurityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSecurityLogScalarWhereInput | UserSecurityLogScalarWhereInput[]
  }

  export type DiscussionPostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<DiscussionPostCreateWithoutAuthorInput, DiscussionPostUncheckedCreateWithoutAuthorInput> | DiscussionPostCreateWithoutAuthorInput[] | DiscussionPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutAuthorInput | DiscussionPostCreateOrConnectWithoutAuthorInput[]
    upsert?: DiscussionPostUpsertWithWhereUniqueWithoutAuthorInput | DiscussionPostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: DiscussionPostCreateManyAuthorInputEnvelope
    set?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    disconnect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    delete?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    update?: DiscussionPostUpdateWithWhereUniqueWithoutAuthorInput | DiscussionPostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: DiscussionPostUpdateManyWithWhereWithoutAuthorInput | DiscussionPostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: DiscussionPostScalarWhereInput | DiscussionPostScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ReactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput> | ReactionCreateWithoutUserInput[] | ReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutUserInput | ReactionCreateOrConnectWithoutUserInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutUserInput | ReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReactionCreateManyUserInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutUserInput | ReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutUserInput | ReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type FileUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<FileCreateWithoutUploaderInput, FileUncheckedCreateWithoutUploaderInput> | FileCreateWithoutUploaderInput[] | FileUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUploaderInput | FileCreateOrConnectWithoutUploaderInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUploaderInput | FileUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: FileCreateManyUploaderInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUploaderInput | FileUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUploaderInput | FileUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type PinnedItemUpdateManyWithoutUserNestedInput = {
    create?: XOR<PinnedItemCreateWithoutUserInput, PinnedItemUncheckedCreateWithoutUserInput> | PinnedItemCreateWithoutUserInput[] | PinnedItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PinnedItemCreateOrConnectWithoutUserInput | PinnedItemCreateOrConnectWithoutUserInput[]
    upsert?: PinnedItemUpsertWithWhereUniqueWithoutUserInput | PinnedItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PinnedItemCreateManyUserInputEnvelope
    set?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    disconnect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    delete?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    connect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    update?: PinnedItemUpdateWithWhereUniqueWithoutUserInput | PinnedItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PinnedItemUpdateManyWithWhereWithoutUserInput | PinnedItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PinnedItemScalarWhereInput | PinnedItemScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput> | TaskCreateWithoutCreatorInput[] | TaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatorInput | TaskCreateOrConnectWithoutCreatorInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutCreatorInput | TaskUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TaskCreateManyCreatorInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutCreatorInput | TaskUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutCreatorInput | TaskUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskAssignmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput> | TaskAssignmentCreateWithoutUserInput[] | TaskAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutUserInput | TaskAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: TaskAssignmentUpsertWithWhereUniqueWithoutUserInput | TaskAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TaskAssignmentCreateManyUserInputEnvelope
    set?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    disconnect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    delete?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    update?: TaskAssignmentUpdateWithWhereUniqueWithoutUserInput | TaskAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TaskAssignmentUpdateManyWithWhereWithoutUserInput | TaskAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type GroupUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<GroupCreateWithoutOwnerInput, GroupUncheckedCreateWithoutOwnerInput> | GroupCreateWithoutOwnerInput[] | GroupUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutOwnerInput | GroupCreateOrConnectWithoutOwnerInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutOwnerInput | GroupUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: GroupCreateManyOwnerInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutOwnerInput | GroupUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutOwnerInput | GroupUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type GroupMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GroupMemberCreateWithoutUserInput, GroupMemberUncheckedCreateWithoutUserInput> | GroupMemberCreateWithoutUserInput[] | GroupMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutUserInput | GroupMemberCreateOrConnectWithoutUserInput[]
    upsert?: GroupMemberUpsertWithWhereUniqueWithoutUserInput | GroupMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GroupMemberCreateManyUserInputEnvelope
    set?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    disconnect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    delete?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    update?: GroupMemberUpdateWithWhereUniqueWithoutUserInput | GroupMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GroupMemberUpdateManyWithWhereWithoutUserInput | GroupMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSecurityLogCreateWithoutUserInput, UserSecurityLogUncheckedCreateWithoutUserInput> | UserSecurityLogCreateWithoutUserInput[] | UserSecurityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSecurityLogCreateOrConnectWithoutUserInput | UserSecurityLogCreateOrConnectWithoutUserInput[]
    upsert?: UserSecurityLogUpsertWithWhereUniqueWithoutUserInput | UserSecurityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSecurityLogCreateManyUserInputEnvelope
    set?: UserSecurityLogWhereUniqueInput | UserSecurityLogWhereUniqueInput[]
    disconnect?: UserSecurityLogWhereUniqueInput | UserSecurityLogWhereUniqueInput[]
    delete?: UserSecurityLogWhereUniqueInput | UserSecurityLogWhereUniqueInput[]
    connect?: UserSecurityLogWhereUniqueInput | UserSecurityLogWhereUniqueInput[]
    update?: UserSecurityLogUpdateWithWhereUniqueWithoutUserInput | UserSecurityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSecurityLogUpdateManyWithWhereWithoutUserInput | UserSecurityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSecurityLogScalarWhereInput | UserSecurityLogScalarWhereInput[]
  }

  export type DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<DiscussionPostCreateWithoutAuthorInput, DiscussionPostUncheckedCreateWithoutAuthorInput> | DiscussionPostCreateWithoutAuthorInput[] | DiscussionPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutAuthorInput | DiscussionPostCreateOrConnectWithoutAuthorInput[]
    upsert?: DiscussionPostUpsertWithWhereUniqueWithoutAuthorInput | DiscussionPostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: DiscussionPostCreateManyAuthorInputEnvelope
    set?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    disconnect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    delete?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    update?: DiscussionPostUpdateWithWhereUniqueWithoutAuthorInput | DiscussionPostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: DiscussionPostUpdateManyWithWhereWithoutAuthorInput | DiscussionPostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: DiscussionPostScalarWhereInput | DiscussionPostScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ReactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput> | ReactionCreateWithoutUserInput[] | ReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutUserInput | ReactionCreateOrConnectWithoutUserInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutUserInput | ReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReactionCreateManyUserInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutUserInput | ReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutUserInput | ReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<FileCreateWithoutUploaderInput, FileUncheckedCreateWithoutUploaderInput> | FileCreateWithoutUploaderInput[] | FileUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUploaderInput | FileCreateOrConnectWithoutUploaderInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUploaderInput | FileUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: FileCreateManyUploaderInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUploaderInput | FileUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUploaderInput | FileUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type PinnedItemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PinnedItemCreateWithoutUserInput, PinnedItemUncheckedCreateWithoutUserInput> | PinnedItemCreateWithoutUserInput[] | PinnedItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PinnedItemCreateOrConnectWithoutUserInput | PinnedItemCreateOrConnectWithoutUserInput[]
    upsert?: PinnedItemUpsertWithWhereUniqueWithoutUserInput | PinnedItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PinnedItemCreateManyUserInputEnvelope
    set?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    disconnect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    delete?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    connect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    update?: PinnedItemUpdateWithWhereUniqueWithoutUserInput | PinnedItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PinnedItemUpdateManyWithWhereWithoutUserInput | PinnedItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PinnedItemScalarWhereInput | PinnedItemScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput> | TaskCreateWithoutCreatorInput[] | TaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatorInput | TaskCreateOrConnectWithoutCreatorInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutCreatorInput | TaskUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TaskCreateManyCreatorInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutCreatorInput | TaskUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutCreatorInput | TaskUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput> | TaskAssignmentCreateWithoutUserInput[] | TaskAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutUserInput | TaskAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: TaskAssignmentUpsertWithWhereUniqueWithoutUserInput | TaskAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TaskAssignmentCreateManyUserInputEnvelope
    set?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    disconnect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    delete?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    update?: TaskAssignmentUpdateWithWhereUniqueWithoutUserInput | TaskAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TaskAssignmentUpdateManyWithWhereWithoutUserInput | TaskAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutOwnedGroupsInput = {
    create?: XOR<UserCreateWithoutOwnedGroupsInput, UserUncheckedCreateWithoutOwnedGroupsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedGroupsInput
    connect?: UserWhereUniqueInput
  }

  export type GroupMemberCreateNestedManyWithoutGroupInput = {
    create?: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput> | GroupMemberCreateWithoutGroupInput[] | GroupMemberUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutGroupInput | GroupMemberCreateOrConnectWithoutGroupInput[]
    createMany?: GroupMemberCreateManyGroupInputEnvelope
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutGroupInput = {
    create?: XOR<MessageCreateWithoutGroupInput, MessageUncheckedCreateWithoutGroupInput> | MessageCreateWithoutGroupInput[] | MessageUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutGroupInput | MessageCreateOrConnectWithoutGroupInput[]
    createMany?: MessageCreateManyGroupInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type DiscussionBoardCreateNestedManyWithoutGroupInput = {
    create?: XOR<DiscussionBoardCreateWithoutGroupInput, DiscussionBoardUncheckedCreateWithoutGroupInput> | DiscussionBoardCreateWithoutGroupInput[] | DiscussionBoardUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: DiscussionBoardCreateOrConnectWithoutGroupInput | DiscussionBoardCreateOrConnectWithoutGroupInput[]
    createMany?: DiscussionBoardCreateManyGroupInputEnvelope
    connect?: DiscussionBoardWhereUniqueInput | DiscussionBoardWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutGroupInput = {
    create?: XOR<FileCreateWithoutGroupInput, FileUncheckedCreateWithoutGroupInput> | FileCreateWithoutGroupInput[] | FileUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: FileCreateOrConnectWithoutGroupInput | FileCreateOrConnectWithoutGroupInput[]
    createMany?: FileCreateManyGroupInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type EncryptionKeyCreateNestedManyWithoutGroupInput = {
    create?: XOR<EncryptionKeyCreateWithoutGroupInput, EncryptionKeyUncheckedCreateWithoutGroupInput> | EncryptionKeyCreateWithoutGroupInput[] | EncryptionKeyUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EncryptionKeyCreateOrConnectWithoutGroupInput | EncryptionKeyCreateOrConnectWithoutGroupInput[]
    createMany?: EncryptionKeyCreateManyGroupInputEnvelope
    connect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
  }

  export type PinnedItemCreateNestedManyWithoutGroupInput = {
    create?: XOR<PinnedItemCreateWithoutGroupInput, PinnedItemUncheckedCreateWithoutGroupInput> | PinnedItemCreateWithoutGroupInput[] | PinnedItemUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: PinnedItemCreateOrConnectWithoutGroupInput | PinnedItemCreateOrConnectWithoutGroupInput[]
    createMany?: PinnedItemCreateManyGroupInputEnvelope
    connect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutGroupInput = {
    create?: XOR<TaskCreateWithoutGroupInput, TaskUncheckedCreateWithoutGroupInput> | TaskCreateWithoutGroupInput[] | TaskUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutGroupInput | TaskCreateOrConnectWithoutGroupInput[]
    createMany?: TaskCreateManyGroupInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type GroupMemberUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput> | GroupMemberCreateWithoutGroupInput[] | GroupMemberUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutGroupInput | GroupMemberCreateOrConnectWithoutGroupInput[]
    createMany?: GroupMemberCreateManyGroupInputEnvelope
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<MessageCreateWithoutGroupInput, MessageUncheckedCreateWithoutGroupInput> | MessageCreateWithoutGroupInput[] | MessageUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutGroupInput | MessageCreateOrConnectWithoutGroupInput[]
    createMany?: MessageCreateManyGroupInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type DiscussionBoardUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<DiscussionBoardCreateWithoutGroupInput, DiscussionBoardUncheckedCreateWithoutGroupInput> | DiscussionBoardCreateWithoutGroupInput[] | DiscussionBoardUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: DiscussionBoardCreateOrConnectWithoutGroupInput | DiscussionBoardCreateOrConnectWithoutGroupInput[]
    createMany?: DiscussionBoardCreateManyGroupInputEnvelope
    connect?: DiscussionBoardWhereUniqueInput | DiscussionBoardWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<FileCreateWithoutGroupInput, FileUncheckedCreateWithoutGroupInput> | FileCreateWithoutGroupInput[] | FileUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: FileCreateOrConnectWithoutGroupInput | FileCreateOrConnectWithoutGroupInput[]
    createMany?: FileCreateManyGroupInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type EncryptionKeyUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<EncryptionKeyCreateWithoutGroupInput, EncryptionKeyUncheckedCreateWithoutGroupInput> | EncryptionKeyCreateWithoutGroupInput[] | EncryptionKeyUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EncryptionKeyCreateOrConnectWithoutGroupInput | EncryptionKeyCreateOrConnectWithoutGroupInput[]
    createMany?: EncryptionKeyCreateManyGroupInputEnvelope
    connect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
  }

  export type PinnedItemUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<PinnedItemCreateWithoutGroupInput, PinnedItemUncheckedCreateWithoutGroupInput> | PinnedItemCreateWithoutGroupInput[] | PinnedItemUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: PinnedItemCreateOrConnectWithoutGroupInput | PinnedItemCreateOrConnectWithoutGroupInput[]
    createMany?: PinnedItemCreateManyGroupInputEnvelope
    connect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<TaskCreateWithoutGroupInput, TaskUncheckedCreateWithoutGroupInput> | TaskCreateWithoutGroupInput[] | TaskUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutGroupInput | TaskCreateOrConnectWithoutGroupInput[]
    createMany?: TaskCreateManyGroupInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutOwnedGroupsNestedInput = {
    create?: XOR<UserCreateWithoutOwnedGroupsInput, UserUncheckedCreateWithoutOwnedGroupsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedGroupsInput
    upsert?: UserUpsertWithoutOwnedGroupsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedGroupsInput, UserUpdateWithoutOwnedGroupsInput>, UserUncheckedUpdateWithoutOwnedGroupsInput>
  }

  export type GroupMemberUpdateManyWithoutGroupNestedInput = {
    create?: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput> | GroupMemberCreateWithoutGroupInput[] | GroupMemberUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutGroupInput | GroupMemberCreateOrConnectWithoutGroupInput[]
    upsert?: GroupMemberUpsertWithWhereUniqueWithoutGroupInput | GroupMemberUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: GroupMemberCreateManyGroupInputEnvelope
    set?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    disconnect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    delete?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    update?: GroupMemberUpdateWithWhereUniqueWithoutGroupInput | GroupMemberUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: GroupMemberUpdateManyWithWhereWithoutGroupInput | GroupMemberUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutGroupNestedInput = {
    create?: XOR<MessageCreateWithoutGroupInput, MessageUncheckedCreateWithoutGroupInput> | MessageCreateWithoutGroupInput[] | MessageUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutGroupInput | MessageCreateOrConnectWithoutGroupInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutGroupInput | MessageUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: MessageCreateManyGroupInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutGroupInput | MessageUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutGroupInput | MessageUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type DiscussionBoardUpdateManyWithoutGroupNestedInput = {
    create?: XOR<DiscussionBoardCreateWithoutGroupInput, DiscussionBoardUncheckedCreateWithoutGroupInput> | DiscussionBoardCreateWithoutGroupInput[] | DiscussionBoardUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: DiscussionBoardCreateOrConnectWithoutGroupInput | DiscussionBoardCreateOrConnectWithoutGroupInput[]
    upsert?: DiscussionBoardUpsertWithWhereUniqueWithoutGroupInput | DiscussionBoardUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: DiscussionBoardCreateManyGroupInputEnvelope
    set?: DiscussionBoardWhereUniqueInput | DiscussionBoardWhereUniqueInput[]
    disconnect?: DiscussionBoardWhereUniqueInput | DiscussionBoardWhereUniqueInput[]
    delete?: DiscussionBoardWhereUniqueInput | DiscussionBoardWhereUniqueInput[]
    connect?: DiscussionBoardWhereUniqueInput | DiscussionBoardWhereUniqueInput[]
    update?: DiscussionBoardUpdateWithWhereUniqueWithoutGroupInput | DiscussionBoardUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: DiscussionBoardUpdateManyWithWhereWithoutGroupInput | DiscussionBoardUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: DiscussionBoardScalarWhereInput | DiscussionBoardScalarWhereInput[]
  }

  export type FileUpdateManyWithoutGroupNestedInput = {
    create?: XOR<FileCreateWithoutGroupInput, FileUncheckedCreateWithoutGroupInput> | FileCreateWithoutGroupInput[] | FileUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: FileCreateOrConnectWithoutGroupInput | FileCreateOrConnectWithoutGroupInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutGroupInput | FileUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: FileCreateManyGroupInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutGroupInput | FileUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: FileUpdateManyWithWhereWithoutGroupInput | FileUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type EncryptionKeyUpdateManyWithoutGroupNestedInput = {
    create?: XOR<EncryptionKeyCreateWithoutGroupInput, EncryptionKeyUncheckedCreateWithoutGroupInput> | EncryptionKeyCreateWithoutGroupInput[] | EncryptionKeyUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EncryptionKeyCreateOrConnectWithoutGroupInput | EncryptionKeyCreateOrConnectWithoutGroupInput[]
    upsert?: EncryptionKeyUpsertWithWhereUniqueWithoutGroupInput | EncryptionKeyUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: EncryptionKeyCreateManyGroupInputEnvelope
    set?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    disconnect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    delete?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    connect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    update?: EncryptionKeyUpdateWithWhereUniqueWithoutGroupInput | EncryptionKeyUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: EncryptionKeyUpdateManyWithWhereWithoutGroupInput | EncryptionKeyUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: EncryptionKeyScalarWhereInput | EncryptionKeyScalarWhereInput[]
  }

  export type PinnedItemUpdateManyWithoutGroupNestedInput = {
    create?: XOR<PinnedItemCreateWithoutGroupInput, PinnedItemUncheckedCreateWithoutGroupInput> | PinnedItemCreateWithoutGroupInput[] | PinnedItemUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: PinnedItemCreateOrConnectWithoutGroupInput | PinnedItemCreateOrConnectWithoutGroupInput[]
    upsert?: PinnedItemUpsertWithWhereUniqueWithoutGroupInput | PinnedItemUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: PinnedItemCreateManyGroupInputEnvelope
    set?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    disconnect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    delete?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    connect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    update?: PinnedItemUpdateWithWhereUniqueWithoutGroupInput | PinnedItemUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: PinnedItemUpdateManyWithWhereWithoutGroupInput | PinnedItemUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: PinnedItemScalarWhereInput | PinnedItemScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutGroupNestedInput = {
    create?: XOR<TaskCreateWithoutGroupInput, TaskUncheckedCreateWithoutGroupInput> | TaskCreateWithoutGroupInput[] | TaskUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutGroupInput | TaskCreateOrConnectWithoutGroupInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutGroupInput | TaskUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: TaskCreateManyGroupInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutGroupInput | TaskUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutGroupInput | TaskUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type GroupMemberUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput> | GroupMemberCreateWithoutGroupInput[] | GroupMemberUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupMemberCreateOrConnectWithoutGroupInput | GroupMemberCreateOrConnectWithoutGroupInput[]
    upsert?: GroupMemberUpsertWithWhereUniqueWithoutGroupInput | GroupMemberUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: GroupMemberCreateManyGroupInputEnvelope
    set?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    disconnect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    delete?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    connect?: GroupMemberWhereUniqueInput | GroupMemberWhereUniqueInput[]
    update?: GroupMemberUpdateWithWhereUniqueWithoutGroupInput | GroupMemberUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: GroupMemberUpdateManyWithWhereWithoutGroupInput | GroupMemberUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<MessageCreateWithoutGroupInput, MessageUncheckedCreateWithoutGroupInput> | MessageCreateWithoutGroupInput[] | MessageUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutGroupInput | MessageCreateOrConnectWithoutGroupInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutGroupInput | MessageUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: MessageCreateManyGroupInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutGroupInput | MessageUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutGroupInput | MessageUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type DiscussionBoardUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<DiscussionBoardCreateWithoutGroupInput, DiscussionBoardUncheckedCreateWithoutGroupInput> | DiscussionBoardCreateWithoutGroupInput[] | DiscussionBoardUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: DiscussionBoardCreateOrConnectWithoutGroupInput | DiscussionBoardCreateOrConnectWithoutGroupInput[]
    upsert?: DiscussionBoardUpsertWithWhereUniqueWithoutGroupInput | DiscussionBoardUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: DiscussionBoardCreateManyGroupInputEnvelope
    set?: DiscussionBoardWhereUniqueInput | DiscussionBoardWhereUniqueInput[]
    disconnect?: DiscussionBoardWhereUniqueInput | DiscussionBoardWhereUniqueInput[]
    delete?: DiscussionBoardWhereUniqueInput | DiscussionBoardWhereUniqueInput[]
    connect?: DiscussionBoardWhereUniqueInput | DiscussionBoardWhereUniqueInput[]
    update?: DiscussionBoardUpdateWithWhereUniqueWithoutGroupInput | DiscussionBoardUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: DiscussionBoardUpdateManyWithWhereWithoutGroupInput | DiscussionBoardUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: DiscussionBoardScalarWhereInput | DiscussionBoardScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<FileCreateWithoutGroupInput, FileUncheckedCreateWithoutGroupInput> | FileCreateWithoutGroupInput[] | FileUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: FileCreateOrConnectWithoutGroupInput | FileCreateOrConnectWithoutGroupInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutGroupInput | FileUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: FileCreateManyGroupInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutGroupInput | FileUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: FileUpdateManyWithWhereWithoutGroupInput | FileUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type EncryptionKeyUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<EncryptionKeyCreateWithoutGroupInput, EncryptionKeyUncheckedCreateWithoutGroupInput> | EncryptionKeyCreateWithoutGroupInput[] | EncryptionKeyUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EncryptionKeyCreateOrConnectWithoutGroupInput | EncryptionKeyCreateOrConnectWithoutGroupInput[]
    upsert?: EncryptionKeyUpsertWithWhereUniqueWithoutGroupInput | EncryptionKeyUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: EncryptionKeyCreateManyGroupInputEnvelope
    set?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    disconnect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    delete?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    connect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    update?: EncryptionKeyUpdateWithWhereUniqueWithoutGroupInput | EncryptionKeyUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: EncryptionKeyUpdateManyWithWhereWithoutGroupInput | EncryptionKeyUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: EncryptionKeyScalarWhereInput | EncryptionKeyScalarWhereInput[]
  }

  export type PinnedItemUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<PinnedItemCreateWithoutGroupInput, PinnedItemUncheckedCreateWithoutGroupInput> | PinnedItemCreateWithoutGroupInput[] | PinnedItemUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: PinnedItemCreateOrConnectWithoutGroupInput | PinnedItemCreateOrConnectWithoutGroupInput[]
    upsert?: PinnedItemUpsertWithWhereUniqueWithoutGroupInput | PinnedItemUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: PinnedItemCreateManyGroupInputEnvelope
    set?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    disconnect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    delete?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    connect?: PinnedItemWhereUniqueInput | PinnedItemWhereUniqueInput[]
    update?: PinnedItemUpdateWithWhereUniqueWithoutGroupInput | PinnedItemUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: PinnedItemUpdateManyWithWhereWithoutGroupInput | PinnedItemUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: PinnedItemScalarWhereInput | PinnedItemScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<TaskCreateWithoutGroupInput, TaskUncheckedCreateWithoutGroupInput> | TaskCreateWithoutGroupInput[] | TaskUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutGroupInput | TaskCreateOrConnectWithoutGroupInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutGroupInput | TaskUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: TaskCreateManyGroupInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutGroupInput | TaskUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutGroupInput | TaskUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMemberOfGroupsInput = {
    create?: XOR<UserCreateWithoutMemberOfGroupsInput, UserUncheckedCreateWithoutMemberOfGroupsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemberOfGroupsInput
    connect?: UserWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutMembersInput = {
    create?: XOR<GroupCreateWithoutMembersInput, GroupUncheckedCreateWithoutMembersInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMembersInput
    connect?: GroupWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMemberOfGroupsNestedInput = {
    create?: XOR<UserCreateWithoutMemberOfGroupsInput, UserUncheckedCreateWithoutMemberOfGroupsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemberOfGroupsInput
    upsert?: UserUpsertWithoutMemberOfGroupsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMemberOfGroupsInput, UserUpdateWithoutMemberOfGroupsInput>, UserUncheckedUpdateWithoutMemberOfGroupsInput>
  }

  export type GroupUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<GroupCreateWithoutMembersInput, GroupUncheckedCreateWithoutMembersInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMembersInput
    upsert?: GroupUpsertWithoutMembersInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutMembersInput, GroupUpdateWithoutMembersInput>, GroupUncheckedUpdateWithoutMembersInput>
  }

  export type MessageReadCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageReadCreateWithoutMessageInput, MessageReadUncheckedCreateWithoutMessageInput> | MessageReadCreateWithoutMessageInput[] | MessageReadUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReadCreateOrConnectWithoutMessageInput | MessageReadCreateOrConnectWithoutMessageInput[]
    createMany?: MessageReadCreateManyMessageInputEnvelope
    connect?: MessageReadWhereUniqueInput | MessageReadWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutMessagesInput = {
    create?: XOR<GroupCreateWithoutMessagesInput, GroupUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMessagesInput
    connect?: GroupWhereUniqueInput
  }

  export type MessageCreateNestedOneWithoutRepliesInput = {
    create?: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: MessageCreateOrConnectWithoutRepliesInput
    connect?: MessageWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutReplyToInput = {
    create?: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput> | MessageCreateWithoutReplyToInput[] | MessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyToInput | MessageCreateOrConnectWithoutReplyToInput[]
    createMany?: MessageCreateManyReplyToInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutMessagesInput = {
    create?: XOR<FileCreateWithoutMessagesInput, FileUncheckedCreateWithoutMessagesInput> | FileCreateWithoutMessagesInput[] | FileUncheckedCreateWithoutMessagesInput[]
    connectOrCreate?: FileCreateOrConnectWithoutMessagesInput | FileCreateOrConnectWithoutMessagesInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type ReactionCreateNestedManyWithoutMessageInput = {
    create?: XOR<ReactionCreateWithoutMessageInput, ReactionUncheckedCreateWithoutMessageInput> | ReactionCreateWithoutMessageInput[] | ReactionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutMessageInput | ReactionCreateOrConnectWithoutMessageInput[]
    createMany?: ReactionCreateManyMessageInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type MessageReadUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageReadCreateWithoutMessageInput, MessageReadUncheckedCreateWithoutMessageInput> | MessageReadCreateWithoutMessageInput[] | MessageReadUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReadCreateOrConnectWithoutMessageInput | MessageReadCreateOrConnectWithoutMessageInput[]
    createMany?: MessageReadCreateManyMessageInputEnvelope
    connect?: MessageReadWhereUniqueInput | MessageReadWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReplyToInput = {
    create?: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput> | MessageCreateWithoutReplyToInput[] | MessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyToInput | MessageCreateOrConnectWithoutReplyToInput[]
    createMany?: MessageCreateManyReplyToInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutMessagesInput = {
    create?: XOR<FileCreateWithoutMessagesInput, FileUncheckedCreateWithoutMessagesInput> | FileCreateWithoutMessagesInput[] | FileUncheckedCreateWithoutMessagesInput[]
    connectOrCreate?: FileCreateOrConnectWithoutMessagesInput | FileCreateOrConnectWithoutMessagesInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type ReactionUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<ReactionCreateWithoutMessageInput, ReactionUncheckedCreateWithoutMessageInput> | ReactionCreateWithoutMessageInput[] | ReactionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutMessageInput | ReactionCreateOrConnectWithoutMessageInput[]
    createMany?: ReactionCreateManyMessageInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type MessageReadUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageReadCreateWithoutMessageInput, MessageReadUncheckedCreateWithoutMessageInput> | MessageReadCreateWithoutMessageInput[] | MessageReadUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReadCreateOrConnectWithoutMessageInput | MessageReadCreateOrConnectWithoutMessageInput[]
    upsert?: MessageReadUpsertWithWhereUniqueWithoutMessageInput | MessageReadUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageReadCreateManyMessageInputEnvelope
    set?: MessageReadWhereUniqueInput | MessageReadWhereUniqueInput[]
    disconnect?: MessageReadWhereUniqueInput | MessageReadWhereUniqueInput[]
    delete?: MessageReadWhereUniqueInput | MessageReadWhereUniqueInput[]
    connect?: MessageReadWhereUniqueInput | MessageReadWhereUniqueInput[]
    update?: MessageReadUpdateWithWhereUniqueWithoutMessageInput | MessageReadUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageReadUpdateManyWithWhereWithoutMessageInput | MessageReadUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageReadScalarWhereInput | MessageReadScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type GroupUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<GroupCreateWithoutMessagesInput, GroupUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMessagesInput
    upsert?: GroupUpsertWithoutMessagesInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutMessagesInput, GroupUpdateWithoutMessagesInput>, GroupUncheckedUpdateWithoutMessagesInput>
  }

  export type MessageUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: MessageCreateOrConnectWithoutRepliesInput
    upsert?: MessageUpsertWithoutRepliesInput
    disconnect?: MessageWhereInput | boolean
    delete?: MessageWhereInput | boolean
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutRepliesInput, MessageUpdateWithoutRepliesInput>, MessageUncheckedUpdateWithoutRepliesInput>
  }

  export type MessageUpdateManyWithoutReplyToNestedInput = {
    create?: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput> | MessageCreateWithoutReplyToInput[] | MessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyToInput | MessageCreateOrConnectWithoutReplyToInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReplyToInput | MessageUpsertWithWhereUniqueWithoutReplyToInput[]
    createMany?: MessageCreateManyReplyToInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReplyToInput | MessageUpdateWithWhereUniqueWithoutReplyToInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReplyToInput | MessageUpdateManyWithWhereWithoutReplyToInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileUpdateManyWithoutMessagesNestedInput = {
    create?: XOR<FileCreateWithoutMessagesInput, FileUncheckedCreateWithoutMessagesInput> | FileCreateWithoutMessagesInput[] | FileUncheckedCreateWithoutMessagesInput[]
    connectOrCreate?: FileCreateOrConnectWithoutMessagesInput | FileCreateOrConnectWithoutMessagesInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutMessagesInput | FileUpsertWithWhereUniqueWithoutMessagesInput[]
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutMessagesInput | FileUpdateWithWhereUniqueWithoutMessagesInput[]
    updateMany?: FileUpdateManyWithWhereWithoutMessagesInput | FileUpdateManyWithWhereWithoutMessagesInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ReactionUpdateManyWithoutMessageNestedInput = {
    create?: XOR<ReactionCreateWithoutMessageInput, ReactionUncheckedCreateWithoutMessageInput> | ReactionCreateWithoutMessageInput[] | ReactionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutMessageInput | ReactionCreateOrConnectWithoutMessageInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutMessageInput | ReactionUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: ReactionCreateManyMessageInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutMessageInput | ReactionUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutMessageInput | ReactionUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type MessageReadUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageReadCreateWithoutMessageInput, MessageReadUncheckedCreateWithoutMessageInput> | MessageReadCreateWithoutMessageInput[] | MessageReadUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReadCreateOrConnectWithoutMessageInput | MessageReadCreateOrConnectWithoutMessageInput[]
    upsert?: MessageReadUpsertWithWhereUniqueWithoutMessageInput | MessageReadUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageReadCreateManyMessageInputEnvelope
    set?: MessageReadWhereUniqueInput | MessageReadWhereUniqueInput[]
    disconnect?: MessageReadWhereUniqueInput | MessageReadWhereUniqueInput[]
    delete?: MessageReadWhereUniqueInput | MessageReadWhereUniqueInput[]
    connect?: MessageReadWhereUniqueInput | MessageReadWhereUniqueInput[]
    update?: MessageReadUpdateWithWhereUniqueWithoutMessageInput | MessageReadUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageReadUpdateManyWithWhereWithoutMessageInput | MessageReadUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageReadScalarWhereInput | MessageReadScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReplyToNestedInput = {
    create?: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput> | MessageCreateWithoutReplyToInput[] | MessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyToInput | MessageCreateOrConnectWithoutReplyToInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReplyToInput | MessageUpsertWithWhereUniqueWithoutReplyToInput[]
    createMany?: MessageCreateManyReplyToInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReplyToInput | MessageUpdateWithWhereUniqueWithoutReplyToInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReplyToInput | MessageUpdateManyWithWhereWithoutReplyToInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutMessagesNestedInput = {
    create?: XOR<FileCreateWithoutMessagesInput, FileUncheckedCreateWithoutMessagesInput> | FileCreateWithoutMessagesInput[] | FileUncheckedCreateWithoutMessagesInput[]
    connectOrCreate?: FileCreateOrConnectWithoutMessagesInput | FileCreateOrConnectWithoutMessagesInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutMessagesInput | FileUpsertWithWhereUniqueWithoutMessagesInput[]
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutMessagesInput | FileUpdateWithWhereUniqueWithoutMessagesInput[]
    updateMany?: FileUpdateManyWithWhereWithoutMessagesInput | FileUpdateManyWithWhereWithoutMessagesInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ReactionUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<ReactionCreateWithoutMessageInput, ReactionUncheckedCreateWithoutMessageInput> | ReactionCreateWithoutMessageInput[] | ReactionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutMessageInput | ReactionCreateOrConnectWithoutMessageInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutMessageInput | ReactionUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: ReactionCreateManyMessageInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutMessageInput | ReactionUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutMessageInput | ReactionUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type MessageCreateNestedOneWithoutReadByInput = {
    create?: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput>
    connectOrCreate?: MessageCreateOrConnectWithoutReadByInput
    connect?: MessageWhereUniqueInput
  }

  export type MessageUpdateOneRequiredWithoutReadByNestedInput = {
    create?: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput>
    connectOrCreate?: MessageCreateOrConnectWithoutReadByInput
    upsert?: MessageUpsertWithoutReadByInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutReadByInput, MessageUpdateWithoutReadByInput>, MessageUncheckedUpdateWithoutReadByInput>
  }

  export type UserCreateNestedOneWithoutUserSecurityLogsInput = {
    create?: XOR<UserCreateWithoutUserSecurityLogsInput, UserUncheckedCreateWithoutUserSecurityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSecurityLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserSecurityLogsNestedInput = {
    create?: XOR<UserCreateWithoutUserSecurityLogsInput, UserUncheckedCreateWithoutUserSecurityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSecurityLogsInput
    upsert?: UserUpsertWithoutUserSecurityLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserSecurityLogsInput, UserUpdateWithoutUserSecurityLogsInput>, UserUncheckedUpdateWithoutUserSecurityLogsInput>
  }

  export type GroupCreateNestedOneWithoutEncryptionKeysInput = {
    create?: XOR<GroupCreateWithoutEncryptionKeysInput, GroupUncheckedCreateWithoutEncryptionKeysInput>
    connectOrCreate?: GroupCreateOrConnectWithoutEncryptionKeysInput
    connect?: GroupWhereUniqueInput
  }

  export type EncryptionKeyCreateNestedOneWithoutRelatedToInput = {
    create?: XOR<EncryptionKeyCreateWithoutRelatedToInput, EncryptionKeyUncheckedCreateWithoutRelatedToInput>
    connectOrCreate?: EncryptionKeyCreateOrConnectWithoutRelatedToInput
    connect?: EncryptionKeyWhereUniqueInput
  }

  export type EncryptionKeyCreateNestedManyWithoutRelatedKeyInput = {
    create?: XOR<EncryptionKeyCreateWithoutRelatedKeyInput, EncryptionKeyUncheckedCreateWithoutRelatedKeyInput> | EncryptionKeyCreateWithoutRelatedKeyInput[] | EncryptionKeyUncheckedCreateWithoutRelatedKeyInput[]
    connectOrCreate?: EncryptionKeyCreateOrConnectWithoutRelatedKeyInput | EncryptionKeyCreateOrConnectWithoutRelatedKeyInput[]
    createMany?: EncryptionKeyCreateManyRelatedKeyInputEnvelope
    connect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
  }

  export type EncryptionKeyUncheckedCreateNestedManyWithoutRelatedKeyInput = {
    create?: XOR<EncryptionKeyCreateWithoutRelatedKeyInput, EncryptionKeyUncheckedCreateWithoutRelatedKeyInput> | EncryptionKeyCreateWithoutRelatedKeyInput[] | EncryptionKeyUncheckedCreateWithoutRelatedKeyInput[]
    connectOrCreate?: EncryptionKeyCreateOrConnectWithoutRelatedKeyInput | EncryptionKeyCreateOrConnectWithoutRelatedKeyInput[]
    createMany?: EncryptionKeyCreateManyRelatedKeyInputEnvelope
    connect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
  }

  export type GroupUpdateOneWithoutEncryptionKeysNestedInput = {
    create?: XOR<GroupCreateWithoutEncryptionKeysInput, GroupUncheckedCreateWithoutEncryptionKeysInput>
    connectOrCreate?: GroupCreateOrConnectWithoutEncryptionKeysInput
    upsert?: GroupUpsertWithoutEncryptionKeysInput
    disconnect?: GroupWhereInput | boolean
    delete?: GroupWhereInput | boolean
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutEncryptionKeysInput, GroupUpdateWithoutEncryptionKeysInput>, GroupUncheckedUpdateWithoutEncryptionKeysInput>
  }

  export type EncryptionKeyUpdateOneWithoutRelatedToNestedInput = {
    create?: XOR<EncryptionKeyCreateWithoutRelatedToInput, EncryptionKeyUncheckedCreateWithoutRelatedToInput>
    connectOrCreate?: EncryptionKeyCreateOrConnectWithoutRelatedToInput
    upsert?: EncryptionKeyUpsertWithoutRelatedToInput
    disconnect?: EncryptionKeyWhereInput | boolean
    delete?: EncryptionKeyWhereInput | boolean
    connect?: EncryptionKeyWhereUniqueInput
    update?: XOR<XOR<EncryptionKeyUpdateToOneWithWhereWithoutRelatedToInput, EncryptionKeyUpdateWithoutRelatedToInput>, EncryptionKeyUncheckedUpdateWithoutRelatedToInput>
  }

  export type EncryptionKeyUpdateManyWithoutRelatedKeyNestedInput = {
    create?: XOR<EncryptionKeyCreateWithoutRelatedKeyInput, EncryptionKeyUncheckedCreateWithoutRelatedKeyInput> | EncryptionKeyCreateWithoutRelatedKeyInput[] | EncryptionKeyUncheckedCreateWithoutRelatedKeyInput[]
    connectOrCreate?: EncryptionKeyCreateOrConnectWithoutRelatedKeyInput | EncryptionKeyCreateOrConnectWithoutRelatedKeyInput[]
    upsert?: EncryptionKeyUpsertWithWhereUniqueWithoutRelatedKeyInput | EncryptionKeyUpsertWithWhereUniqueWithoutRelatedKeyInput[]
    createMany?: EncryptionKeyCreateManyRelatedKeyInputEnvelope
    set?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    disconnect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    delete?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    connect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    update?: EncryptionKeyUpdateWithWhereUniqueWithoutRelatedKeyInput | EncryptionKeyUpdateWithWhereUniqueWithoutRelatedKeyInput[]
    updateMany?: EncryptionKeyUpdateManyWithWhereWithoutRelatedKeyInput | EncryptionKeyUpdateManyWithWhereWithoutRelatedKeyInput[]
    deleteMany?: EncryptionKeyScalarWhereInput | EncryptionKeyScalarWhereInput[]
  }

  export type EncryptionKeyUncheckedUpdateManyWithoutRelatedKeyNestedInput = {
    create?: XOR<EncryptionKeyCreateWithoutRelatedKeyInput, EncryptionKeyUncheckedCreateWithoutRelatedKeyInput> | EncryptionKeyCreateWithoutRelatedKeyInput[] | EncryptionKeyUncheckedCreateWithoutRelatedKeyInput[]
    connectOrCreate?: EncryptionKeyCreateOrConnectWithoutRelatedKeyInput | EncryptionKeyCreateOrConnectWithoutRelatedKeyInput[]
    upsert?: EncryptionKeyUpsertWithWhereUniqueWithoutRelatedKeyInput | EncryptionKeyUpsertWithWhereUniqueWithoutRelatedKeyInput[]
    createMany?: EncryptionKeyCreateManyRelatedKeyInputEnvelope
    set?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    disconnect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    delete?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    connect?: EncryptionKeyWhereUniqueInput | EncryptionKeyWhereUniqueInput[]
    update?: EncryptionKeyUpdateWithWhereUniqueWithoutRelatedKeyInput | EncryptionKeyUpdateWithWhereUniqueWithoutRelatedKeyInput[]
    updateMany?: EncryptionKeyUpdateManyWithWhereWithoutRelatedKeyInput | EncryptionKeyUpdateManyWithWhereWithoutRelatedKeyInput[]
    deleteMany?: EncryptionKeyScalarWhereInput | EncryptionKeyScalarWhereInput[]
  }

  export type GroupCreateNestedOneWithoutDiscussionBoardsInput = {
    create?: XOR<GroupCreateWithoutDiscussionBoardsInput, GroupUncheckedCreateWithoutDiscussionBoardsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutDiscussionBoardsInput
    connect?: GroupWhereUniqueInput
  }

  export type DiscussionPostCreateNestedManyWithoutBoardInput = {
    create?: XOR<DiscussionPostCreateWithoutBoardInput, DiscussionPostUncheckedCreateWithoutBoardInput> | DiscussionPostCreateWithoutBoardInput[] | DiscussionPostUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutBoardInput | DiscussionPostCreateOrConnectWithoutBoardInput[]
    createMany?: DiscussionPostCreateManyBoardInputEnvelope
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
  }

  export type DiscussionPostUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<DiscussionPostCreateWithoutBoardInput, DiscussionPostUncheckedCreateWithoutBoardInput> | DiscussionPostCreateWithoutBoardInput[] | DiscussionPostUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutBoardInput | DiscussionPostCreateOrConnectWithoutBoardInput[]
    createMany?: DiscussionPostCreateManyBoardInputEnvelope
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GroupUpdateOneRequiredWithoutDiscussionBoardsNestedInput = {
    create?: XOR<GroupCreateWithoutDiscussionBoardsInput, GroupUncheckedCreateWithoutDiscussionBoardsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutDiscussionBoardsInput
    upsert?: GroupUpsertWithoutDiscussionBoardsInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutDiscussionBoardsInput, GroupUpdateWithoutDiscussionBoardsInput>, GroupUncheckedUpdateWithoutDiscussionBoardsInput>
  }

  export type DiscussionPostUpdateManyWithoutBoardNestedInput = {
    create?: XOR<DiscussionPostCreateWithoutBoardInput, DiscussionPostUncheckedCreateWithoutBoardInput> | DiscussionPostCreateWithoutBoardInput[] | DiscussionPostUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutBoardInput | DiscussionPostCreateOrConnectWithoutBoardInput[]
    upsert?: DiscussionPostUpsertWithWhereUniqueWithoutBoardInput | DiscussionPostUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: DiscussionPostCreateManyBoardInputEnvelope
    set?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    disconnect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    delete?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    update?: DiscussionPostUpdateWithWhereUniqueWithoutBoardInput | DiscussionPostUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: DiscussionPostUpdateManyWithWhereWithoutBoardInput | DiscussionPostUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: DiscussionPostScalarWhereInput | DiscussionPostScalarWhereInput[]
  }

  export type DiscussionPostUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<DiscussionPostCreateWithoutBoardInput, DiscussionPostUncheckedCreateWithoutBoardInput> | DiscussionPostCreateWithoutBoardInput[] | DiscussionPostUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutBoardInput | DiscussionPostCreateOrConnectWithoutBoardInput[]
    upsert?: DiscussionPostUpsertWithWhereUniqueWithoutBoardInput | DiscussionPostUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: DiscussionPostCreateManyBoardInputEnvelope
    set?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    disconnect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    delete?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    update?: DiscussionPostUpdateWithWhereUniqueWithoutBoardInput | DiscussionPostUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: DiscussionPostUpdateManyWithWhereWithoutBoardInput | DiscussionPostUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: DiscussionPostScalarWhereInput | DiscussionPostScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    connect?: UserWhereUniqueInput
  }

  export type DiscussionBoardCreateNestedOneWithoutPostsInput = {
    create?: XOR<DiscussionBoardCreateWithoutPostsInput, DiscussionBoardUncheckedCreateWithoutPostsInput>
    connectOrCreate?: DiscussionBoardCreateOrConnectWithoutPostsInput
    connect?: DiscussionBoardWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutPostsInput = {
    create?: XOR<FileCreateWithoutPostsInput, FileUncheckedCreateWithoutPostsInput> | FileCreateWithoutPostsInput[] | FileUncheckedCreateWithoutPostsInput[]
    connectOrCreate?: FileCreateOrConnectWithoutPostsInput | FileCreateOrConnectWithoutPostsInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type ReactionCreateNestedManyWithoutPostInput = {
    create?: XOR<ReactionCreateWithoutPostInput, ReactionUncheckedCreateWithoutPostInput> | ReactionCreateWithoutPostInput[] | ReactionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutPostInput | ReactionCreateOrConnectWithoutPostInput[]
    createMany?: ReactionCreateManyPostInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutPostsInput = {
    create?: XOR<FileCreateWithoutPostsInput, FileUncheckedCreateWithoutPostsInput> | FileCreateWithoutPostsInput[] | FileUncheckedCreateWithoutPostsInput[]
    connectOrCreate?: FileCreateOrConnectWithoutPostsInput | FileCreateOrConnectWithoutPostsInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type ReactionUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ReactionCreateWithoutPostInput, ReactionUncheckedCreateWithoutPostInput> | ReactionCreateWithoutPostInput[] | ReactionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutPostInput | ReactionCreateOrConnectWithoutPostInput[]
    createMany?: ReactionCreateManyPostInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    upsert?: UserUpsertWithoutPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostsInput, UserUpdateWithoutPostsInput>, UserUncheckedUpdateWithoutPostsInput>
  }

  export type DiscussionBoardUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<DiscussionBoardCreateWithoutPostsInput, DiscussionBoardUncheckedCreateWithoutPostsInput>
    connectOrCreate?: DiscussionBoardCreateOrConnectWithoutPostsInput
    upsert?: DiscussionBoardUpsertWithoutPostsInput
    connect?: DiscussionBoardWhereUniqueInput
    update?: XOR<XOR<DiscussionBoardUpdateToOneWithWhereWithoutPostsInput, DiscussionBoardUpdateWithoutPostsInput>, DiscussionBoardUncheckedUpdateWithoutPostsInput>
  }

  export type CommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type FileUpdateManyWithoutPostsNestedInput = {
    create?: XOR<FileCreateWithoutPostsInput, FileUncheckedCreateWithoutPostsInput> | FileCreateWithoutPostsInput[] | FileUncheckedCreateWithoutPostsInput[]
    connectOrCreate?: FileCreateOrConnectWithoutPostsInput | FileCreateOrConnectWithoutPostsInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutPostsInput | FileUpsertWithWhereUniqueWithoutPostsInput[]
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutPostsInput | FileUpdateWithWhereUniqueWithoutPostsInput[]
    updateMany?: FileUpdateManyWithWhereWithoutPostsInput | FileUpdateManyWithWhereWithoutPostsInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ReactionUpdateManyWithoutPostNestedInput = {
    create?: XOR<ReactionCreateWithoutPostInput, ReactionUncheckedCreateWithoutPostInput> | ReactionCreateWithoutPostInput[] | ReactionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutPostInput | ReactionCreateOrConnectWithoutPostInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutPostInput | ReactionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ReactionCreateManyPostInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutPostInput | ReactionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutPostInput | ReactionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutPostsNestedInput = {
    create?: XOR<FileCreateWithoutPostsInput, FileUncheckedCreateWithoutPostsInput> | FileCreateWithoutPostsInput[] | FileUncheckedCreateWithoutPostsInput[]
    connectOrCreate?: FileCreateOrConnectWithoutPostsInput | FileCreateOrConnectWithoutPostsInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutPostsInput | FileUpsertWithWhereUniqueWithoutPostsInput[]
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutPostsInput | FileUpdateWithWhereUniqueWithoutPostsInput[]
    updateMany?: FileUpdateManyWithWhereWithoutPostsInput | FileUpdateManyWithWhereWithoutPostsInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ReactionUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ReactionCreateWithoutPostInput, ReactionUncheckedCreateWithoutPostInput> | ReactionCreateWithoutPostInput[] | ReactionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutPostInput | ReactionCreateOrConnectWithoutPostInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutPostInput | ReactionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ReactionCreateManyPostInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutPostInput | ReactionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutPostInput | ReactionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type DiscussionPostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<DiscussionPostCreateWithoutCommentsInput, DiscussionPostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutCommentsInput
    connect?: DiscussionPostWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutCommentsInput = {
    create?: XOR<FileCreateWithoutCommentsInput, FileUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FileCreateOrConnectWithoutCommentsInput
    connect?: FileWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutRepliesInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    connect?: CommentWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutParentCommentInput = {
    create?: XOR<CommentCreateWithoutParentCommentInput, CommentUncheckedCreateWithoutParentCommentInput> | CommentCreateWithoutParentCommentInput[] | CommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentCommentInput | CommentCreateOrConnectWithoutParentCommentInput[]
    createMany?: CommentCreateManyParentCommentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ReactionCreateNestedManyWithoutCommentInput = {
    create?: XOR<ReactionCreateWithoutCommentInput, ReactionUncheckedCreateWithoutCommentInput> | ReactionCreateWithoutCommentInput[] | ReactionUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutCommentInput | ReactionCreateOrConnectWithoutCommentInput[]
    createMany?: ReactionCreateManyCommentInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutParentCommentInput = {
    create?: XOR<CommentCreateWithoutParentCommentInput, CommentUncheckedCreateWithoutParentCommentInput> | CommentCreateWithoutParentCommentInput[] | CommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentCommentInput | CommentCreateOrConnectWithoutParentCommentInput[]
    createMany?: CommentCreateManyParentCommentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ReactionUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<ReactionCreateWithoutCommentInput, ReactionUncheckedCreateWithoutCommentInput> | ReactionCreateWithoutCommentInput[] | ReactionUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutCommentInput | ReactionCreateOrConnectWithoutCommentInput[]
    createMany?: ReactionCreateManyCommentInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type DiscussionPostUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<DiscussionPostCreateWithoutCommentsInput, DiscussionPostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutCommentsInput
    upsert?: DiscussionPostUpsertWithoutCommentsInput
    disconnect?: DiscussionPostWhereInput | boolean
    delete?: DiscussionPostWhereInput | boolean
    connect?: DiscussionPostWhereUniqueInput
    update?: XOR<XOR<DiscussionPostUpdateToOneWithWhereWithoutCommentsInput, DiscussionPostUpdateWithoutCommentsInput>, DiscussionPostUncheckedUpdateWithoutCommentsInput>
  }

  export type FileUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<FileCreateWithoutCommentsInput, FileUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FileCreateOrConnectWithoutCommentsInput
    upsert?: FileUpsertWithoutCommentsInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutCommentsInput, FileUpdateWithoutCommentsInput>, FileUncheckedUpdateWithoutCommentsInput>
  }

  export type CommentUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    upsert?: CommentUpsertWithoutRepliesInput
    disconnect?: CommentWhereInput | boolean
    delete?: CommentWhereInput | boolean
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutRepliesInput, CommentUpdateWithoutRepliesInput>, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateManyWithoutParentCommentNestedInput = {
    create?: XOR<CommentCreateWithoutParentCommentInput, CommentUncheckedCreateWithoutParentCommentInput> | CommentCreateWithoutParentCommentInput[] | CommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentCommentInput | CommentCreateOrConnectWithoutParentCommentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentCommentInput | CommentUpsertWithWhereUniqueWithoutParentCommentInput[]
    createMany?: CommentCreateManyParentCommentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentCommentInput | CommentUpdateWithWhereUniqueWithoutParentCommentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentCommentInput | CommentUpdateManyWithWhereWithoutParentCommentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ReactionUpdateManyWithoutCommentNestedInput = {
    create?: XOR<ReactionCreateWithoutCommentInput, ReactionUncheckedCreateWithoutCommentInput> | ReactionCreateWithoutCommentInput[] | ReactionUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutCommentInput | ReactionCreateOrConnectWithoutCommentInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutCommentInput | ReactionUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: ReactionCreateManyCommentInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutCommentInput | ReactionUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutCommentInput | ReactionUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutParentCommentNestedInput = {
    create?: XOR<CommentCreateWithoutParentCommentInput, CommentUncheckedCreateWithoutParentCommentInput> | CommentCreateWithoutParentCommentInput[] | CommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentCommentInput | CommentCreateOrConnectWithoutParentCommentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentCommentInput | CommentUpsertWithWhereUniqueWithoutParentCommentInput[]
    createMany?: CommentCreateManyParentCommentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentCommentInput | CommentUpdateWithWhereUniqueWithoutParentCommentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentCommentInput | CommentUpdateManyWithWhereWithoutParentCommentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ReactionUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<ReactionCreateWithoutCommentInput, ReactionUncheckedCreateWithoutCommentInput> | ReactionCreateWithoutCommentInput[] | ReactionUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutCommentInput | ReactionCreateOrConnectWithoutCommentInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutCommentInput | ReactionUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: ReactionCreateManyCommentInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutCommentInput | ReactionUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutCommentInput | ReactionUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReactionsInput = {
    create?: XOR<UserCreateWithoutReactionsInput, UserUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReactionsInput
    connect?: UserWhereUniqueInput
  }

  export type MessageCreateNestedOneWithoutReactionsInput = {
    create?: XOR<MessageCreateWithoutReactionsInput, MessageUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutReactionsInput
    connect?: MessageWhereUniqueInput
  }

  export type DiscussionPostCreateNestedOneWithoutReactionsInput = {
    create?: XOR<DiscussionPostCreateWithoutReactionsInput, DiscussionPostUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutReactionsInput
    connect?: DiscussionPostWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutReactionsInput = {
    create?: XOR<CommentCreateWithoutReactionsInput, CommentUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: CommentCreateOrConnectWithoutReactionsInput
    connect?: CommentWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutReactionsInput = {
    create?: XOR<FileCreateWithoutReactionsInput, FileUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: FileCreateOrConnectWithoutReactionsInput
    connect?: FileWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReactionsNestedInput = {
    create?: XOR<UserCreateWithoutReactionsInput, UserUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReactionsInput
    upsert?: UserUpsertWithoutReactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReactionsInput, UserUpdateWithoutReactionsInput>, UserUncheckedUpdateWithoutReactionsInput>
  }

  export type MessageUpdateOneWithoutReactionsNestedInput = {
    create?: XOR<MessageCreateWithoutReactionsInput, MessageUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutReactionsInput
    upsert?: MessageUpsertWithoutReactionsInput
    disconnect?: MessageWhereInput | boolean
    delete?: MessageWhereInput | boolean
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutReactionsInput, MessageUpdateWithoutReactionsInput>, MessageUncheckedUpdateWithoutReactionsInput>
  }

  export type DiscussionPostUpdateOneWithoutReactionsNestedInput = {
    create?: XOR<DiscussionPostCreateWithoutReactionsInput, DiscussionPostUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutReactionsInput
    upsert?: DiscussionPostUpsertWithoutReactionsInput
    disconnect?: DiscussionPostWhereInput | boolean
    delete?: DiscussionPostWhereInput | boolean
    connect?: DiscussionPostWhereUniqueInput
    update?: XOR<XOR<DiscussionPostUpdateToOneWithWhereWithoutReactionsInput, DiscussionPostUpdateWithoutReactionsInput>, DiscussionPostUncheckedUpdateWithoutReactionsInput>
  }

  export type CommentUpdateOneWithoutReactionsNestedInput = {
    create?: XOR<CommentCreateWithoutReactionsInput, CommentUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: CommentCreateOrConnectWithoutReactionsInput
    upsert?: CommentUpsertWithoutReactionsInput
    disconnect?: CommentWhereInput | boolean
    delete?: CommentWhereInput | boolean
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutReactionsInput, CommentUpdateWithoutReactionsInput>, CommentUncheckedUpdateWithoutReactionsInput>
  }

  export type FileUpdateOneWithoutReactionsNestedInput = {
    create?: XOR<FileCreateWithoutReactionsInput, FileUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: FileCreateOrConnectWithoutReactionsInput
    upsert?: FileUpsertWithoutReactionsInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutReactionsInput, FileUpdateWithoutReactionsInput>, FileUncheckedUpdateWithoutReactionsInput>
  }

  export type UserCreateNestedOneWithoutUploadedFilesInput = {
    create?: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedFilesInput
    connect?: UserWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutFilesInput = {
    create?: XOR<GroupCreateWithoutFilesInput, GroupUncheckedCreateWithoutFilesInput>
    connectOrCreate?: GroupCreateOrConnectWithoutFilesInput
    connect?: GroupWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutFileInput = {
    create?: XOR<CommentCreateWithoutFileInput, CommentUncheckedCreateWithoutFileInput> | CommentCreateWithoutFileInput[] | CommentUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFileInput | CommentCreateOrConnectWithoutFileInput[]
    createMany?: CommentCreateManyFileInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ReactionCreateNestedManyWithoutFileInput = {
    create?: XOR<ReactionCreateWithoutFileInput, ReactionUncheckedCreateWithoutFileInput> | ReactionCreateWithoutFileInput[] | ReactionUncheckedCreateWithoutFileInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutFileInput | ReactionCreateOrConnectWithoutFileInput[]
    createMany?: ReactionCreateManyFileInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutAttachmentsInput = {
    create?: XOR<MessageCreateWithoutAttachmentsInput, MessageUncheckedCreateWithoutAttachmentsInput> | MessageCreateWithoutAttachmentsInput[] | MessageUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAttachmentsInput | MessageCreateOrConnectWithoutAttachmentsInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type DiscussionPostCreateNestedManyWithoutAttachmentsInput = {
    create?: XOR<DiscussionPostCreateWithoutAttachmentsInput, DiscussionPostUncheckedCreateWithoutAttachmentsInput> | DiscussionPostCreateWithoutAttachmentsInput[] | DiscussionPostUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutAttachmentsInput | DiscussionPostCreateOrConnectWithoutAttachmentsInput[]
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutFileInput = {
    create?: XOR<CommentCreateWithoutFileInput, CommentUncheckedCreateWithoutFileInput> | CommentCreateWithoutFileInput[] | CommentUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFileInput | CommentCreateOrConnectWithoutFileInput[]
    createMany?: CommentCreateManyFileInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ReactionUncheckedCreateNestedManyWithoutFileInput = {
    create?: XOR<ReactionCreateWithoutFileInput, ReactionUncheckedCreateWithoutFileInput> | ReactionCreateWithoutFileInput[] | ReactionUncheckedCreateWithoutFileInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutFileInput | ReactionCreateOrConnectWithoutFileInput[]
    createMany?: ReactionCreateManyFileInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutAttachmentsInput = {
    create?: XOR<MessageCreateWithoutAttachmentsInput, MessageUncheckedCreateWithoutAttachmentsInput> | MessageCreateWithoutAttachmentsInput[] | MessageUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAttachmentsInput | MessageCreateOrConnectWithoutAttachmentsInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type DiscussionPostUncheckedCreateNestedManyWithoutAttachmentsInput = {
    create?: XOR<DiscussionPostCreateWithoutAttachmentsInput, DiscussionPostUncheckedCreateWithoutAttachmentsInput> | DiscussionPostCreateWithoutAttachmentsInput[] | DiscussionPostUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutAttachmentsInput | DiscussionPostCreateOrConnectWithoutAttachmentsInput[]
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutUploadedFilesNestedInput = {
    create?: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedFilesInput
    upsert?: UserUpsertWithoutUploadedFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedFilesInput, UserUpdateWithoutUploadedFilesInput>, UserUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type GroupUpdateOneWithoutFilesNestedInput = {
    create?: XOR<GroupCreateWithoutFilesInput, GroupUncheckedCreateWithoutFilesInput>
    connectOrCreate?: GroupCreateOrConnectWithoutFilesInput
    upsert?: GroupUpsertWithoutFilesInput
    disconnect?: GroupWhereInput | boolean
    delete?: GroupWhereInput | boolean
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutFilesInput, GroupUpdateWithoutFilesInput>, GroupUncheckedUpdateWithoutFilesInput>
  }

  export type CommentUpdateManyWithoutFileNestedInput = {
    create?: XOR<CommentCreateWithoutFileInput, CommentUncheckedCreateWithoutFileInput> | CommentCreateWithoutFileInput[] | CommentUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFileInput | CommentCreateOrConnectWithoutFileInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutFileInput | CommentUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: CommentCreateManyFileInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutFileInput | CommentUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutFileInput | CommentUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ReactionUpdateManyWithoutFileNestedInput = {
    create?: XOR<ReactionCreateWithoutFileInput, ReactionUncheckedCreateWithoutFileInput> | ReactionCreateWithoutFileInput[] | ReactionUncheckedCreateWithoutFileInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutFileInput | ReactionCreateOrConnectWithoutFileInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutFileInput | ReactionUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: ReactionCreateManyFileInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutFileInput | ReactionUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutFileInput | ReactionUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutAttachmentsNestedInput = {
    create?: XOR<MessageCreateWithoutAttachmentsInput, MessageUncheckedCreateWithoutAttachmentsInput> | MessageCreateWithoutAttachmentsInput[] | MessageUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAttachmentsInput | MessageCreateOrConnectWithoutAttachmentsInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutAttachmentsInput | MessageUpsertWithWhereUniqueWithoutAttachmentsInput[]
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutAttachmentsInput | MessageUpdateWithWhereUniqueWithoutAttachmentsInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutAttachmentsInput | MessageUpdateManyWithWhereWithoutAttachmentsInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type DiscussionPostUpdateManyWithoutAttachmentsNestedInput = {
    create?: XOR<DiscussionPostCreateWithoutAttachmentsInput, DiscussionPostUncheckedCreateWithoutAttachmentsInput> | DiscussionPostCreateWithoutAttachmentsInput[] | DiscussionPostUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutAttachmentsInput | DiscussionPostCreateOrConnectWithoutAttachmentsInput[]
    upsert?: DiscussionPostUpsertWithWhereUniqueWithoutAttachmentsInput | DiscussionPostUpsertWithWhereUniqueWithoutAttachmentsInput[]
    set?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    disconnect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    delete?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    update?: DiscussionPostUpdateWithWhereUniqueWithoutAttachmentsInput | DiscussionPostUpdateWithWhereUniqueWithoutAttachmentsInput[]
    updateMany?: DiscussionPostUpdateManyWithWhereWithoutAttachmentsInput | DiscussionPostUpdateManyWithWhereWithoutAttachmentsInput[]
    deleteMany?: DiscussionPostScalarWhereInput | DiscussionPostScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutFileNestedInput = {
    create?: XOR<CommentCreateWithoutFileInput, CommentUncheckedCreateWithoutFileInput> | CommentCreateWithoutFileInput[] | CommentUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFileInput | CommentCreateOrConnectWithoutFileInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutFileInput | CommentUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: CommentCreateManyFileInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutFileInput | CommentUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutFileInput | CommentUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ReactionUncheckedUpdateManyWithoutFileNestedInput = {
    create?: XOR<ReactionCreateWithoutFileInput, ReactionUncheckedCreateWithoutFileInput> | ReactionCreateWithoutFileInput[] | ReactionUncheckedCreateWithoutFileInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutFileInput | ReactionCreateOrConnectWithoutFileInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutFileInput | ReactionUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: ReactionCreateManyFileInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutFileInput | ReactionUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutFileInput | ReactionUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutAttachmentsNestedInput = {
    create?: XOR<MessageCreateWithoutAttachmentsInput, MessageUncheckedCreateWithoutAttachmentsInput> | MessageCreateWithoutAttachmentsInput[] | MessageUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAttachmentsInput | MessageCreateOrConnectWithoutAttachmentsInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutAttachmentsInput | MessageUpsertWithWhereUniqueWithoutAttachmentsInput[]
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutAttachmentsInput | MessageUpdateWithWhereUniqueWithoutAttachmentsInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutAttachmentsInput | MessageUpdateManyWithWhereWithoutAttachmentsInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type DiscussionPostUncheckedUpdateManyWithoutAttachmentsNestedInput = {
    create?: XOR<DiscussionPostCreateWithoutAttachmentsInput, DiscussionPostUncheckedCreateWithoutAttachmentsInput> | DiscussionPostCreateWithoutAttachmentsInput[] | DiscussionPostUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: DiscussionPostCreateOrConnectWithoutAttachmentsInput | DiscussionPostCreateOrConnectWithoutAttachmentsInput[]
    upsert?: DiscussionPostUpsertWithWhereUniqueWithoutAttachmentsInput | DiscussionPostUpsertWithWhereUniqueWithoutAttachmentsInput[]
    set?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    disconnect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    delete?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    connect?: DiscussionPostWhereUniqueInput | DiscussionPostWhereUniqueInput[]
    update?: DiscussionPostUpdateWithWhereUniqueWithoutAttachmentsInput | DiscussionPostUpdateWithWhereUniqueWithoutAttachmentsInput[]
    updateMany?: DiscussionPostUpdateManyWithWhereWithoutAttachmentsInput | DiscussionPostUpdateManyWithWhereWithoutAttachmentsInput[]
    deleteMany?: DiscussionPostScalarWhereInput | DiscussionPostScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPinnedItemsInput = {
    create?: XOR<UserCreateWithoutPinnedItemsInput, UserUncheckedCreateWithoutPinnedItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPinnedItemsInput
    connect?: UserWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutPinnedItemsInput = {
    create?: XOR<GroupCreateWithoutPinnedItemsInput, GroupUncheckedCreateWithoutPinnedItemsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutPinnedItemsInput
    connect?: GroupWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPinnedItemsNestedInput = {
    create?: XOR<UserCreateWithoutPinnedItemsInput, UserUncheckedCreateWithoutPinnedItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPinnedItemsInput
    upsert?: UserUpsertWithoutPinnedItemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPinnedItemsInput, UserUpdateWithoutPinnedItemsInput>, UserUncheckedUpdateWithoutPinnedItemsInput>
  }

  export type GroupUpdateOneRequiredWithoutPinnedItemsNestedInput = {
    create?: XOR<GroupCreateWithoutPinnedItemsInput, GroupUncheckedCreateWithoutPinnedItemsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutPinnedItemsInput
    upsert?: GroupUpsertWithoutPinnedItemsInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutPinnedItemsInput, GroupUpdateWithoutPinnedItemsInput>, GroupUncheckedUpdateWithoutPinnedItemsInput>
  }

  export type UserCreateNestedOneWithoutTasksInput = {
    create?: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutTasksInput
    connect?: UserWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutTasksInput = {
    create?: XOR<GroupCreateWithoutTasksInput, GroupUncheckedCreateWithoutTasksInput>
    connectOrCreate?: GroupCreateOrConnectWithoutTasksInput
    connect?: GroupWhereUniqueInput
  }

  export type TaskAssignmentCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput> | TaskAssignmentCreateWithoutTaskInput[] | TaskAssignmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutTaskInput | TaskAssignmentCreateOrConnectWithoutTaskInput[]
    createMany?: TaskAssignmentCreateManyTaskInputEnvelope
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
  }

  export type TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput> | TaskAssignmentCreateWithoutTaskInput[] | TaskAssignmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutTaskInput | TaskAssignmentCreateOrConnectWithoutTaskInput[]
    createMany?: TaskAssignmentCreateManyTaskInputEnvelope
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutTasksInput
    upsert?: UserUpsertWithoutTasksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTasksInput, UserUpdateWithoutTasksInput>, UserUncheckedUpdateWithoutTasksInput>
  }

  export type GroupUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<GroupCreateWithoutTasksInput, GroupUncheckedCreateWithoutTasksInput>
    connectOrCreate?: GroupCreateOrConnectWithoutTasksInput
    upsert?: GroupUpsertWithoutTasksInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutTasksInput, GroupUpdateWithoutTasksInput>, GroupUncheckedUpdateWithoutTasksInput>
  }

  export type TaskAssignmentUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput> | TaskAssignmentCreateWithoutTaskInput[] | TaskAssignmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutTaskInput | TaskAssignmentCreateOrConnectWithoutTaskInput[]
    upsert?: TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput | TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TaskAssignmentCreateManyTaskInputEnvelope
    set?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    disconnect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    delete?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    update?: TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput | TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskAssignmentUpdateManyWithWhereWithoutTaskInput | TaskAssignmentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
  }

  export type TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput> | TaskAssignmentCreateWithoutTaskInput[] | TaskAssignmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutTaskInput | TaskAssignmentCreateOrConnectWithoutTaskInput[]
    upsert?: TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput | TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TaskAssignmentCreateManyTaskInputEnvelope
    set?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    disconnect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    delete?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    update?: TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput | TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskAssignmentUpdateManyWithWhereWithoutTaskInput | TaskAssignmentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
  }

  export type TaskCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<TaskCreateWithoutAssignmentsInput, TaskUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutAssignmentsInput
    connect?: TaskWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTaskAssignmentsInput = {
    create?: XOR<UserCreateWithoutTaskAssignmentsInput, UserUncheckedCreateWithoutTaskAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaskAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type TaskUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<TaskCreateWithoutAssignmentsInput, TaskUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutAssignmentsInput
    upsert?: TaskUpsertWithoutAssignmentsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutAssignmentsInput, TaskUpdateWithoutAssignmentsInput>, TaskUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutTaskAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutTaskAssignmentsInput, UserUncheckedCreateWithoutTaskAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaskAssignmentsInput
    upsert?: UserUpsertWithoutTaskAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTaskAssignmentsInput, UserUpdateWithoutTaskAssignmentsInput>, UserUncheckedUpdateWithoutTaskAssignmentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadCreateNestedManyWithoutMessageInput
    group: GroupCreateNestedOneWithoutMessagesInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    attachments?: FileCreateNestedManyWithoutMessagesInput
    reactions?: ReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    groupId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replyToId?: string | null
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
    attachments?: FileUncheckedCreateNestedManyWithoutMessagesInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
  }

  export type GroupCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    avatarUrl?: string | null
    members?: GroupMemberCreateNestedManyWithoutGroupInput
    messages?: MessageCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardCreateNestedManyWithoutGroupInput
    files?: FileCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutGroupInput
    tasks?: TaskCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    avatarUrl?: string | null
    members?: GroupMemberUncheckedCreateNestedManyWithoutGroupInput
    messages?: MessageUncheckedCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardUncheckedCreateNestedManyWithoutGroupInput
    files?: FileUncheckedCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyUncheckedCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutGroupInput
    tasks?: TaskUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutOwnerInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutOwnerInput, GroupUncheckedCreateWithoutOwnerInput>
  }

  export type GroupCreateManyOwnerInputEnvelope = {
    data: GroupCreateManyOwnerInput | GroupCreateManyOwnerInput[]
  }

  export type GroupMemberCreateWithoutUserInput = {
    id?: string
    role?: string
    joinedAt?: Date | string
    invitedBy?: string | null
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
    group: GroupCreateNestedOneWithoutMembersInput
  }

  export type GroupMemberUncheckedCreateWithoutUserInput = {
    id?: string
    groupId: string
    role?: string
    joinedAt?: Date | string
    invitedBy?: string | null
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
  }

  export type GroupMemberCreateOrConnectWithoutUserInput = {
    where: GroupMemberWhereUniqueInput
    create: XOR<GroupMemberCreateWithoutUserInput, GroupMemberUncheckedCreateWithoutUserInput>
  }

  export type GroupMemberCreateManyUserInputEnvelope = {
    data: GroupMemberCreateManyUserInput | GroupMemberCreateManyUserInput[]
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
  }

  export type UserSecurityLogCreateWithoutUserInput = {
    id?: string
    action: string
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    success?: boolean
    details?: string | null
  }

  export type UserSecurityLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    success?: boolean
    details?: string | null
  }

  export type UserSecurityLogCreateOrConnectWithoutUserInput = {
    where: UserSecurityLogWhereUniqueInput
    create: XOR<UserSecurityLogCreateWithoutUserInput, UserSecurityLogUncheckedCreateWithoutUserInput>
  }

  export type UserSecurityLogCreateManyUserInputEnvelope = {
    data: UserSecurityLogCreateManyUserInput | UserSecurityLogCreateManyUserInput[]
  }

  export type DiscussionPostCreateWithoutAuthorInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    board: DiscussionBoardCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    attachments?: FileCreateNestedManyWithoutPostsInput
    reactions?: ReactionCreateNestedManyWithoutPostInput
  }

  export type DiscussionPostUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    boardId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    attachments?: FileUncheckedCreateNestedManyWithoutPostsInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutPostInput
  }

  export type DiscussionPostCreateOrConnectWithoutAuthorInput = {
    where: DiscussionPostWhereUniqueInput
    create: XOR<DiscussionPostCreateWithoutAuthorInput, DiscussionPostUncheckedCreateWithoutAuthorInput>
  }

  export type DiscussionPostCreateManyAuthorInputEnvelope = {
    data: DiscussionPostCreateManyAuthorInput | DiscussionPostCreateManyAuthorInput[]
  }

  export type CommentCreateWithoutAuthorInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    post?: DiscussionPostCreateNestedOneWithoutCommentsInput
    file?: FileCreateNestedOneWithoutCommentsInput
    parentComment?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentCommentInput
    reactions?: ReactionCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    postId?: string | null
    fileId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentCommentInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[]
  }

  export type ReactionCreateWithoutUserInput = {
    id?: string
    type: string
    createdAt?: Date | string
    message?: MessageCreateNestedOneWithoutReactionsInput
    post?: DiscussionPostCreateNestedOneWithoutReactionsInput
    comment?: CommentCreateNestedOneWithoutReactionsInput
    file?: FileCreateNestedOneWithoutReactionsInput
  }

  export type ReactionUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    createdAt?: Date | string
    messageId?: string | null
    postId?: string | null
    commentId?: string | null
    fileId?: string | null
  }

  export type ReactionCreateOrConnectWithoutUserInput = {
    where: ReactionWhereUniqueInput
    create: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput>
  }

  export type ReactionCreateManyUserInputEnvelope = {
    data: ReactionCreateManyUserInput | ReactionCreateManyUserInput[]
  }

  export type FileCreateWithoutUploaderInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    group?: GroupCreateNestedOneWithoutFilesInput
    comments?: CommentCreateNestedManyWithoutFileInput
    reactions?: ReactionCreateNestedManyWithoutFileInput
    messages?: MessageCreateNestedManyWithoutAttachmentsInput
    posts?: DiscussionPostCreateNestedManyWithoutAttachmentsInput
  }

  export type FileUncheckedCreateWithoutUploaderInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutFileInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutFileInput
    messages?: MessageUncheckedCreateNestedManyWithoutAttachmentsInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAttachmentsInput
  }

  export type FileCreateOrConnectWithoutUploaderInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutUploaderInput, FileUncheckedCreateWithoutUploaderInput>
  }

  export type FileCreateManyUploaderInputEnvelope = {
    data: FileCreateManyUploaderInput | FileCreateManyUploaderInput[]
  }

  export type PinnedItemCreateWithoutUserInput = {
    id?: string
    itemType: string
    itemId: string
    pinnedAt?: Date | string
    note?: string | null
    group: GroupCreateNestedOneWithoutPinnedItemsInput
  }

  export type PinnedItemUncheckedCreateWithoutUserInput = {
    id?: string
    groupId: string
    itemType: string
    itemId: string
    pinnedAt?: Date | string
    note?: string | null
  }

  export type PinnedItemCreateOrConnectWithoutUserInput = {
    where: PinnedItemWhereUniqueInput
    create: XOR<PinnedItemCreateWithoutUserInput, PinnedItemUncheckedCreateWithoutUserInput>
  }

  export type PinnedItemCreateManyUserInputEnvelope = {
    data: PinnedItemCreateManyUserInput | PinnedItemCreateManyUserInput[]
  }

  export type TaskCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    status?: string
    priority?: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    group: GroupCreateNestedOneWithoutTasksInput
    assignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    status?: string
    priority?: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groupId: string
    assignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutCreatorInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput>
  }

  export type TaskCreateManyCreatorInputEnvelope = {
    data: TaskCreateManyCreatorInput | TaskCreateManyCreatorInput[]
  }

  export type TaskAssignmentCreateWithoutUserInput = {
    id?: string
    assignedAt?: Date | string
    task: TaskCreateNestedOneWithoutAssignmentsInput
  }

  export type TaskAssignmentUncheckedCreateWithoutUserInput = {
    id?: string
    taskId: string
    assignedAt?: Date | string
  }

  export type TaskAssignmentCreateOrConnectWithoutUserInput = {
    where: TaskAssignmentWhereUniqueInput
    create: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput>
  }

  export type TaskAssignmentCreateManyUserInputEnvelope = {
    data: TaskAssignmentCreateManyUserInput | TaskAssignmentCreateManyUserInput[]
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    groupId?: StringFilter<"Message"> | string
    encryptedContent?: StringFilter<"Message"> | string
    iv?: StringFilter<"Message"> | string
    keyId?: StringNullableFilter<"Message"> | string | null
    metaData?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    replyToId?: StringNullableFilter<"Message"> | string | null
    ephemeralExpiry?: DateTimeNullableFilter<"Message"> | Date | string | null
    isEphemeral?: BoolFilter<"Message"> | boolean
  }

  export type GroupUpsertWithWhereUniqueWithoutOwnerInput = {
    where: GroupWhereUniqueInput
    update: XOR<GroupUpdateWithoutOwnerInput, GroupUncheckedUpdateWithoutOwnerInput>
    create: XOR<GroupCreateWithoutOwnerInput, GroupUncheckedCreateWithoutOwnerInput>
  }

  export type GroupUpdateWithWhereUniqueWithoutOwnerInput = {
    where: GroupWhereUniqueInput
    data: XOR<GroupUpdateWithoutOwnerInput, GroupUncheckedUpdateWithoutOwnerInput>
  }

  export type GroupUpdateManyWithWhereWithoutOwnerInput = {
    where: GroupScalarWhereInput
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyWithoutOwnerInput>
  }

  export type GroupScalarWhereInput = {
    AND?: GroupScalarWhereInput | GroupScalarWhereInput[]
    OR?: GroupScalarWhereInput[]
    NOT?: GroupScalarWhereInput | GroupScalarWhereInput[]
    id?: StringFilter<"Group"> | string
    name?: StringFilter<"Group"> | string
    description?: StringNullableFilter<"Group"> | string | null
    createdAt?: DateTimeFilter<"Group"> | Date | string
    updatedAt?: DateTimeFilter<"Group"> | Date | string
    ownerId?: StringFilter<"Group"> | string
    isPrivate?: BoolFilter<"Group"> | boolean
    avatarUrl?: StringNullableFilter<"Group"> | string | null
  }

  export type GroupMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: GroupMemberWhereUniqueInput
    update: XOR<GroupMemberUpdateWithoutUserInput, GroupMemberUncheckedUpdateWithoutUserInput>
    create: XOR<GroupMemberCreateWithoutUserInput, GroupMemberUncheckedCreateWithoutUserInput>
  }

  export type GroupMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: GroupMemberWhereUniqueInput
    data: XOR<GroupMemberUpdateWithoutUserInput, GroupMemberUncheckedUpdateWithoutUserInput>
  }

  export type GroupMemberUpdateManyWithWhereWithoutUserInput = {
    where: GroupMemberScalarWhereInput
    data: XOR<GroupMemberUpdateManyMutationInput, GroupMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type GroupMemberScalarWhereInput = {
    AND?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
    OR?: GroupMemberScalarWhereInput[]
    NOT?: GroupMemberScalarWhereInput | GroupMemberScalarWhereInput[]
    id?: StringFilter<"GroupMember"> | string
    userId?: StringFilter<"GroupMember"> | string
    groupId?: StringFilter<"GroupMember"> | string
    role?: StringFilter<"GroupMember"> | string
    joinedAt?: DateTimeFilter<"GroupMember"> | Date | string
    invitedBy?: StringNullableFilter<"GroupMember"> | string | null
    notifyOnNewMessage?: BoolFilter<"GroupMember"> | boolean
    notifyOnMention?: BoolFilter<"GroupMember"> | boolean
    notifyOnNewDiscussion?: BoolFilter<"GroupMember"> | boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    deviceInfo?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    isRevoked?: BoolFilter<"Session"> | boolean
  }

  export type UserSecurityLogUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSecurityLogWhereUniqueInput
    update: XOR<UserSecurityLogUpdateWithoutUserInput, UserSecurityLogUncheckedUpdateWithoutUserInput>
    create: XOR<UserSecurityLogCreateWithoutUserInput, UserSecurityLogUncheckedCreateWithoutUserInput>
  }

  export type UserSecurityLogUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSecurityLogWhereUniqueInput
    data: XOR<UserSecurityLogUpdateWithoutUserInput, UserSecurityLogUncheckedUpdateWithoutUserInput>
  }

  export type UserSecurityLogUpdateManyWithWhereWithoutUserInput = {
    where: UserSecurityLogScalarWhereInput
    data: XOR<UserSecurityLogUpdateManyMutationInput, UserSecurityLogUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSecurityLogScalarWhereInput = {
    AND?: UserSecurityLogScalarWhereInput | UserSecurityLogScalarWhereInput[]
    OR?: UserSecurityLogScalarWhereInput[]
    NOT?: UserSecurityLogScalarWhereInput | UserSecurityLogScalarWhereInput[]
    id?: StringFilter<"UserSecurityLog"> | string
    userId?: StringFilter<"UserSecurityLog"> | string
    action?: StringFilter<"UserSecurityLog"> | string
    ipAddress?: StringNullableFilter<"UserSecurityLog"> | string | null
    userAgent?: StringNullableFilter<"UserSecurityLog"> | string | null
    timestamp?: DateTimeFilter<"UserSecurityLog"> | Date | string
    success?: BoolFilter<"UserSecurityLog"> | boolean
    details?: StringNullableFilter<"UserSecurityLog"> | string | null
  }

  export type DiscussionPostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: DiscussionPostWhereUniqueInput
    update: XOR<DiscussionPostUpdateWithoutAuthorInput, DiscussionPostUncheckedUpdateWithoutAuthorInput>
    create: XOR<DiscussionPostCreateWithoutAuthorInput, DiscussionPostUncheckedCreateWithoutAuthorInput>
  }

  export type DiscussionPostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: DiscussionPostWhereUniqueInput
    data: XOR<DiscussionPostUpdateWithoutAuthorInput, DiscussionPostUncheckedUpdateWithoutAuthorInput>
  }

  export type DiscussionPostUpdateManyWithWhereWithoutAuthorInput = {
    where: DiscussionPostScalarWhereInput
    data: XOR<DiscussionPostUpdateManyMutationInput, DiscussionPostUncheckedUpdateManyWithoutAuthorInput>
  }

  export type DiscussionPostScalarWhereInput = {
    AND?: DiscussionPostScalarWhereInput | DiscussionPostScalarWhereInput[]
    OR?: DiscussionPostScalarWhereInput[]
    NOT?: DiscussionPostScalarWhereInput | DiscussionPostScalarWhereInput[]
    id?: StringFilter<"DiscussionPost"> | string
    title?: StringFilter<"DiscussionPost"> | string
    encryptedContent?: StringFilter<"DiscussionPost"> | string
    iv?: StringFilter<"DiscussionPost"> | string
    keyId?: StringNullableFilter<"DiscussionPost"> | string | null
    authorId?: StringFilter<"DiscussionPost"> | string
    boardId?: StringFilter<"DiscussionPost"> | string
    createdAt?: DateTimeFilter<"DiscussionPost"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionPost"> | Date | string
    isLocked?: BoolFilter<"DiscussionPost"> | boolean
    isPinned?: BoolFilter<"DiscussionPost"> | boolean
    viewCount?: IntFilter<"DiscussionPost"> | number
  }

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    encryptedContent?: StringFilter<"Comment"> | string
    iv?: StringFilter<"Comment"> | string
    keyId?: StringNullableFilter<"Comment"> | string | null
    authorId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    parentId?: StringNullableFilter<"Comment"> | string | null
    postId?: StringNullableFilter<"Comment"> | string | null
    fileId?: StringNullableFilter<"Comment"> | string | null
  }

  export type ReactionUpsertWithWhereUniqueWithoutUserInput = {
    where: ReactionWhereUniqueInput
    update: XOR<ReactionUpdateWithoutUserInput, ReactionUncheckedUpdateWithoutUserInput>
    create: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput>
  }

  export type ReactionUpdateWithWhereUniqueWithoutUserInput = {
    where: ReactionWhereUniqueInput
    data: XOR<ReactionUpdateWithoutUserInput, ReactionUncheckedUpdateWithoutUserInput>
  }

  export type ReactionUpdateManyWithWhereWithoutUserInput = {
    where: ReactionScalarWhereInput
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyWithoutUserInput>
  }

  export type ReactionScalarWhereInput = {
    AND?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
    OR?: ReactionScalarWhereInput[]
    NOT?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
    id?: StringFilter<"Reaction"> | string
    type?: StringFilter<"Reaction"> | string
    userId?: StringFilter<"Reaction"> | string
    createdAt?: DateTimeFilter<"Reaction"> | Date | string
    messageId?: StringNullableFilter<"Reaction"> | string | null
    postId?: StringNullableFilter<"Reaction"> | string | null
    commentId?: StringNullableFilter<"Reaction"> | string | null
    fileId?: StringNullableFilter<"Reaction"> | string | null
  }

  export type FileUpsertWithWhereUniqueWithoutUploaderInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutUploaderInput, FileUncheckedUpdateWithoutUploaderInput>
    create: XOR<FileCreateWithoutUploaderInput, FileUncheckedCreateWithoutUploaderInput>
  }

  export type FileUpdateWithWhereUniqueWithoutUploaderInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutUploaderInput, FileUncheckedUpdateWithoutUploaderInput>
  }

  export type FileUpdateManyWithWhereWithoutUploaderInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutUploaderInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    filename?: StringFilter<"File"> | string
    originalName?: StringFilter<"File"> | string
    mimeType?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    path?: StringFilter<"File"> | string
    isEncrypted?: BoolFilter<"File"> | boolean
    encryptionKeyId?: StringNullableFilter<"File"> | string | null
    encryptionIv?: StringNullableFilter<"File"> | string | null
    checksum?: StringNullableFilter<"File"> | string | null
    uploaderId?: StringFilter<"File"> | string
    groupId?: StringNullableFilter<"File"> | string | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    isArchived?: BoolFilter<"File"> | boolean
    thumbnailPath?: StringNullableFilter<"File"> | string | null
    metadata?: StringNullableFilter<"File"> | string | null
  }

  export type PinnedItemUpsertWithWhereUniqueWithoutUserInput = {
    where: PinnedItemWhereUniqueInput
    update: XOR<PinnedItemUpdateWithoutUserInput, PinnedItemUncheckedUpdateWithoutUserInput>
    create: XOR<PinnedItemCreateWithoutUserInput, PinnedItemUncheckedCreateWithoutUserInput>
  }

  export type PinnedItemUpdateWithWhereUniqueWithoutUserInput = {
    where: PinnedItemWhereUniqueInput
    data: XOR<PinnedItemUpdateWithoutUserInput, PinnedItemUncheckedUpdateWithoutUserInput>
  }

  export type PinnedItemUpdateManyWithWhereWithoutUserInput = {
    where: PinnedItemScalarWhereInput
    data: XOR<PinnedItemUpdateManyMutationInput, PinnedItemUncheckedUpdateManyWithoutUserInput>
  }

  export type PinnedItemScalarWhereInput = {
    AND?: PinnedItemScalarWhereInput | PinnedItemScalarWhereInput[]
    OR?: PinnedItemScalarWhereInput[]
    NOT?: PinnedItemScalarWhereInput | PinnedItemScalarWhereInput[]
    id?: StringFilter<"PinnedItem"> | string
    userId?: StringFilter<"PinnedItem"> | string
    groupId?: StringFilter<"PinnedItem"> | string
    itemType?: StringFilter<"PinnedItem"> | string
    itemId?: StringFilter<"PinnedItem"> | string
    pinnedAt?: DateTimeFilter<"PinnedItem"> | Date | string
    note?: StringNullableFilter<"PinnedItem"> | string | null
  }

  export type TaskUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutCreatorInput, TaskUncheckedUpdateWithoutCreatorInput>
    create: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutCreatorInput, TaskUncheckedUpdateWithoutCreatorInput>
  }

  export type TaskUpdateManyWithWhereWithoutCreatorInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutCreatorInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: StringFilter<"Task"> | string
    priority?: StringFilter<"Task"> | string
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    creatorId?: StringFilter<"Task"> | string
    groupId?: StringFilter<"Task"> | string
  }

  export type TaskAssignmentUpsertWithWhereUniqueWithoutUserInput = {
    where: TaskAssignmentWhereUniqueInput
    update: XOR<TaskAssignmentUpdateWithoutUserInput, TaskAssignmentUncheckedUpdateWithoutUserInput>
    create: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput>
  }

  export type TaskAssignmentUpdateWithWhereUniqueWithoutUserInput = {
    where: TaskAssignmentWhereUniqueInput
    data: XOR<TaskAssignmentUpdateWithoutUserInput, TaskAssignmentUncheckedUpdateWithoutUserInput>
  }

  export type TaskAssignmentUpdateManyWithWhereWithoutUserInput = {
    where: TaskAssignmentScalarWhereInput
    data: XOR<TaskAssignmentUpdateManyMutationInput, TaskAssignmentUncheckedUpdateManyWithoutUserInput>
  }

  export type TaskAssignmentScalarWhereInput = {
    AND?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
    OR?: TaskAssignmentScalarWhereInput[]
    NOT?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
    id?: StringFilter<"TaskAssignment"> | string
    taskId?: StringFilter<"TaskAssignment"> | string
    userId?: StringFilter<"TaskAssignment"> | string
    assignedAt?: DateTimeFilter<"TaskAssignment"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutOwnedGroupsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnedGroupsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnedGroupsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedGroupsInput, UserUncheckedCreateWithoutOwnedGroupsInput>
  }

  export type GroupMemberCreateWithoutGroupInput = {
    id?: string
    role?: string
    joinedAt?: Date | string
    invitedBy?: string | null
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
    user: UserCreateNestedOneWithoutMemberOfGroupsInput
  }

  export type GroupMemberUncheckedCreateWithoutGroupInput = {
    id?: string
    userId: string
    role?: string
    joinedAt?: Date | string
    invitedBy?: string | null
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
  }

  export type GroupMemberCreateOrConnectWithoutGroupInput = {
    where: GroupMemberWhereUniqueInput
    create: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput>
  }

  export type GroupMemberCreateManyGroupInputEnvelope = {
    data: GroupMemberCreateManyGroupInput | GroupMemberCreateManyGroupInput[]
  }

  export type MessageCreateWithoutGroupInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadCreateNestedManyWithoutMessageInput
    sender: UserCreateNestedOneWithoutSentMessagesInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    attachments?: FileCreateNestedManyWithoutMessagesInput
    reactions?: ReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutGroupInput = {
    id?: string
    senderId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replyToId?: string | null
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
    attachments?: FileUncheckedCreateNestedManyWithoutMessagesInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutGroupInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutGroupInput, MessageUncheckedCreateWithoutGroupInput>
  }

  export type MessageCreateManyGroupInputEnvelope = {
    data: MessageCreateManyGroupInput | MessageCreateManyGroupInput[]
  }

  export type DiscussionBoardCreateWithoutGroupInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    sortOrder?: number
    posts?: DiscussionPostCreateNestedManyWithoutBoardInput
  }

  export type DiscussionBoardUncheckedCreateWithoutGroupInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    sortOrder?: number
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutBoardInput
  }

  export type DiscussionBoardCreateOrConnectWithoutGroupInput = {
    where: DiscussionBoardWhereUniqueInput
    create: XOR<DiscussionBoardCreateWithoutGroupInput, DiscussionBoardUncheckedCreateWithoutGroupInput>
  }

  export type DiscussionBoardCreateManyGroupInputEnvelope = {
    data: DiscussionBoardCreateManyGroupInput | DiscussionBoardCreateManyGroupInput[]
  }

  export type FileCreateWithoutGroupInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
    comments?: CommentCreateNestedManyWithoutFileInput
    reactions?: ReactionCreateNestedManyWithoutFileInput
    messages?: MessageCreateNestedManyWithoutAttachmentsInput
    posts?: DiscussionPostCreateNestedManyWithoutAttachmentsInput
  }

  export type FileUncheckedCreateWithoutGroupInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    uploaderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutFileInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutFileInput
    messages?: MessageUncheckedCreateNestedManyWithoutAttachmentsInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAttachmentsInput
  }

  export type FileCreateOrConnectWithoutGroupInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutGroupInput, FileUncheckedCreateWithoutGroupInput>
  }

  export type FileCreateManyGroupInputEnvelope = {
    data: FileCreateManyGroupInput | FileCreateManyGroupInput[]
  }

  export type EncryptionKeyCreateWithoutGroupInput = {
    id?: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    relatedKey?: EncryptionKeyCreateNestedOneWithoutRelatedToInput
    relatedTo?: EncryptionKeyCreateNestedManyWithoutRelatedKeyInput
  }

  export type EncryptionKeyUncheckedCreateWithoutGroupInput = {
    id?: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    relatedKeyId?: string | null
    relatedTo?: EncryptionKeyUncheckedCreateNestedManyWithoutRelatedKeyInput
  }

  export type EncryptionKeyCreateOrConnectWithoutGroupInput = {
    where: EncryptionKeyWhereUniqueInput
    create: XOR<EncryptionKeyCreateWithoutGroupInput, EncryptionKeyUncheckedCreateWithoutGroupInput>
  }

  export type EncryptionKeyCreateManyGroupInputEnvelope = {
    data: EncryptionKeyCreateManyGroupInput | EncryptionKeyCreateManyGroupInput[]
  }

  export type PinnedItemCreateWithoutGroupInput = {
    id?: string
    itemType: string
    itemId: string
    pinnedAt?: Date | string
    note?: string | null
    user: UserCreateNestedOneWithoutPinnedItemsInput
  }

  export type PinnedItemUncheckedCreateWithoutGroupInput = {
    id?: string
    userId: string
    itemType: string
    itemId: string
    pinnedAt?: Date | string
    note?: string | null
  }

  export type PinnedItemCreateOrConnectWithoutGroupInput = {
    where: PinnedItemWhereUniqueInput
    create: XOR<PinnedItemCreateWithoutGroupInput, PinnedItemUncheckedCreateWithoutGroupInput>
  }

  export type PinnedItemCreateManyGroupInputEnvelope = {
    data: PinnedItemCreateManyGroupInput | PinnedItemCreateManyGroupInput[]
  }

  export type TaskCreateWithoutGroupInput = {
    id?: string
    title: string
    description?: string | null
    status?: string
    priority?: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutTasksInput
    assignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutGroupInput = {
    id?: string
    title: string
    description?: string | null
    status?: string
    priority?: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId: string
    assignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutGroupInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutGroupInput, TaskUncheckedCreateWithoutGroupInput>
  }

  export type TaskCreateManyGroupInputEnvelope = {
    data: TaskCreateManyGroupInput | TaskCreateManyGroupInput[]
  }

  export type UserUpsertWithoutOwnedGroupsInput = {
    update: XOR<UserUpdateWithoutOwnedGroupsInput, UserUncheckedUpdateWithoutOwnedGroupsInput>
    create: XOR<UserCreateWithoutOwnedGroupsInput, UserUncheckedCreateWithoutOwnedGroupsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedGroupsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedGroupsInput, UserUncheckedUpdateWithoutOwnedGroupsInput>
  }

  export type UserUpdateWithoutOwnedGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupMemberUpsertWithWhereUniqueWithoutGroupInput = {
    where: GroupMemberWhereUniqueInput
    update: XOR<GroupMemberUpdateWithoutGroupInput, GroupMemberUncheckedUpdateWithoutGroupInput>
    create: XOR<GroupMemberCreateWithoutGroupInput, GroupMemberUncheckedCreateWithoutGroupInput>
  }

  export type GroupMemberUpdateWithWhereUniqueWithoutGroupInput = {
    where: GroupMemberWhereUniqueInput
    data: XOR<GroupMemberUpdateWithoutGroupInput, GroupMemberUncheckedUpdateWithoutGroupInput>
  }

  export type GroupMemberUpdateManyWithWhereWithoutGroupInput = {
    where: GroupMemberScalarWhereInput
    data: XOR<GroupMemberUpdateManyMutationInput, GroupMemberUncheckedUpdateManyWithoutGroupInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutGroupInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutGroupInput, MessageUncheckedUpdateWithoutGroupInput>
    create: XOR<MessageCreateWithoutGroupInput, MessageUncheckedCreateWithoutGroupInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutGroupInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutGroupInput, MessageUncheckedUpdateWithoutGroupInput>
  }

  export type MessageUpdateManyWithWhereWithoutGroupInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutGroupInput>
  }

  export type DiscussionBoardUpsertWithWhereUniqueWithoutGroupInput = {
    where: DiscussionBoardWhereUniqueInput
    update: XOR<DiscussionBoardUpdateWithoutGroupInput, DiscussionBoardUncheckedUpdateWithoutGroupInput>
    create: XOR<DiscussionBoardCreateWithoutGroupInput, DiscussionBoardUncheckedCreateWithoutGroupInput>
  }

  export type DiscussionBoardUpdateWithWhereUniqueWithoutGroupInput = {
    where: DiscussionBoardWhereUniqueInput
    data: XOR<DiscussionBoardUpdateWithoutGroupInput, DiscussionBoardUncheckedUpdateWithoutGroupInput>
  }

  export type DiscussionBoardUpdateManyWithWhereWithoutGroupInput = {
    where: DiscussionBoardScalarWhereInput
    data: XOR<DiscussionBoardUpdateManyMutationInput, DiscussionBoardUncheckedUpdateManyWithoutGroupInput>
  }

  export type DiscussionBoardScalarWhereInput = {
    AND?: DiscussionBoardScalarWhereInput | DiscussionBoardScalarWhereInput[]
    OR?: DiscussionBoardScalarWhereInput[]
    NOT?: DiscussionBoardScalarWhereInput | DiscussionBoardScalarWhereInput[]
    id?: StringFilter<"DiscussionBoard"> | string
    name?: StringFilter<"DiscussionBoard"> | string
    description?: StringNullableFilter<"DiscussionBoard"> | string | null
    groupId?: StringFilter<"DiscussionBoard"> | string
    createdAt?: DateTimeFilter<"DiscussionBoard"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionBoard"> | Date | string
    isArchived?: BoolFilter<"DiscussionBoard"> | boolean
    sortOrder?: IntFilter<"DiscussionBoard"> | number
  }

  export type FileUpsertWithWhereUniqueWithoutGroupInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutGroupInput, FileUncheckedUpdateWithoutGroupInput>
    create: XOR<FileCreateWithoutGroupInput, FileUncheckedCreateWithoutGroupInput>
  }

  export type FileUpdateWithWhereUniqueWithoutGroupInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutGroupInput, FileUncheckedUpdateWithoutGroupInput>
  }

  export type FileUpdateManyWithWhereWithoutGroupInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutGroupInput>
  }

  export type EncryptionKeyUpsertWithWhereUniqueWithoutGroupInput = {
    where: EncryptionKeyWhereUniqueInput
    update: XOR<EncryptionKeyUpdateWithoutGroupInput, EncryptionKeyUncheckedUpdateWithoutGroupInput>
    create: XOR<EncryptionKeyCreateWithoutGroupInput, EncryptionKeyUncheckedCreateWithoutGroupInput>
  }

  export type EncryptionKeyUpdateWithWhereUniqueWithoutGroupInput = {
    where: EncryptionKeyWhereUniqueInput
    data: XOR<EncryptionKeyUpdateWithoutGroupInput, EncryptionKeyUncheckedUpdateWithoutGroupInput>
  }

  export type EncryptionKeyUpdateManyWithWhereWithoutGroupInput = {
    where: EncryptionKeyScalarWhereInput
    data: XOR<EncryptionKeyUpdateManyMutationInput, EncryptionKeyUncheckedUpdateManyWithoutGroupInput>
  }

  export type EncryptionKeyScalarWhereInput = {
    AND?: EncryptionKeyScalarWhereInput | EncryptionKeyScalarWhereInput[]
    OR?: EncryptionKeyScalarWhereInput[]
    NOT?: EncryptionKeyScalarWhereInput | EncryptionKeyScalarWhereInput[]
    id?: StringFilter<"EncryptionKey"> | string
    keyType?: StringFilter<"EncryptionKey"> | string
    keyValue?: StringFilter<"EncryptionKey"> | string
    iv?: StringFilter<"EncryptionKey"> | string
    algorithm?: StringFilter<"EncryptionKey"> | string
    createdAt?: DateTimeFilter<"EncryptionKey"> | Date | string
    expiresAt?: DateTimeFilter<"EncryptionKey"> | Date | string
    isRevoked?: BoolFilter<"EncryptionKey"> | boolean
    groupId?: StringNullableFilter<"EncryptionKey"> | string | null
    relatedKeyId?: StringNullableFilter<"EncryptionKey"> | string | null
  }

  export type PinnedItemUpsertWithWhereUniqueWithoutGroupInput = {
    where: PinnedItemWhereUniqueInput
    update: XOR<PinnedItemUpdateWithoutGroupInput, PinnedItemUncheckedUpdateWithoutGroupInput>
    create: XOR<PinnedItemCreateWithoutGroupInput, PinnedItemUncheckedCreateWithoutGroupInput>
  }

  export type PinnedItemUpdateWithWhereUniqueWithoutGroupInput = {
    where: PinnedItemWhereUniqueInput
    data: XOR<PinnedItemUpdateWithoutGroupInput, PinnedItemUncheckedUpdateWithoutGroupInput>
  }

  export type PinnedItemUpdateManyWithWhereWithoutGroupInput = {
    where: PinnedItemScalarWhereInput
    data: XOR<PinnedItemUpdateManyMutationInput, PinnedItemUncheckedUpdateManyWithoutGroupInput>
  }

  export type TaskUpsertWithWhereUniqueWithoutGroupInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutGroupInput, TaskUncheckedUpdateWithoutGroupInput>
    create: XOR<TaskCreateWithoutGroupInput, TaskUncheckedCreateWithoutGroupInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutGroupInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutGroupInput, TaskUncheckedUpdateWithoutGroupInput>
  }

  export type TaskUpdateManyWithWhereWithoutGroupInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutGroupInput>
  }

  export type UserCreateWithoutMemberOfGroupsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMemberOfGroupsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMemberOfGroupsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMemberOfGroupsInput, UserUncheckedCreateWithoutMemberOfGroupsInput>
  }

  export type GroupCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    avatarUrl?: string | null
    owner: UserCreateNestedOneWithoutOwnedGroupsInput
    messages?: MessageCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardCreateNestedManyWithoutGroupInput
    files?: FileCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutGroupInput
    tasks?: TaskCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    isPrivate?: boolean
    avatarUrl?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardUncheckedCreateNestedManyWithoutGroupInput
    files?: FileUncheckedCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyUncheckedCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutGroupInput
    tasks?: TaskUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutMembersInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutMembersInput, GroupUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutMemberOfGroupsInput = {
    update: XOR<UserUpdateWithoutMemberOfGroupsInput, UserUncheckedUpdateWithoutMemberOfGroupsInput>
    create: XOR<UserCreateWithoutMemberOfGroupsInput, UserUncheckedCreateWithoutMemberOfGroupsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMemberOfGroupsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMemberOfGroupsInput, UserUncheckedUpdateWithoutMemberOfGroupsInput>
  }

  export type UserUpdateWithoutMemberOfGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMemberOfGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupUpsertWithoutMembersInput = {
    update: XOR<GroupUpdateWithoutMembersInput, GroupUncheckedUpdateWithoutMembersInput>
    create: XOR<GroupCreateWithoutMembersInput, GroupUncheckedCreateWithoutMembersInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutMembersInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutMembersInput, GroupUncheckedUpdateWithoutMembersInput>
  }

  export type GroupUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutOwnedGroupsNestedInput
    messages?: MessageUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUpdateManyWithoutGroupNestedInput
    files?: FileUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutGroupNestedInput
    tasks?: TaskUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUncheckedUpdateManyWithoutGroupNestedInput
    files?: FileUncheckedUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUncheckedUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutGroupNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type MessageReadCreateWithoutMessageInput = {
    id?: string
    userId: string
    readAt?: Date | string
  }

  export type MessageReadUncheckedCreateWithoutMessageInput = {
    id?: string
    userId: string
    readAt?: Date | string
  }

  export type MessageReadCreateOrConnectWithoutMessageInput = {
    where: MessageReadWhereUniqueInput
    create: XOR<MessageReadCreateWithoutMessageInput, MessageReadUncheckedCreateWithoutMessageInput>
  }

  export type MessageReadCreateManyMessageInputEnvelope = {
    data: MessageReadCreateManyMessageInput | MessageReadCreateManyMessageInput[]
  }

  export type UserCreateWithoutSentMessagesInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type GroupCreateWithoutMessagesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    avatarUrl?: string | null
    owner: UserCreateNestedOneWithoutOwnedGroupsInput
    members?: GroupMemberCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardCreateNestedManyWithoutGroupInput
    files?: FileCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutGroupInput
    tasks?: TaskCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutMessagesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    isPrivate?: boolean
    avatarUrl?: string | null
    members?: GroupMemberUncheckedCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardUncheckedCreateNestedManyWithoutGroupInput
    files?: FileUncheckedCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyUncheckedCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutGroupInput
    tasks?: TaskUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutMessagesInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutMessagesInput, GroupUncheckedCreateWithoutMessagesInput>
  }

  export type MessageCreateWithoutRepliesInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadCreateNestedManyWithoutMessageInput
    sender: UserCreateNestedOneWithoutSentMessagesInput
    group: GroupCreateNestedOneWithoutMessagesInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    attachments?: FileCreateNestedManyWithoutMessagesInput
    reactions?: ReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutRepliesInput = {
    id?: string
    senderId: string
    groupId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replyToId?: string | null
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadUncheckedCreateNestedManyWithoutMessageInput
    attachments?: FileUncheckedCreateNestedManyWithoutMessagesInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutRepliesInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
  }

  export type MessageCreateWithoutReplyToInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadCreateNestedManyWithoutMessageInput
    sender: UserCreateNestedOneWithoutSentMessagesInput
    group: GroupCreateNestedOneWithoutMessagesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    attachments?: FileCreateNestedManyWithoutMessagesInput
    reactions?: ReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutReplyToInput = {
    id?: string
    senderId: string
    groupId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
    attachments?: FileUncheckedCreateNestedManyWithoutMessagesInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutReplyToInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput>
  }

  export type MessageCreateManyReplyToInputEnvelope = {
    data: MessageCreateManyReplyToInput | MessageCreateManyReplyToInput[]
  }

  export type FileCreateWithoutMessagesInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
    group?: GroupCreateNestedOneWithoutFilesInput
    comments?: CommentCreateNestedManyWithoutFileInput
    reactions?: ReactionCreateNestedManyWithoutFileInput
    posts?: DiscussionPostCreateNestedManyWithoutAttachmentsInput
  }

  export type FileUncheckedCreateWithoutMessagesInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    uploaderId: string
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutFileInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutFileInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAttachmentsInput
  }

  export type FileCreateOrConnectWithoutMessagesInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutMessagesInput, FileUncheckedCreateWithoutMessagesInput>
  }

  export type ReactionCreateWithoutMessageInput = {
    id?: string
    type: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReactionsInput
    post?: DiscussionPostCreateNestedOneWithoutReactionsInput
    comment?: CommentCreateNestedOneWithoutReactionsInput
    file?: FileCreateNestedOneWithoutReactionsInput
  }

  export type ReactionUncheckedCreateWithoutMessageInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
    postId?: string | null
    commentId?: string | null
    fileId?: string | null
  }

  export type ReactionCreateOrConnectWithoutMessageInput = {
    where: ReactionWhereUniqueInput
    create: XOR<ReactionCreateWithoutMessageInput, ReactionUncheckedCreateWithoutMessageInput>
  }

  export type ReactionCreateManyMessageInputEnvelope = {
    data: ReactionCreateManyMessageInput | ReactionCreateManyMessageInput[]
  }

  export type MessageReadUpsertWithWhereUniqueWithoutMessageInput = {
    where: MessageReadWhereUniqueInput
    update: XOR<MessageReadUpdateWithoutMessageInput, MessageReadUncheckedUpdateWithoutMessageInput>
    create: XOR<MessageReadCreateWithoutMessageInput, MessageReadUncheckedCreateWithoutMessageInput>
  }

  export type MessageReadUpdateWithWhereUniqueWithoutMessageInput = {
    where: MessageReadWhereUniqueInput
    data: XOR<MessageReadUpdateWithoutMessageInput, MessageReadUncheckedUpdateWithoutMessageInput>
  }

  export type MessageReadUpdateManyWithWhereWithoutMessageInput = {
    where: MessageReadScalarWhereInput
    data: XOR<MessageReadUpdateManyMutationInput, MessageReadUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageReadScalarWhereInput = {
    AND?: MessageReadScalarWhereInput | MessageReadScalarWhereInput[]
    OR?: MessageReadScalarWhereInput[]
    NOT?: MessageReadScalarWhereInput | MessageReadScalarWhereInput[]
    id?: StringFilter<"MessageRead"> | string
    messageId?: StringFilter<"MessageRead"> | string
    userId?: StringFilter<"MessageRead"> | string
    readAt?: DateTimeFilter<"MessageRead"> | Date | string
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupUpsertWithoutMessagesInput = {
    update: XOR<GroupUpdateWithoutMessagesInput, GroupUncheckedUpdateWithoutMessagesInput>
    create: XOR<GroupCreateWithoutMessagesInput, GroupUncheckedCreateWithoutMessagesInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutMessagesInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutMessagesInput, GroupUncheckedUpdateWithoutMessagesInput>
  }

  export type GroupUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutOwnedGroupsNestedInput
    members?: GroupMemberUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUpdateManyWithoutGroupNestedInput
    files?: FileUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutGroupNestedInput
    tasks?: TaskUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    members?: GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUncheckedUpdateManyWithoutGroupNestedInput
    files?: FileUncheckedUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUncheckedUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutGroupNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type MessageUpsertWithoutRepliesInput = {
    update: XOR<MessageUpdateWithoutRepliesInput, MessageUncheckedUpdateWithoutRepliesInput>
    create: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutRepliesInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutRepliesInput, MessageUncheckedUpdateWithoutRepliesInput>
  }

  export type MessageUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUpdateManyWithoutMessageNestedInput
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    group?: GroupUpdateOneRequiredWithoutMessagesNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    attachments?: FileUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUncheckedUpdateManyWithoutMessageNestedInput
    attachments?: FileUncheckedUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutReplyToInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReplyToInput, MessageUncheckedUpdateWithoutReplyToInput>
    create: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReplyToInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReplyToInput, MessageUncheckedUpdateWithoutReplyToInput>
  }

  export type MessageUpdateManyWithWhereWithoutReplyToInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReplyToInput>
  }

  export type FileUpsertWithWhereUniqueWithoutMessagesInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutMessagesInput, FileUncheckedUpdateWithoutMessagesInput>
    create: XOR<FileCreateWithoutMessagesInput, FileUncheckedCreateWithoutMessagesInput>
  }

  export type FileUpdateWithWhereUniqueWithoutMessagesInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutMessagesInput, FileUncheckedUpdateWithoutMessagesInput>
  }

  export type FileUpdateManyWithWhereWithoutMessagesInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutMessagesInput>
  }

  export type ReactionUpsertWithWhereUniqueWithoutMessageInput = {
    where: ReactionWhereUniqueInput
    update: XOR<ReactionUpdateWithoutMessageInput, ReactionUncheckedUpdateWithoutMessageInput>
    create: XOR<ReactionCreateWithoutMessageInput, ReactionUncheckedCreateWithoutMessageInput>
  }

  export type ReactionUpdateWithWhereUniqueWithoutMessageInput = {
    where: ReactionWhereUniqueInput
    data: XOR<ReactionUpdateWithoutMessageInput, ReactionUncheckedUpdateWithoutMessageInput>
  }

  export type ReactionUpdateManyWithWhereWithoutMessageInput = {
    where: ReactionScalarWhereInput
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageCreateWithoutReadByInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    sender: UserCreateNestedOneWithoutSentMessagesInput
    group: GroupCreateNestedOneWithoutMessagesInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    attachments?: FileCreateNestedManyWithoutMessagesInput
    reactions?: ReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutReadByInput = {
    id?: string
    senderId: string
    groupId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replyToId?: string | null
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
    attachments?: FileUncheckedCreateNestedManyWithoutMessagesInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutReadByInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput>
  }

  export type MessageUpsertWithoutReadByInput = {
    update: XOR<MessageUpdateWithoutReadByInput, MessageUncheckedUpdateWithoutReadByInput>
    create: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutReadByInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutReadByInput, MessageUncheckedUpdateWithoutReadByInput>
  }

  export type MessageUpdateWithoutReadByInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    group?: GroupUpdateOneRequiredWithoutMessagesNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    attachments?: FileUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutReadByInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
    attachments?: FileUncheckedUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type UserCreateWithoutUserSecurityLogsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserSecurityLogsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserSecurityLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserSecurityLogsInput, UserUncheckedCreateWithoutUserSecurityLogsInput>
  }

  export type UserUpsertWithoutUserSecurityLogsInput = {
    update: XOR<UserUpdateWithoutUserSecurityLogsInput, UserUncheckedUpdateWithoutUserSecurityLogsInput>
    create: XOR<UserCreateWithoutUserSecurityLogsInput, UserUncheckedCreateWithoutUserSecurityLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserSecurityLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserSecurityLogsInput, UserUncheckedUpdateWithoutUserSecurityLogsInput>
  }

  export type UserUpdateWithoutUserSecurityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserSecurityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupCreateWithoutEncryptionKeysInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    avatarUrl?: string | null
    owner: UserCreateNestedOneWithoutOwnedGroupsInput
    members?: GroupMemberCreateNestedManyWithoutGroupInput
    messages?: MessageCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardCreateNestedManyWithoutGroupInput
    files?: FileCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutGroupInput
    tasks?: TaskCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutEncryptionKeysInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    isPrivate?: boolean
    avatarUrl?: string | null
    members?: GroupMemberUncheckedCreateNestedManyWithoutGroupInput
    messages?: MessageUncheckedCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardUncheckedCreateNestedManyWithoutGroupInput
    files?: FileUncheckedCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutGroupInput
    tasks?: TaskUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutEncryptionKeysInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutEncryptionKeysInput, GroupUncheckedCreateWithoutEncryptionKeysInput>
  }

  export type EncryptionKeyCreateWithoutRelatedToInput = {
    id?: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    group?: GroupCreateNestedOneWithoutEncryptionKeysInput
    relatedKey?: EncryptionKeyCreateNestedOneWithoutRelatedToInput
  }

  export type EncryptionKeyUncheckedCreateWithoutRelatedToInput = {
    id?: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    groupId?: string | null
    relatedKeyId?: string | null
  }

  export type EncryptionKeyCreateOrConnectWithoutRelatedToInput = {
    where: EncryptionKeyWhereUniqueInput
    create: XOR<EncryptionKeyCreateWithoutRelatedToInput, EncryptionKeyUncheckedCreateWithoutRelatedToInput>
  }

  export type EncryptionKeyCreateWithoutRelatedKeyInput = {
    id?: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    group?: GroupCreateNestedOneWithoutEncryptionKeysInput
    relatedTo?: EncryptionKeyCreateNestedManyWithoutRelatedKeyInput
  }

  export type EncryptionKeyUncheckedCreateWithoutRelatedKeyInput = {
    id?: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    groupId?: string | null
    relatedTo?: EncryptionKeyUncheckedCreateNestedManyWithoutRelatedKeyInput
  }

  export type EncryptionKeyCreateOrConnectWithoutRelatedKeyInput = {
    where: EncryptionKeyWhereUniqueInput
    create: XOR<EncryptionKeyCreateWithoutRelatedKeyInput, EncryptionKeyUncheckedCreateWithoutRelatedKeyInput>
  }

  export type EncryptionKeyCreateManyRelatedKeyInputEnvelope = {
    data: EncryptionKeyCreateManyRelatedKeyInput | EncryptionKeyCreateManyRelatedKeyInput[]
  }

  export type GroupUpsertWithoutEncryptionKeysInput = {
    update: XOR<GroupUpdateWithoutEncryptionKeysInput, GroupUncheckedUpdateWithoutEncryptionKeysInput>
    create: XOR<GroupCreateWithoutEncryptionKeysInput, GroupUncheckedCreateWithoutEncryptionKeysInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutEncryptionKeysInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutEncryptionKeysInput, GroupUncheckedUpdateWithoutEncryptionKeysInput>
  }

  export type GroupUpdateWithoutEncryptionKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutOwnedGroupsNestedInput
    members?: GroupMemberUpdateManyWithoutGroupNestedInput
    messages?: MessageUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUpdateManyWithoutGroupNestedInput
    files?: FileUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutGroupNestedInput
    tasks?: TaskUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutEncryptionKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    members?: GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
    messages?: MessageUncheckedUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUncheckedUpdateManyWithoutGroupNestedInput
    files?: FileUncheckedUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutGroupNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type EncryptionKeyUpsertWithoutRelatedToInput = {
    update: XOR<EncryptionKeyUpdateWithoutRelatedToInput, EncryptionKeyUncheckedUpdateWithoutRelatedToInput>
    create: XOR<EncryptionKeyCreateWithoutRelatedToInput, EncryptionKeyUncheckedCreateWithoutRelatedToInput>
    where?: EncryptionKeyWhereInput
  }

  export type EncryptionKeyUpdateToOneWithWhereWithoutRelatedToInput = {
    where?: EncryptionKeyWhereInput
    data: XOR<EncryptionKeyUpdateWithoutRelatedToInput, EncryptionKeyUncheckedUpdateWithoutRelatedToInput>
  }

  export type EncryptionKeyUpdateWithoutRelatedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    group?: GroupUpdateOneWithoutEncryptionKeysNestedInput
    relatedKey?: EncryptionKeyUpdateOneWithoutRelatedToNestedInput
  }

  export type EncryptionKeyUncheckedUpdateWithoutRelatedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedKeyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EncryptionKeyUpsertWithWhereUniqueWithoutRelatedKeyInput = {
    where: EncryptionKeyWhereUniqueInput
    update: XOR<EncryptionKeyUpdateWithoutRelatedKeyInput, EncryptionKeyUncheckedUpdateWithoutRelatedKeyInput>
    create: XOR<EncryptionKeyCreateWithoutRelatedKeyInput, EncryptionKeyUncheckedCreateWithoutRelatedKeyInput>
  }

  export type EncryptionKeyUpdateWithWhereUniqueWithoutRelatedKeyInput = {
    where: EncryptionKeyWhereUniqueInput
    data: XOR<EncryptionKeyUpdateWithoutRelatedKeyInput, EncryptionKeyUncheckedUpdateWithoutRelatedKeyInput>
  }

  export type EncryptionKeyUpdateManyWithWhereWithoutRelatedKeyInput = {
    where: EncryptionKeyScalarWhereInput
    data: XOR<EncryptionKeyUpdateManyMutationInput, EncryptionKeyUncheckedUpdateManyWithoutRelatedKeyInput>
  }

  export type GroupCreateWithoutDiscussionBoardsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    avatarUrl?: string | null
    owner: UserCreateNestedOneWithoutOwnedGroupsInput
    members?: GroupMemberCreateNestedManyWithoutGroupInput
    messages?: MessageCreateNestedManyWithoutGroupInput
    files?: FileCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutGroupInput
    tasks?: TaskCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutDiscussionBoardsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    isPrivate?: boolean
    avatarUrl?: string | null
    members?: GroupMemberUncheckedCreateNestedManyWithoutGroupInput
    messages?: MessageUncheckedCreateNestedManyWithoutGroupInput
    files?: FileUncheckedCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyUncheckedCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutGroupInput
    tasks?: TaskUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutDiscussionBoardsInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutDiscussionBoardsInput, GroupUncheckedCreateWithoutDiscussionBoardsInput>
  }

  export type DiscussionPostCreateWithoutBoardInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    author: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    attachments?: FileCreateNestedManyWithoutPostsInput
    reactions?: ReactionCreateNestedManyWithoutPostInput
  }

  export type DiscussionPostUncheckedCreateWithoutBoardInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    attachments?: FileUncheckedCreateNestedManyWithoutPostsInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutPostInput
  }

  export type DiscussionPostCreateOrConnectWithoutBoardInput = {
    where: DiscussionPostWhereUniqueInput
    create: XOR<DiscussionPostCreateWithoutBoardInput, DiscussionPostUncheckedCreateWithoutBoardInput>
  }

  export type DiscussionPostCreateManyBoardInputEnvelope = {
    data: DiscussionPostCreateManyBoardInput | DiscussionPostCreateManyBoardInput[]
  }

  export type GroupUpsertWithoutDiscussionBoardsInput = {
    update: XOR<GroupUpdateWithoutDiscussionBoardsInput, GroupUncheckedUpdateWithoutDiscussionBoardsInput>
    create: XOR<GroupCreateWithoutDiscussionBoardsInput, GroupUncheckedCreateWithoutDiscussionBoardsInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutDiscussionBoardsInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutDiscussionBoardsInput, GroupUncheckedUpdateWithoutDiscussionBoardsInput>
  }

  export type GroupUpdateWithoutDiscussionBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutOwnedGroupsNestedInput
    members?: GroupMemberUpdateManyWithoutGroupNestedInput
    messages?: MessageUpdateManyWithoutGroupNestedInput
    files?: FileUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutGroupNestedInput
    tasks?: TaskUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutDiscussionBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    members?: GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
    messages?: MessageUncheckedUpdateManyWithoutGroupNestedInput
    files?: FileUncheckedUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUncheckedUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutGroupNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type DiscussionPostUpsertWithWhereUniqueWithoutBoardInput = {
    where: DiscussionPostWhereUniqueInput
    update: XOR<DiscussionPostUpdateWithoutBoardInput, DiscussionPostUncheckedUpdateWithoutBoardInput>
    create: XOR<DiscussionPostCreateWithoutBoardInput, DiscussionPostUncheckedCreateWithoutBoardInput>
  }

  export type DiscussionPostUpdateWithWhereUniqueWithoutBoardInput = {
    where: DiscussionPostWhereUniqueInput
    data: XOR<DiscussionPostUpdateWithoutBoardInput, DiscussionPostUncheckedUpdateWithoutBoardInput>
  }

  export type DiscussionPostUpdateManyWithWhereWithoutBoardInput = {
    where: DiscussionPostScalarWhereInput
    data: XOR<DiscussionPostUpdateManyMutationInput, DiscussionPostUncheckedUpdateManyWithoutBoardInput>
  }

  export type UserCreateWithoutPostsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type DiscussionBoardCreateWithoutPostsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    sortOrder?: number
    group: GroupCreateNestedOneWithoutDiscussionBoardsInput
  }

  export type DiscussionBoardUncheckedCreateWithoutPostsInput = {
    id?: string
    name: string
    description?: string | null
    groupId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    sortOrder?: number
  }

  export type DiscussionBoardCreateOrConnectWithoutPostsInput = {
    where: DiscussionBoardWhereUniqueInput
    create: XOR<DiscussionBoardCreateWithoutPostsInput, DiscussionBoardUncheckedCreateWithoutPostsInput>
  }

  export type CommentCreateWithoutPostInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    file?: FileCreateNestedOneWithoutCommentsInput
    parentComment?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentCommentInput
    reactions?: ReactionCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutPostInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    fileId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentCommentInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutPostInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentCreateManyPostInputEnvelope = {
    data: CommentCreateManyPostInput | CommentCreateManyPostInput[]
  }

  export type FileCreateWithoutPostsInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
    group?: GroupCreateNestedOneWithoutFilesInput
    comments?: CommentCreateNestedManyWithoutFileInput
    reactions?: ReactionCreateNestedManyWithoutFileInput
    messages?: MessageCreateNestedManyWithoutAttachmentsInput
  }

  export type FileUncheckedCreateWithoutPostsInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    uploaderId: string
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutFileInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutFileInput
    messages?: MessageUncheckedCreateNestedManyWithoutAttachmentsInput
  }

  export type FileCreateOrConnectWithoutPostsInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutPostsInput, FileUncheckedCreateWithoutPostsInput>
  }

  export type ReactionCreateWithoutPostInput = {
    id?: string
    type: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReactionsInput
    message?: MessageCreateNestedOneWithoutReactionsInput
    comment?: CommentCreateNestedOneWithoutReactionsInput
    file?: FileCreateNestedOneWithoutReactionsInput
  }

  export type ReactionUncheckedCreateWithoutPostInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
    messageId?: string | null
    commentId?: string | null
    fileId?: string | null
  }

  export type ReactionCreateOrConnectWithoutPostInput = {
    where: ReactionWhereUniqueInput
    create: XOR<ReactionCreateWithoutPostInput, ReactionUncheckedCreateWithoutPostInput>
  }

  export type ReactionCreateManyPostInputEnvelope = {
    data: ReactionCreateManyPostInput | ReactionCreateManyPostInput[]
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DiscussionBoardUpsertWithoutPostsInput = {
    update: XOR<DiscussionBoardUpdateWithoutPostsInput, DiscussionBoardUncheckedUpdateWithoutPostsInput>
    create: XOR<DiscussionBoardCreateWithoutPostsInput, DiscussionBoardUncheckedCreateWithoutPostsInput>
    where?: DiscussionBoardWhereInput
  }

  export type DiscussionBoardUpdateToOneWithWhereWithoutPostsInput = {
    where?: DiscussionBoardWhereInput
    data: XOR<DiscussionBoardUpdateWithoutPostsInput, DiscussionBoardUncheckedUpdateWithoutPostsInput>
  }

  export type DiscussionBoardUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    group?: GroupUpdateOneRequiredWithoutDiscussionBoardsNestedInput
  }

  export type DiscussionBoardUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
  }

  export type CommentUpdateManyWithWhereWithoutPostInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutPostInput>
  }

  export type FileUpsertWithWhereUniqueWithoutPostsInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutPostsInput, FileUncheckedUpdateWithoutPostsInput>
    create: XOR<FileCreateWithoutPostsInput, FileUncheckedCreateWithoutPostsInput>
  }

  export type FileUpdateWithWhereUniqueWithoutPostsInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutPostsInput, FileUncheckedUpdateWithoutPostsInput>
  }

  export type FileUpdateManyWithWhereWithoutPostsInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutPostsInput>
  }

  export type ReactionUpsertWithWhereUniqueWithoutPostInput = {
    where: ReactionWhereUniqueInput
    update: XOR<ReactionUpdateWithoutPostInput, ReactionUncheckedUpdateWithoutPostInput>
    create: XOR<ReactionCreateWithoutPostInput, ReactionUncheckedCreateWithoutPostInput>
  }

  export type ReactionUpdateWithWhereUniqueWithoutPostInput = {
    where: ReactionWhereUniqueInput
    data: XOR<ReactionUpdateWithoutPostInput, ReactionUncheckedUpdateWithoutPostInput>
  }

  export type ReactionUpdateManyWithWhereWithoutPostInput = {
    where: ReactionScalarWhereInput
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyWithoutPostInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type DiscussionPostCreateWithoutCommentsInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    author: UserCreateNestedOneWithoutPostsInput
    board: DiscussionBoardCreateNestedOneWithoutPostsInput
    attachments?: FileCreateNestedManyWithoutPostsInput
    reactions?: ReactionCreateNestedManyWithoutPostInput
  }

  export type DiscussionPostUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    boardId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    attachments?: FileUncheckedCreateNestedManyWithoutPostsInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutPostInput
  }

  export type DiscussionPostCreateOrConnectWithoutCommentsInput = {
    where: DiscussionPostWhereUniqueInput
    create: XOR<DiscussionPostCreateWithoutCommentsInput, DiscussionPostUncheckedCreateWithoutCommentsInput>
  }

  export type FileCreateWithoutCommentsInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
    group?: GroupCreateNestedOneWithoutFilesInput
    reactions?: ReactionCreateNestedManyWithoutFileInput
    messages?: MessageCreateNestedManyWithoutAttachmentsInput
    posts?: DiscussionPostCreateNestedManyWithoutAttachmentsInput
  }

  export type FileUncheckedCreateWithoutCommentsInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    uploaderId: string
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    reactions?: ReactionUncheckedCreateNestedManyWithoutFileInput
    messages?: MessageUncheckedCreateNestedManyWithoutAttachmentsInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAttachmentsInput
  }

  export type FileCreateOrConnectWithoutCommentsInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutCommentsInput, FileUncheckedCreateWithoutCommentsInput>
  }

  export type CommentCreateWithoutRepliesInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    post?: DiscussionPostCreateNestedOneWithoutCommentsInput
    file?: FileCreateNestedOneWithoutCommentsInput
    parentComment?: CommentCreateNestedOneWithoutRepliesInput
    reactions?: ReactionCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutRepliesInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    postId?: string | null
    fileId?: string | null
    reactions?: ReactionUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutRepliesInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
  }

  export type CommentCreateWithoutParentCommentInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    post?: DiscussionPostCreateNestedOneWithoutCommentsInput
    file?: FileCreateNestedOneWithoutCommentsInput
    replies?: CommentCreateNestedManyWithoutParentCommentInput
    reactions?: ReactionCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutParentCommentInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId?: string | null
    fileId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentCommentInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutParentCommentInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutParentCommentInput, CommentUncheckedCreateWithoutParentCommentInput>
  }

  export type CommentCreateManyParentCommentInputEnvelope = {
    data: CommentCreateManyParentCommentInput | CommentCreateManyParentCommentInput[]
  }

  export type ReactionCreateWithoutCommentInput = {
    id?: string
    type: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReactionsInput
    message?: MessageCreateNestedOneWithoutReactionsInput
    post?: DiscussionPostCreateNestedOneWithoutReactionsInput
    file?: FileCreateNestedOneWithoutReactionsInput
  }

  export type ReactionUncheckedCreateWithoutCommentInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
    messageId?: string | null
    postId?: string | null
    fileId?: string | null
  }

  export type ReactionCreateOrConnectWithoutCommentInput = {
    where: ReactionWhereUniqueInput
    create: XOR<ReactionCreateWithoutCommentInput, ReactionUncheckedCreateWithoutCommentInput>
  }

  export type ReactionCreateManyCommentInputEnvelope = {
    data: ReactionCreateManyCommentInput | ReactionCreateManyCommentInput[]
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DiscussionPostUpsertWithoutCommentsInput = {
    update: XOR<DiscussionPostUpdateWithoutCommentsInput, DiscussionPostUncheckedUpdateWithoutCommentsInput>
    create: XOR<DiscussionPostCreateWithoutCommentsInput, DiscussionPostUncheckedCreateWithoutCommentsInput>
    where?: DiscussionPostWhereInput
  }

  export type DiscussionPostUpdateToOneWithWhereWithoutCommentsInput = {
    where?: DiscussionPostWhereInput
    data: XOR<DiscussionPostUpdateWithoutCommentsInput, DiscussionPostUncheckedUpdateWithoutCommentsInput>
  }

  export type DiscussionPostUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    board?: DiscussionBoardUpdateOneRequiredWithoutPostsNestedInput
    attachments?: FileUpdateManyWithoutPostsNestedInput
    reactions?: ReactionUpdateManyWithoutPostNestedInput
  }

  export type DiscussionPostUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    attachments?: FileUncheckedUpdateManyWithoutPostsNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type FileUpsertWithoutCommentsInput = {
    update: XOR<FileUpdateWithoutCommentsInput, FileUncheckedUpdateWithoutCommentsInput>
    create: XOR<FileCreateWithoutCommentsInput, FileUncheckedCreateWithoutCommentsInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutCommentsInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutCommentsInput, FileUncheckedUpdateWithoutCommentsInput>
  }

  export type FileUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    group?: GroupUpdateOneWithoutFilesNestedInput
    reactions?: ReactionUpdateManyWithoutFileNestedInput
    messages?: MessageUpdateManyWithoutAttachmentsNestedInput
    posts?: DiscussionPostUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    reactions?: ReactionUncheckedUpdateManyWithoutFileNestedInput
    messages?: MessageUncheckedUpdateManyWithoutAttachmentsNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAttachmentsNestedInput
  }

  export type CommentUpsertWithoutRepliesInput = {
    update: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutRepliesInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: DiscussionPostUpdateOneWithoutCommentsNestedInput
    file?: FileUpdateOneWithoutCommentsNestedInput
    parentComment?: CommentUpdateOneWithoutRepliesNestedInput
    reactions?: ReactionUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    reactions?: ReactionUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutParentCommentInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutParentCommentInput, CommentUncheckedUpdateWithoutParentCommentInput>
    create: XOR<CommentCreateWithoutParentCommentInput, CommentUncheckedCreateWithoutParentCommentInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutParentCommentInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutParentCommentInput, CommentUncheckedUpdateWithoutParentCommentInput>
  }

  export type CommentUpdateManyWithWhereWithoutParentCommentInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutParentCommentInput>
  }

  export type ReactionUpsertWithWhereUniqueWithoutCommentInput = {
    where: ReactionWhereUniqueInput
    update: XOR<ReactionUpdateWithoutCommentInput, ReactionUncheckedUpdateWithoutCommentInput>
    create: XOR<ReactionCreateWithoutCommentInput, ReactionUncheckedCreateWithoutCommentInput>
  }

  export type ReactionUpdateWithWhereUniqueWithoutCommentInput = {
    where: ReactionWhereUniqueInput
    data: XOR<ReactionUpdateWithoutCommentInput, ReactionUncheckedUpdateWithoutCommentInput>
  }

  export type ReactionUpdateManyWithWhereWithoutCommentInput = {
    where: ReactionScalarWhereInput
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyWithoutCommentInput>
  }

  export type UserCreateWithoutReactionsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReactionsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReactionsInput, UserUncheckedCreateWithoutReactionsInput>
  }

  export type MessageCreateWithoutReactionsInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadCreateNestedManyWithoutMessageInput
    sender: UserCreateNestedOneWithoutSentMessagesInput
    group: GroupCreateNestedOneWithoutMessagesInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    attachments?: FileCreateNestedManyWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutReactionsInput = {
    id?: string
    senderId: string
    groupId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replyToId?: string | null
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
    attachments?: FileUncheckedCreateNestedManyWithoutMessagesInput
  }

  export type MessageCreateOrConnectWithoutReactionsInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReactionsInput, MessageUncheckedCreateWithoutReactionsInput>
  }

  export type DiscussionPostCreateWithoutReactionsInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    author: UserCreateNestedOneWithoutPostsInput
    board: DiscussionBoardCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    attachments?: FileCreateNestedManyWithoutPostsInput
  }

  export type DiscussionPostUncheckedCreateWithoutReactionsInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    boardId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    attachments?: FileUncheckedCreateNestedManyWithoutPostsInput
  }

  export type DiscussionPostCreateOrConnectWithoutReactionsInput = {
    where: DiscussionPostWhereUniqueInput
    create: XOR<DiscussionPostCreateWithoutReactionsInput, DiscussionPostUncheckedCreateWithoutReactionsInput>
  }

  export type CommentCreateWithoutReactionsInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    post?: DiscussionPostCreateNestedOneWithoutCommentsInput
    file?: FileCreateNestedOneWithoutCommentsInput
    parentComment?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentCommentInput
  }

  export type CommentUncheckedCreateWithoutReactionsInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    postId?: string | null
    fileId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type CommentCreateOrConnectWithoutReactionsInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutReactionsInput, CommentUncheckedCreateWithoutReactionsInput>
  }

  export type FileCreateWithoutReactionsInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
    group?: GroupCreateNestedOneWithoutFilesInput
    comments?: CommentCreateNestedManyWithoutFileInput
    messages?: MessageCreateNestedManyWithoutAttachmentsInput
    posts?: DiscussionPostCreateNestedManyWithoutAttachmentsInput
  }

  export type FileUncheckedCreateWithoutReactionsInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    uploaderId: string
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutFileInput
    messages?: MessageUncheckedCreateNestedManyWithoutAttachmentsInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAttachmentsInput
  }

  export type FileCreateOrConnectWithoutReactionsInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutReactionsInput, FileUncheckedCreateWithoutReactionsInput>
  }

  export type UserUpsertWithoutReactionsInput = {
    update: XOR<UserUpdateWithoutReactionsInput, UserUncheckedUpdateWithoutReactionsInput>
    create: XOR<UserCreateWithoutReactionsInput, UserUncheckedCreateWithoutReactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReactionsInput, UserUncheckedUpdateWithoutReactionsInput>
  }

  export type UserUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MessageUpsertWithoutReactionsInput = {
    update: XOR<MessageUpdateWithoutReactionsInput, MessageUncheckedUpdateWithoutReactionsInput>
    create: XOR<MessageCreateWithoutReactionsInput, MessageUncheckedCreateWithoutReactionsInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutReactionsInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutReactionsInput, MessageUncheckedUpdateWithoutReactionsInput>
  }

  export type MessageUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUpdateManyWithoutMessageNestedInput
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    group?: GroupUpdateOneRequiredWithoutMessagesNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    attachments?: FileUpdateManyWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
    attachments?: FileUncheckedUpdateManyWithoutMessagesNestedInput
  }

  export type DiscussionPostUpsertWithoutReactionsInput = {
    update: XOR<DiscussionPostUpdateWithoutReactionsInput, DiscussionPostUncheckedUpdateWithoutReactionsInput>
    create: XOR<DiscussionPostCreateWithoutReactionsInput, DiscussionPostUncheckedCreateWithoutReactionsInput>
    where?: DiscussionPostWhereInput
  }

  export type DiscussionPostUpdateToOneWithWhereWithoutReactionsInput = {
    where?: DiscussionPostWhereInput
    data: XOR<DiscussionPostUpdateWithoutReactionsInput, DiscussionPostUncheckedUpdateWithoutReactionsInput>
  }

  export type DiscussionPostUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    board?: DiscussionBoardUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    attachments?: FileUpdateManyWithoutPostsNestedInput
  }

  export type DiscussionPostUncheckedUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    attachments?: FileUncheckedUpdateManyWithoutPostsNestedInput
  }

  export type CommentUpsertWithoutReactionsInput = {
    update: XOR<CommentUpdateWithoutReactionsInput, CommentUncheckedUpdateWithoutReactionsInput>
    create: XOR<CommentCreateWithoutReactionsInput, CommentUncheckedCreateWithoutReactionsInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutReactionsInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutReactionsInput, CommentUncheckedUpdateWithoutReactionsInput>
  }

  export type CommentUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: DiscussionPostUpdateOneWithoutCommentsNestedInput
    file?: FileUpdateOneWithoutCommentsNestedInput
    parentComment?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type FileUpsertWithoutReactionsInput = {
    update: XOR<FileUpdateWithoutReactionsInput, FileUncheckedUpdateWithoutReactionsInput>
    create: XOR<FileCreateWithoutReactionsInput, FileUncheckedCreateWithoutReactionsInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutReactionsInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutReactionsInput, FileUncheckedUpdateWithoutReactionsInput>
  }

  export type FileUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    group?: GroupUpdateOneWithoutFilesNestedInput
    comments?: CommentUpdateManyWithoutFileNestedInput
    messages?: MessageUpdateManyWithoutAttachmentsNestedInput
    posts?: DiscussionPostUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutFileNestedInput
    messages?: MessageUncheckedUpdateManyWithoutAttachmentsNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAttachmentsNestedInput
  }

  export type UserCreateWithoutUploadedFilesInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUploadedFilesInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUploadedFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
  }

  export type GroupCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    avatarUrl?: string | null
    owner: UserCreateNestedOneWithoutOwnedGroupsInput
    members?: GroupMemberCreateNestedManyWithoutGroupInput
    messages?: MessageCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutGroupInput
    tasks?: TaskCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    isPrivate?: boolean
    avatarUrl?: string | null
    members?: GroupMemberUncheckedCreateNestedManyWithoutGroupInput
    messages?: MessageUncheckedCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardUncheckedCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyUncheckedCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutGroupInput
    tasks?: TaskUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutFilesInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutFilesInput, GroupUncheckedCreateWithoutFilesInput>
  }

  export type CommentCreateWithoutFileInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    post?: DiscussionPostCreateNestedOneWithoutCommentsInput
    parentComment?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentCommentInput
    reactions?: ReactionCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutFileInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    postId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentCommentInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutFileInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutFileInput, CommentUncheckedCreateWithoutFileInput>
  }

  export type CommentCreateManyFileInputEnvelope = {
    data: CommentCreateManyFileInput | CommentCreateManyFileInput[]
  }

  export type ReactionCreateWithoutFileInput = {
    id?: string
    type: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReactionsInput
    message?: MessageCreateNestedOneWithoutReactionsInput
    post?: DiscussionPostCreateNestedOneWithoutReactionsInput
    comment?: CommentCreateNestedOneWithoutReactionsInput
  }

  export type ReactionUncheckedCreateWithoutFileInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
    messageId?: string | null
    postId?: string | null
    commentId?: string | null
  }

  export type ReactionCreateOrConnectWithoutFileInput = {
    where: ReactionWhereUniqueInput
    create: XOR<ReactionCreateWithoutFileInput, ReactionUncheckedCreateWithoutFileInput>
  }

  export type ReactionCreateManyFileInputEnvelope = {
    data: ReactionCreateManyFileInput | ReactionCreateManyFileInput[]
  }

  export type MessageCreateWithoutAttachmentsInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadCreateNestedManyWithoutMessageInput
    sender: UserCreateNestedOneWithoutSentMessagesInput
    group: GroupCreateNestedOneWithoutMessagesInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    reactions?: ReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    senderId: string
    groupId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replyToId?: string | null
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
    readBy?: MessageReadUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutAttachmentsInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutAttachmentsInput, MessageUncheckedCreateWithoutAttachmentsInput>
  }

  export type DiscussionPostCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    author: UserCreateNestedOneWithoutPostsInput
    board: DiscussionBoardCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    reactions?: ReactionCreateNestedManyWithoutPostInput
  }

  export type DiscussionPostUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    boardId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutPostInput
  }

  export type DiscussionPostCreateOrConnectWithoutAttachmentsInput = {
    where: DiscussionPostWhereUniqueInput
    create: XOR<DiscussionPostCreateWithoutAttachmentsInput, DiscussionPostUncheckedCreateWithoutAttachmentsInput>
  }

  export type UserUpsertWithoutUploadedFilesInput = {
    update: XOR<UserUpdateWithoutUploadedFilesInput, UserUncheckedUpdateWithoutUploadedFilesInput>
    create: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedFilesInput, UserUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type UserUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupUpsertWithoutFilesInput = {
    update: XOR<GroupUpdateWithoutFilesInput, GroupUncheckedUpdateWithoutFilesInput>
    create: XOR<GroupCreateWithoutFilesInput, GroupUncheckedCreateWithoutFilesInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutFilesInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutFilesInput, GroupUncheckedUpdateWithoutFilesInput>
  }

  export type GroupUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutOwnedGroupsNestedInput
    members?: GroupMemberUpdateManyWithoutGroupNestedInput
    messages?: MessageUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutGroupNestedInput
    tasks?: TaskUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    members?: GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
    messages?: MessageUncheckedUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUncheckedUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUncheckedUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutGroupNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutFileInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutFileInput, CommentUncheckedUpdateWithoutFileInput>
    create: XOR<CommentCreateWithoutFileInput, CommentUncheckedCreateWithoutFileInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutFileInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutFileInput, CommentUncheckedUpdateWithoutFileInput>
  }

  export type CommentUpdateManyWithWhereWithoutFileInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutFileInput>
  }

  export type ReactionUpsertWithWhereUniqueWithoutFileInput = {
    where: ReactionWhereUniqueInput
    update: XOR<ReactionUpdateWithoutFileInput, ReactionUncheckedUpdateWithoutFileInput>
    create: XOR<ReactionCreateWithoutFileInput, ReactionUncheckedCreateWithoutFileInput>
  }

  export type ReactionUpdateWithWhereUniqueWithoutFileInput = {
    where: ReactionWhereUniqueInput
    data: XOR<ReactionUpdateWithoutFileInput, ReactionUncheckedUpdateWithoutFileInput>
  }

  export type ReactionUpdateManyWithWhereWithoutFileInput = {
    where: ReactionScalarWhereInput
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyWithoutFileInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutAttachmentsInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutAttachmentsInput, MessageUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<MessageCreateWithoutAttachmentsInput, MessageUncheckedCreateWithoutAttachmentsInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutAttachmentsInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutAttachmentsInput, MessageUncheckedUpdateWithoutAttachmentsInput>
  }

  export type MessageUpdateManyWithWhereWithoutAttachmentsInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutAttachmentsInput>
  }

  export type DiscussionPostUpsertWithWhereUniqueWithoutAttachmentsInput = {
    where: DiscussionPostWhereUniqueInput
    update: XOR<DiscussionPostUpdateWithoutAttachmentsInput, DiscussionPostUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<DiscussionPostCreateWithoutAttachmentsInput, DiscussionPostUncheckedCreateWithoutAttachmentsInput>
  }

  export type DiscussionPostUpdateWithWhereUniqueWithoutAttachmentsInput = {
    where: DiscussionPostWhereUniqueInput
    data: XOR<DiscussionPostUpdateWithoutAttachmentsInput, DiscussionPostUncheckedUpdateWithoutAttachmentsInput>
  }

  export type DiscussionPostUpdateManyWithWhereWithoutAttachmentsInput = {
    where: DiscussionPostScalarWhereInput
    data: XOR<DiscussionPostUpdateManyMutationInput, DiscussionPostUncheckedUpdateManyWithoutAttachmentsInput>
  }

  export type UserCreateWithoutPinnedItemsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPinnedItemsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPinnedItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPinnedItemsInput, UserUncheckedCreateWithoutPinnedItemsInput>
  }

  export type GroupCreateWithoutPinnedItemsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    avatarUrl?: string | null
    owner: UserCreateNestedOneWithoutOwnedGroupsInput
    members?: GroupMemberCreateNestedManyWithoutGroupInput
    messages?: MessageCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardCreateNestedManyWithoutGroupInput
    files?: FileCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyCreateNestedManyWithoutGroupInput
    tasks?: TaskCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutPinnedItemsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    isPrivate?: boolean
    avatarUrl?: string | null
    members?: GroupMemberUncheckedCreateNestedManyWithoutGroupInput
    messages?: MessageUncheckedCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardUncheckedCreateNestedManyWithoutGroupInput
    files?: FileUncheckedCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyUncheckedCreateNestedManyWithoutGroupInput
    tasks?: TaskUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutPinnedItemsInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutPinnedItemsInput, GroupUncheckedCreateWithoutPinnedItemsInput>
  }

  export type UserUpsertWithoutPinnedItemsInput = {
    update: XOR<UserUpdateWithoutPinnedItemsInput, UserUncheckedUpdateWithoutPinnedItemsInput>
    create: XOR<UserCreateWithoutPinnedItemsInput, UserUncheckedCreateWithoutPinnedItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPinnedItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPinnedItemsInput, UserUncheckedUpdateWithoutPinnedItemsInput>
  }

  export type UserUpdateWithoutPinnedItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPinnedItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupUpsertWithoutPinnedItemsInput = {
    update: XOR<GroupUpdateWithoutPinnedItemsInput, GroupUncheckedUpdateWithoutPinnedItemsInput>
    create: XOR<GroupCreateWithoutPinnedItemsInput, GroupUncheckedCreateWithoutPinnedItemsInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutPinnedItemsInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutPinnedItemsInput, GroupUncheckedUpdateWithoutPinnedItemsInput>
  }

  export type GroupUpdateWithoutPinnedItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutOwnedGroupsNestedInput
    members?: GroupMemberUpdateManyWithoutGroupNestedInput
    messages?: MessageUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUpdateManyWithoutGroupNestedInput
    files?: FileUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUpdateManyWithoutGroupNestedInput
    tasks?: TaskUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutPinnedItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    members?: GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
    messages?: MessageUncheckedUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUncheckedUpdateManyWithoutGroupNestedInput
    files?: FileUncheckedUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUncheckedUpdateManyWithoutGroupNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type UserCreateWithoutTasksInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTasksInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
  }

  export type GroupCreateWithoutTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    avatarUrl?: string | null
    owner: UserCreateNestedOneWithoutOwnedGroupsInput
    members?: GroupMemberCreateNestedManyWithoutGroupInput
    messages?: MessageCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardCreateNestedManyWithoutGroupInput
    files?: FileCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    isPrivate?: boolean
    avatarUrl?: string | null
    members?: GroupMemberUncheckedCreateNestedManyWithoutGroupInput
    messages?: MessageUncheckedCreateNestedManyWithoutGroupInput
    discussionBoards?: DiscussionBoardUncheckedCreateNestedManyWithoutGroupInput
    files?: FileUncheckedCreateNestedManyWithoutGroupInput
    encryptionKeys?: EncryptionKeyUncheckedCreateNestedManyWithoutGroupInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutTasksInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutTasksInput, GroupUncheckedCreateWithoutTasksInput>
  }

  export type TaskAssignmentCreateWithoutTaskInput = {
    id?: string
    assignedAt?: Date | string
    user: UserCreateNestedOneWithoutTaskAssignmentsInput
  }

  export type TaskAssignmentUncheckedCreateWithoutTaskInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
  }

  export type TaskAssignmentCreateOrConnectWithoutTaskInput = {
    where: TaskAssignmentWhereUniqueInput
    create: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput>
  }

  export type TaskAssignmentCreateManyTaskInputEnvelope = {
    data: TaskAssignmentCreateManyTaskInput | TaskAssignmentCreateManyTaskInput[]
  }

  export type UserUpsertWithoutTasksInput = {
    update: XOR<UserUpdateWithoutTasksInput, UserUncheckedUpdateWithoutTasksInput>
    create: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTasksInput, UserUncheckedUpdateWithoutTasksInput>
  }

  export type UserUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupUpsertWithoutTasksInput = {
    update: XOR<GroupUpdateWithoutTasksInput, GroupUncheckedUpdateWithoutTasksInput>
    create: XOR<GroupCreateWithoutTasksInput, GroupUncheckedCreateWithoutTasksInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutTasksInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutTasksInput, GroupUncheckedUpdateWithoutTasksInput>
  }

  export type GroupUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutOwnedGroupsNestedInput
    members?: GroupMemberUpdateManyWithoutGroupNestedInput
    messages?: MessageUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUpdateManyWithoutGroupNestedInput
    files?: FileUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    members?: GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
    messages?: MessageUncheckedUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUncheckedUpdateManyWithoutGroupNestedInput
    files?: FileUncheckedUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUncheckedUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput = {
    where: TaskAssignmentWhereUniqueInput
    update: XOR<TaskAssignmentUpdateWithoutTaskInput, TaskAssignmentUncheckedUpdateWithoutTaskInput>
    create: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput>
  }

  export type TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput = {
    where: TaskAssignmentWhereUniqueInput
    data: XOR<TaskAssignmentUpdateWithoutTaskInput, TaskAssignmentUncheckedUpdateWithoutTaskInput>
  }

  export type TaskAssignmentUpdateManyWithWhereWithoutTaskInput = {
    where: TaskAssignmentScalarWhereInput
    data: XOR<TaskAssignmentUpdateManyMutationInput, TaskAssignmentUncheckedUpdateManyWithoutTaskInput>
  }

  export type TaskCreateWithoutAssignmentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: string
    priority?: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutTasksInput
    group: GroupCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: string
    priority?: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId: string
    groupId: string
  }

  export type TaskCreateOrConnectWithoutAssignmentsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAssignmentsInput, TaskUncheckedCreateWithoutAssignmentsInput>
  }

  export type UserCreateWithoutTaskAssignmentsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogCreateNestedManyWithoutUserInput
    posts?: DiscussionPostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    reactions?: ReactionCreateNestedManyWithoutUserInput
    uploadedFiles?: FileCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutTaskAssignmentsInput = {
    id?: string
    username: string
    email: string
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isVerified?: boolean
    verificationToken?: string | null
    verificationExpires?: Date | string | null
    resetToken?: string | null
    resetTokenExpires?: Date | string | null
    lastLogin?: Date | string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    lastPasswordChange?: Date | string | null
    previousPasswordHashes?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    ownedGroups?: GroupUncheckedCreateNestedManyWithoutOwnerInput
    memberOfGroups?: GroupMemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userSecurityLogs?: UserSecurityLogUncheckedCreateNestedManyWithoutUserInput
    posts?: DiscussionPostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileUncheckedCreateNestedManyWithoutUploaderInput
    pinnedItems?: PinnedItemUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutTaskAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTaskAssignmentsInput, UserUncheckedCreateWithoutTaskAssignmentsInput>
  }

  export type TaskUpsertWithoutAssignmentsInput = {
    update: XOR<TaskUpdateWithoutAssignmentsInput, TaskUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<TaskCreateWithoutAssignmentsInput, TaskUncheckedCreateWithoutAssignmentsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutAssignmentsInput, TaskUncheckedUpdateWithoutAssignmentsInput>
  }

  export type TaskUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutTasksNestedInput
    group?: GroupUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutTaskAssignmentsInput = {
    update: XOR<UserUpdateWithoutTaskAssignmentsInput, UserUncheckedUpdateWithoutTaskAssignmentsInput>
    create: XOR<UserCreateWithoutTaskAssignmentsInput, UserUncheckedCreateWithoutTaskAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTaskAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTaskAssignmentsInput, UserUncheckedUpdateWithoutTaskAssignmentsInput>
  }

  export type UserUpdateWithoutTaskAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutTaskAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastPasswordChange?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    previousPasswordHashes?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    ownedGroups?: GroupUncheckedUpdateManyWithoutOwnerNestedInput
    memberOfGroups?: GroupMemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userSecurityLogs?: UserSecurityLogUncheckedUpdateManyWithoutUserNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileUncheckedUpdateManyWithoutUploaderNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type MessageCreateManySenderInput = {
    id?: string
    groupId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replyToId?: string | null
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
  }

  export type GroupCreateManyOwnerInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    avatarUrl?: string | null
  }

  export type GroupMemberCreateManyUserInput = {
    id?: string
    groupId: string
    role?: string
    joinedAt?: Date | string
    invitedBy?: string | null
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
  }

  export type SessionCreateManyUserInput = {
    id?: string
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
  }

  export type UserSecurityLogCreateManyUserInput = {
    id?: string
    action: string
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    success?: boolean
    details?: string | null
  }

  export type DiscussionPostCreateManyAuthorInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    boardId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
  }

  export type CommentCreateManyAuthorInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    postId?: string | null
    fileId?: string | null
  }

  export type ReactionCreateManyUserInput = {
    id?: string
    type: string
    createdAt?: Date | string
    messageId?: string | null
    postId?: string | null
    commentId?: string | null
    fileId?: string | null
  }

  export type FileCreateManyUploaderInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
  }

  export type PinnedItemCreateManyUserInput = {
    id?: string
    groupId: string
    itemType: string
    itemId: string
    pinnedAt?: Date | string
    note?: string | null
  }

  export type TaskCreateManyCreatorInput = {
    id?: string
    title: string
    description?: string | null
    status?: string
    priority?: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groupId: string
  }

  export type TaskAssignmentCreateManyUserInput = {
    id?: string
    taskId: string
    assignedAt?: Date | string
  }

  export type MessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUpdateManyWithoutMessageNestedInput
    group?: GroupUpdateOneRequiredWithoutMessagesNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    attachments?: FileUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
    attachments?: FileUncheckedUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GroupUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    members?: GroupMemberUpdateManyWithoutGroupNestedInput
    messages?: MessageUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUpdateManyWithoutGroupNestedInput
    files?: FileUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUpdateManyWithoutGroupNestedInput
    tasks?: TaskUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    members?: GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
    messages?: MessageUncheckedUpdateManyWithoutGroupNestedInput
    discussionBoards?: DiscussionBoardUncheckedUpdateManyWithoutGroupNestedInput
    files?: FileUncheckedUpdateManyWithoutGroupNestedInput
    encryptionKeys?: EncryptionKeyUncheckedUpdateManyWithoutGroupNestedInput
    pinnedItems?: PinnedItemUncheckedUpdateManyWithoutGroupNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnNewMessage?: BoolFieldUpdateOperationsInput | boolean
    notifyOnMention?: BoolFieldUpdateOperationsInput | boolean
    notifyOnNewDiscussion?: BoolFieldUpdateOperationsInput | boolean
    group?: GroupUpdateOneRequiredWithoutMembersNestedInput
  }

  export type GroupMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnNewMessage?: BoolFieldUpdateOperationsInput | boolean
    notifyOnMention?: BoolFieldUpdateOperationsInput | boolean
    notifyOnNewDiscussion?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GroupMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnNewMessage?: BoolFieldUpdateOperationsInput | boolean
    notifyOnMention?: BoolFieldUpdateOperationsInput | boolean
    notifyOnNewDiscussion?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserSecurityLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSecurityLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSecurityLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DiscussionPostUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    board?: DiscussionBoardUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    attachments?: FileUpdateManyWithoutPostsNestedInput
    reactions?: ReactionUpdateManyWithoutPostNestedInput
  }

  export type DiscussionPostUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    boardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    attachments?: FileUncheckedUpdateManyWithoutPostsNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type DiscussionPostUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    boardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: DiscussionPostUpdateOneWithoutCommentsNestedInput
    file?: FileUpdateOneWithoutCommentsNestedInput
    parentComment?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentCommentNestedInput
    reactions?: ReactionUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentCommentNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: MessageUpdateOneWithoutReactionsNestedInput
    post?: DiscussionPostUpdateOneWithoutReactionsNestedInput
    comment?: CommentUpdateOneWithoutReactionsNestedInput
    file?: FileUpdateOneWithoutReactionsNestedInput
  }

  export type ReactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    commentId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    commentId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUpdateWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    group?: GroupUpdateOneWithoutFilesNestedInput
    comments?: CommentUpdateManyWithoutFileNestedInput
    reactions?: ReactionUpdateManyWithoutFileNestedInput
    messages?: MessageUpdateManyWithoutAttachmentsNestedInput
    posts?: DiscussionPostUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutFileNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutFileNestedInput
    messages?: MessageUncheckedUpdateManyWithoutAttachmentsNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateManyWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PinnedItemUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    pinnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    group?: GroupUpdateOneRequiredWithoutPinnedItemsNestedInput
  }

  export type PinnedItemUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    pinnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PinnedItemUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    pinnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: GroupUpdateOneRequiredWithoutTasksNestedInput
    assignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupId?: StringFieldUpdateOperationsInput | string
    assignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskAssignmentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type TaskAssignmentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskAssignmentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMemberCreateManyGroupInput = {
    id?: string
    userId: string
    role?: string
    joinedAt?: Date | string
    invitedBy?: string | null
    notifyOnNewMessage?: boolean
    notifyOnMention?: boolean
    notifyOnNewDiscussion?: boolean
  }

  export type MessageCreateManyGroupInput = {
    id?: string
    senderId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replyToId?: string | null
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
  }

  export type DiscussionBoardCreateManyGroupInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    sortOrder?: number
  }

  export type FileCreateManyGroupInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    isEncrypted?: boolean
    encryptionKeyId?: string | null
    encryptionIv?: string | null
    checksum?: string | null
    uploaderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isArchived?: boolean
    thumbnailPath?: string | null
    metadata?: string | null
  }

  export type EncryptionKeyCreateManyGroupInput = {
    id?: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    relatedKeyId?: string | null
  }

  export type PinnedItemCreateManyGroupInput = {
    id?: string
    userId: string
    itemType: string
    itemId: string
    pinnedAt?: Date | string
    note?: string | null
  }

  export type TaskCreateManyGroupInput = {
    id?: string
    title: string
    description?: string | null
    status?: string
    priority?: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId: string
  }

  export type GroupMemberUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnNewMessage?: BoolFieldUpdateOperationsInput | boolean
    notifyOnMention?: BoolFieldUpdateOperationsInput | boolean
    notifyOnNewDiscussion?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutMemberOfGroupsNestedInput
  }

  export type GroupMemberUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnNewMessage?: BoolFieldUpdateOperationsInput | boolean
    notifyOnMention?: BoolFieldUpdateOperationsInput | boolean
    notifyOnNewDiscussion?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GroupMemberUncheckedUpdateManyWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnNewMessage?: BoolFieldUpdateOperationsInput | boolean
    notifyOnMention?: BoolFieldUpdateOperationsInput | boolean
    notifyOnNewDiscussion?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUpdateManyWithoutMessageNestedInput
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    attachments?: FileUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
    attachments?: FileUncheckedUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DiscussionBoardUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    posts?: DiscussionPostUpdateManyWithoutBoardNestedInput
  }

  export type DiscussionBoardUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    posts?: DiscussionPostUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type DiscussionBoardUncheckedUpdateManyWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type FileUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    comments?: CommentUpdateManyWithoutFileNestedInput
    reactions?: ReactionUpdateManyWithoutFileNestedInput
    messages?: MessageUpdateManyWithoutAttachmentsNestedInput
    posts?: DiscussionPostUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutFileNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutFileNestedInput
    messages?: MessageUncheckedUpdateManyWithoutAttachmentsNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateManyWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EncryptionKeyUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    relatedKey?: EncryptionKeyUpdateOneWithoutRelatedToNestedInput
    relatedTo?: EncryptionKeyUpdateManyWithoutRelatedKeyNestedInput
  }

  export type EncryptionKeyUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    relatedKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedTo?: EncryptionKeyUncheckedUpdateManyWithoutRelatedKeyNestedInput
  }

  export type EncryptionKeyUncheckedUpdateManyWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    relatedKeyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PinnedItemUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    pinnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPinnedItemsNestedInput
  }

  export type PinnedItemUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    pinnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PinnedItemUncheckedUpdateManyWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    pinnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutTasksNestedInput
    assignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: StringFieldUpdateOperationsInput | string
    assignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageReadCreateManyMessageInput = {
    id?: string
    userId: string
    readAt?: Date | string
  }

  export type MessageCreateManyReplyToInput = {
    id?: string
    senderId: string
    groupId: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    metaData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ephemeralExpiry?: Date | string | null
    isEphemeral?: boolean
  }

  export type ReactionCreateManyMessageInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
    postId?: string | null
    commentId?: string | null
    fileId?: string | null
  }

  export type MessageReadUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReadUncheckedUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReadUncheckedUpdateManyWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutReplyToInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUpdateManyWithoutMessageNestedInput
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    group?: GroupUpdateOneRequiredWithoutMessagesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    attachments?: FileUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutReplyToInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
    attachments?: FileUncheckedUpdateManyWithoutMessagesNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutReplyToInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FileUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    group?: GroupUpdateOneWithoutFilesNestedInput
    comments?: CommentUpdateManyWithoutFileNestedInput
    reactions?: ReactionUpdateManyWithoutFileNestedInput
    posts?: DiscussionPostUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutFileNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutFileNestedInput
    posts?: DiscussionPostUncheckedUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateManyWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReactionsNestedInput
    post?: DiscussionPostUpdateOneWithoutReactionsNestedInput
    comment?: CommentUpdateOneWithoutReactionsNestedInput
    file?: FileUpdateOneWithoutReactionsNestedInput
  }

  export type ReactionUncheckedUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    commentId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionUncheckedUpdateManyWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    commentId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EncryptionKeyCreateManyRelatedKeyInput = {
    id?: string
    keyType: string
    keyValue: string
    iv: string
    algorithm: string
    createdAt?: Date | string
    expiresAt: Date | string
    isRevoked?: boolean
    groupId?: string | null
  }

  export type EncryptionKeyUpdateWithoutRelatedKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    group?: GroupUpdateOneWithoutEncryptionKeysNestedInput
    relatedTo?: EncryptionKeyUpdateManyWithoutRelatedKeyNestedInput
  }

  export type EncryptionKeyUncheckedUpdateWithoutRelatedKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedTo?: EncryptionKeyUncheckedUpdateManyWithoutRelatedKeyNestedInput
  }

  export type EncryptionKeyUncheckedUpdateManyWithoutRelatedKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyType?: StringFieldUpdateOperationsInput | string
    keyValue?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DiscussionPostCreateManyBoardInput = {
    id?: string
    title: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isLocked?: boolean
    isPinned?: boolean
    viewCount?: number
  }

  export type DiscussionPostUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    attachments?: FileUpdateManyWithoutPostsNestedInput
    reactions?: ReactionUpdateManyWithoutPostNestedInput
  }

  export type DiscussionPostUncheckedUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    attachments?: FileUncheckedUpdateManyWithoutPostsNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type DiscussionPostUncheckedUpdateManyWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyPostInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    fileId?: string | null
  }

  export type ReactionCreateManyPostInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
    messageId?: string | null
    commentId?: string | null
    fileId?: string | null
  }

  export type CommentUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    file?: FileUpdateOneWithoutCommentsNestedInput
    parentComment?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentCommentNestedInput
    reactions?: ReactionUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentCommentNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    group?: GroupUpdateOneWithoutFilesNestedInput
    comments?: CommentUpdateManyWithoutFileNestedInput
    reactions?: ReactionUpdateManyWithoutFileNestedInput
    messages?: MessageUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutFileNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutFileNestedInput
    messages?: MessageUncheckedUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateManyWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    isEncrypted?: BoolFieldUpdateOperationsInput | boolean
    encryptionKeyId?: NullableStringFieldUpdateOperationsInput | string | null
    encryptionIv?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    thumbnailPath?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReactionsNestedInput
    message?: MessageUpdateOneWithoutReactionsNestedInput
    comment?: CommentUpdateOneWithoutReactionsNestedInput
    file?: FileUpdateOneWithoutReactionsNestedInput
  }

  export type ReactionUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    commentId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    commentId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyParentCommentInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId?: string | null
    fileId?: string | null
  }

  export type ReactionCreateManyCommentInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
    messageId?: string | null
    postId?: string | null
    fileId?: string | null
  }

  export type CommentUpdateWithoutParentCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: DiscussionPostUpdateOneWithoutCommentsNestedInput
    file?: FileUpdateOneWithoutCommentsNestedInput
    replies?: CommentUpdateManyWithoutParentCommentNestedInput
    reactions?: ReactionUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutParentCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentCommentNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutParentCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReactionsNestedInput
    message?: MessageUpdateOneWithoutReactionsNestedInput
    post?: DiscussionPostUpdateOneWithoutReactionsNestedInput
    file?: FileUpdateOneWithoutReactionsNestedInput
  }

  export type ReactionUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionUncheckedUpdateManyWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyFileInput = {
    id?: string
    encryptedContent: string
    iv: string
    keyId?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    postId?: string | null
  }

  export type ReactionCreateManyFileInput = {
    id?: string
    type: string
    userId: string
    createdAt?: Date | string
    messageId?: string | null
    postId?: string | null
    commentId?: string | null
  }

  export type CommentUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: DiscussionPostUpdateOneWithoutCommentsNestedInput
    parentComment?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentCommentNestedInput
    reactions?: ReactionUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentCommentNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReactionsNestedInput
    message?: MessageUpdateOneWithoutReactionsNestedInput
    post?: DiscussionPostUpdateOneWithoutReactionsNestedInput
    comment?: CommentUpdateOneWithoutReactionsNestedInput
  }

  export type ReactionUncheckedUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    commentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReactionUncheckedUpdateManyWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    commentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUpdateManyWithoutMessageNestedInput
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    group?: GroupUpdateOneRequiredWithoutMessagesNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    reactions?: ReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
    readBy?: MessageReadUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    ephemeralExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isEphemeral?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DiscussionPostUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    board?: DiscussionBoardUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    reactions?: ReactionUpdateManyWithoutPostNestedInput
  }

  export type DiscussionPostUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type DiscussionPostUncheckedUpdateManyWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    encryptedContent?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type TaskAssignmentCreateManyTaskInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
  }

  export type TaskAssignmentUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTaskAssignmentsNestedInput
  }

  export type TaskAssignmentUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskAssignmentUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}