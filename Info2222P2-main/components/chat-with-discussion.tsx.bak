"use client"

import React, { useState, useRef } from 'react'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogTrigger } from '@/components/ui/dialog'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { Textarea } from '@/components/ui/textarea'
import { Avatar, AvatarFallback } from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Switch } from '@/components/ui/switch'
import {
  Search,
  PlusCircle,
  MessageSquare,
  LayoutList,
  ChevronDown,
  MessageCircle,
  ArrowUpRight,
  Clock,
  ThumbsUp,
  MessageSquareQuote,
  CheckCircle2,
  User,
  Users,
  Filter,
  SortAsc,
  Send
} from 'lucide-react'

interface DiscussionThread {
  id: string
  title: string
  preview: string
  author: {
    name: string
    avatar?: string
    isAnonymous: boolean
  }
  date: Date
  replyCount: number
  isUnread: boolean
  hasRecentActivity: boolean
  category?: string
  tags?: string[]
  isSolved?: boolean
}

interface DiscussionPost {
  id: string
  author: {
    name: string
    avatar?: string
    isAnonymous: boolean
  }
  content: string
  date: Date
  likes: number
  isLikedByUser: boolean
  isSolution: boolean
  replies: DiscussionPost[]
}

export function ChatWithDiscussion() {
  const [activeTab, setActiveTab] = useState("messages")
  const [sortOrder, setSortOrder] = useState("newest")
  const [searchQuery, setSearchQuery] = useState("")
  const [isNewDiscussionOpen, setIsNewDiscussionOpen] = useState(false)
  const [newDiscussionTitle, setNewDiscussionTitle] = useState("")
  const [newDiscussionContent, setNewDiscussionContent] = useState("")
  const [isAnonymous, setIsAnonymous] = useState(false)
  const [selectedCategory, setSelectedCategory] = useState("")
  const [activeDiscussion, setActiveDiscussion] = useState<string | null>(null)
  const [selectedTags, setSelectedTags] = useState<string[]>([])
  const [showPreview, setShowPreview] = useState(false)
  const [newReplyContent, setNewReplyContent] = useState("")
  const [replyAnonymous, setReplyAnonymous] = useState(false)

  // Mock data for discussions
  const [discussions, setDiscussions] = useState<DiscussionThread[]>([
    {
      id: "disc1",
      title: "How to implement real-time collaboration features?",
      preview: "I'm trying to add collaborative editing to our app but facing issues with conflict resolution. Has anyone successfully implemented this before?",
      author: {
        name: "Alex Johnson",
        isAnonymous: false
      },
      date: new Date(2023, 3, 15),
      replyCount: 8,
      isUnread: true,
      hasRecentActivity: true,
      category: "Development",
      tags: ["collaboration", "real-time", "websockets"]
    },
    {
      id: "disc2",
      title: "Best practices for micro-frontend architecture",
      preview: "Our team is considering moving to a micro-frontend approach. I'd appreciate insights from teams who have experience with this pattern.",
      author: {
        name: "Anonymous",
        isAnonymous: true
      },
      date: new Date(2023, 3, 10),
      replyCount: 12,
      isUnread: false,
      hasRecentActivity: true,
      category: "Architecture",
      tags: ["frontend", "micro-frontend", "architecture"],
      isSolved: true
    },
    {
      id: "disc3",
      title: "Recommendations for state management libraries in 2023",
      preview: "With so many state management options available now, which one would you recommend for a large-scale React application?",
      author: {
        name: "Sam Lee",
        isAnonymous: false
      },
      date: new Date(2023, 3, 5),
      replyCount: 15,
      isUnread: false,
      hasRecentActivity: false,
      category: "Frontend",
      tags: ["react", "state-management", "redux", "zustand"]
    }
  ])

  // Mock data for a single discussion thread
  const [discussionThread, setDiscussionThread] = useState<{
    thread: DiscussionThread | null,
    posts: DiscussionPost[]
  }>({
    thread: null,
    posts: [
      {
        id: "post1",
        author: {
          name: "Alex Johnson",
          isAnonymous: false
        },
        content: "I'm trying to add collaborative editing to our app but facing issues with conflict resolution. Has anyone successfully implemented this before? I've tried using operational transforms but it seems overly complex for our use case.",
        date: new Date(2023, 3, 15),
        likes: 5,
        isLikedByUser: false,
        isSolution: false,
        replies: []
      },
      {
        id: "post2",
        author: {
          name: "Taylor Swift",
          isAnonymous: false
        },
        content: "We implemented real-time collaboration using Y.js and it worked quite well. The CRDT approach solves many of the conflict resolution problems automatically. Happy to share more details if you're interested!",
        date: new Date(2023, 3, 16),
        likes: 12,
        isLikedByUser: true,
        isSolution: true,
        replies: [
          {
            id: "post2-1",
            author: {
              name: "Alex Johnson",
              isAnonymous: false
            },
            content: "That sounds promising! Did you encounter any performance issues with larger documents?",
            date: new Date(2023, 3, 16, 14, 30),
            likes: 2,
            isLikedByUser: false,
            isSolution: false,
            replies: []
          },
          {
            id: "post2-2",
            author: {
              name: "Taylor Swift",
              isAnonymous: false
            },
            content: "We found it scales pretty well for our use case (documents up to ~100KB). For very large documents, you might want to implement some lazy loading strategies.",
            date: new Date(2023, 3, 16, 15, 45),
            likes: 4,
            isLikedByUser: false,
            isSolution: false,
            replies: []
          }
        ]
      }
    ]
  })

  // Format date to relative time (e.g., "2 days ago")
  const formatRelativeTime = (date: Date) => {
    const now = new Date()
    const diffInMs = now.getTime() - date.getTime()
    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24))

    if (diffInDays === 0) {
      const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60))
      if (diffInHours === 0) {
        const diffInMinutes = Math.floor(diffInMs / (1000 * 60))
        return diffInMinutes === 0 ? 'Just now' : `${diffInMinutes} min ago`
      }
      return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`
    }

    if (diffInDays < 30) {
      return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`
    }

    const diffInMonths = Math.floor(diffInDays / 30)
    return `${diffInMonths} month${diffInMonths > 1 ? 's' : ''} ago`
  }

  // Handle opening a specific discussion thread
  const handleOpenDiscussion = (discussionId: string) => {
    const discussion = discussions.find(d => d.id === discussionId)
    if (discussion) {
      setActiveDiscussion(discussionId)
      setDiscussionThread({
        ...discussionThread,
        thread: discussion
      })
    }
  }

  // Handle creating a new discussion
  const handleCreateDiscussion = () => {
    if (newDiscussionTitle.trim() === '' || newDiscussionContent.trim() === '') {
      return // Don't create empty discussions
    }

    const newDiscussion: DiscussionThread = {
      id: `disc${discussions.length + 1}`,
      title: newDiscussionTitle,
      preview: newDiscussionContent.slice(0, 120) + (newDiscussionContent.length > 120 ? '...' : ''),
      author: {
        name: isAnonymous ? "Anonymous" : "Current User",
        isAnonymous
      },
      date: new Date(),
      replyCount: 0,
      isUnread: false,
      hasRecentActivity: true,
      category: selectedCategory || undefined
    }

    setDiscussions([newDiscussion, ...discussions])
    setNewDiscussionTitle("")
    setNewDiscussionContent("")
    setIsAnonymous(false)
    setSelectedCategory("")
    setIsNewDiscussionOpen(false)
  }

  // Handle going back to discussions list
  const handleBackToDiscussions = () => {
    setActiveDiscussion(null)
    setDiscussionThread({
      ...discussionThread,
      thread: null
    })
  }

  // Handle posting a reply
  const handlePostReply = () => {
    if (!newReplyContent.trim()) return;

    const newReply: DiscussionPost = {
      id: `post${Date.now()}`,
      author: {
        name: replyAnonymous ? "Anonymous" : "Current User",
        isAnonymous: replyAnonymous
      },
      content: newReplyContent,
      date: new Date(),
      likes: 0,
      isLikedByUser: false,
      isSolution: false,
      replies: []
    };

    // Add the reply to the current discussion thread
    setDiscussionThread(prev => ({
      ...prev,
      posts: [...prev.posts, newReply]
    }));

    // Update the reply count in the discussion list
    setDiscussions(prev =>
      prev.map(disc =>
        disc.id === activeDiscussion
          ? {...disc, replyCount: disc.replyCount + 1}
          : disc
      )
    );

    // Clear the reply field
    setNewReplyContent("");
    setReplyAnonymous(false);
  }

  // Handle like/upvote of a post
  const handleLikePost = (postId: string) => {
    setDiscussionThread(prev => {
      // Check if it's the main post
      if (prev.posts[0].id === postId) {
        const updatedMainPost = {
          ...prev.posts[0],
          likes: prev.posts[0].isLikedByUser ? prev.posts[0].likes - 1 : prev.posts[0].likes + 1,
          isLikedByUser: !prev.posts[0].isLikedByUser
        };

        return {
          ...prev,
          posts: [updatedMainPost, ...prev.posts.slice(1)]
        };
      }

      // Check if it's a reply
      const updatedPosts = prev.posts.map(post => {
        if (post.id === postId) {
          return {
            ...post,
            likes: post.isLikedByUser ? post.likes - 1 : post.likes + 1,
            isLikedByUser: !post.isLikedByUser
          };
        }

        // Check nested replies
        if (post.replies.some(reply => reply.id === postId)) {
          return {
            ...post,
            replies: post.replies.map(reply =>
              reply.id === postId
                ? {
                    ...reply,
                    likes: reply.isLikedByUser ? reply.likes - 1 : reply.likes + 1,
                    isLikedByUser: !reply.isLikedByUser
                  }
                : reply
            )
          };
        }

        return post;
      });

      return {
        ...prev,
        posts: updatedPosts
      };
    });
  }

  // Handle marking a post as solution
  const handleMarkAsSolution = (postId: string) => {
    // First, unmark any existing solution
    setDiscussionThread(prev => {
      const updatedPosts = prev.posts.map(post => ({
        ...post,
        isSolution: post.id === postId ? true : false
      }));

      return {
        ...prev,
        posts: updatedPosts
      };
    });

    // Mark the discussion as solved in the list
    setDiscussions(prev =>
      prev.map(disc =>
        disc.id === activeDiscussion
          ? {...disc, isSolved: true}
          : disc
      )
    );
  }

  // Get sorted and filtered discussions
  const getSortedDiscussions = () => {
    let filteredDiscussions = [...discussions];

    // Apply search filter if any
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filteredDiscussions = filteredDiscussions.filter(
        disc => disc.title.toLowerCase().includes(query) ||
               disc.preview.toLowerCase().includes(query) ||
               (disc.category && disc.category.toLowerCase().includes(query)) ||
               (disc.tags && disc.tags.some(tag => tag.toLowerCase().includes(query)))
      );
    }

    // Apply sorting
    switch (sortOrder) {
      case "newest":
        return filteredDiscussions.sort((a, b) => b.date.getTime() - a.date.getTime());
      case "active":
        return filteredDiscussions.sort((a, b) => b.replyCount - a.replyCount);
      case "unanswered":
        return filteredDiscussions.sort((a, b) => {
          if (a.isSolved && !b.isSolved) return 1;
          if (!a.isSolved && b.isSolved) return -1;
          return b.date.getTime() - a.date.getTime();
        });
      default:
        return filteredDiscussions;
    }
  }

  // Handle adding a tag to the new discussion
  const handleAddTag = (tag: string) => {
    if (selectedTags.includes(tag)) {
      setSelectedTags(selectedTags.filter(t => t !== tag));
    } else if (selectedTags.length < 5) {
      setSelectedTags([...selectedTags, tag]);
    }
  }

  return (
    <div className="flex h-[calc(100vh-4rem)]">
      <Tabs
        value={activeTab}
        onValueChange={setActiveTab}
        className="flex-1 flex flex-col"
      >
        <div className="border-b flex justify-between items-center p-4">
          <TabsList>
            <TabsTrigger value="messages" className="gap-2">
              <MessageCircle className="h-4 w-4" />
              <span>Messages</span>
            </TabsTrigger>
            <TabsTrigger value="discussions" className="gap-2">
              <MessageSquare className="h-4 w-4" />
              <span>Discussion Board</span>
            </TabsTrigger>
          </TabsList>
        </div>

        <TabsContent value="messages" className="flex-1 flex flex-col p-0 m-0">
          <div className="p-8 text-center flex-1 flex flex-col items-center justify-center text-muted-foreground">
            <MessageCircle className="h-12 w-12 mb-4 opacity-20" />
            <h3 className="text-lg font-medium mb-1">Team Messages</h3>
            <p className="max-w-md">
              Connect with your team through instant messaging.
              This tab would contain the regular chat interface.
            </p>
          </div>
        </TabsContent>

        <TabsContent value="discussions" className="flex-1 p-0 m-0 data-[state=active]:flex flex-col">
          {!activeDiscussion ? (
            <>
              {/* Discussions List Header */}
              <div className="border-b p-4 flex flex-col sm:flex-row justify-between gap-3">
                <div className="relative w-full sm:w-auto max-w-md">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground pointer-events-none" />
                  <Input
                    type="search"
                    placeholder="Search discussions..."
                    className="pl-9 py-2 w-full"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                  />
                </div>

                <div className="flex items-center gap-2">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="outline" size="sm" className="flex items-center gap-1">
                        <SortAsc className="h-4 w-4" />
                        <span className="hidden sm:inline">Sort:</span>
                        <span>{sortOrder === "newest" ? "Newest" : sortOrder === "active" ? "Most Active" : "Unanswered"}</span>
                        <ChevronDown className="h-3 w-3 ml-1" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuItem onClick={() => setSortOrder("newest")}>
                        Newest
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => setSortOrder("active")}>
                        Most Active
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => setSortOrder("unanswered")}>
                        Unanswered
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                  <Button
                    onClick={() => setIsNewDiscussionOpen(true)}
                    className="gap-1"
                  >
                    <PlusCircle className="h-4 w-4" />
                    <span className="hidden sm:inline">New Discussion</span>
                  </Button>
                </div>
              </div>

              {/* Discussions List */}
              <ScrollArea className="flex-1">
                <div className="p-4 space-y-3">
                  {getSortedDiscussions().map(discussion => (
                    <div
                      key={discussion.id}
                      className="border rounded-lg p-4 hover:border-primary/50 hover:bg-primary/5 transition-colors cursor-pointer"
                      onClick={() => handleOpenDiscussion(discussion.id)}
                    >
                      <div className="flex justify-between items-start gap-2 mb-2">
                        <h3 className="font-semibold text-lg truncate flex items-center">
                          {discussion.title}
                          {discussion.isSolved && (
                            <span className="ml-2 text-green-500 inline-flex items-center">
                              <CheckCircle2 className="h-4 w-4" />
                            </span>
                          )}
                          {discussion.hasRecentActivity && !discussion.isUnread && (
                            <span className="ml-2 h-2 w-2 rounded-full bg-blue-400" title="Recent activity" />
                          )}
                        </h3>
                        <div className="flex items-center gap-1 text-muted-foreground text-sm whitespace-nowrap">
                          <Clock className="h-3 w-3" />
                          <span>{formatRelativeTime(discussion.date)}</span>
                        </div>
                      </div>
                      <p className="text-muted-foreground line-clamp-2 text-sm mb-3">
                        {discussion.preview}
                      </p>
                      <div className="flex flex-wrap justify-between items-center gap-2 mt-2">
                        <div className="flex items-center gap-2">
                          <Avatar className="h-6 w-6">
                            <AvatarFallback className="text-xs">
                              {discussion.author.isAnonymous ? "AN" : discussion.author.name.substring(0, 2).toUpperCase()}
                            </AvatarFallback>
                          </Avatar>
                          <span className="text-sm text-muted-foreground">
                            {discussion.author.isAnonymous ? "Anonymous" : discussion.author.name}
                          </span>
                        </div>
                        <div className="flex items-center gap-2 flex-wrap">
                          {discussion.category && (
                            <Badge variant="outline" className="text-xs">
                              {discussion.category}
                            </Badge>
                          )}
                          {discussion.tags && discussion.tags.map(tag => (
                            <Badge key={tag} variant="secondary" className="text-xs">
                              {tag}
                            </Badge>
                          ))}
                          <div className="flex items-center gap-1 text-muted-foreground">
                            <MessageSquare className="h-3 w-3" />
                            <span className="text-xs">{discussion.replyCount}</span>
                          </div>
                          {discussion.isUnread && (
                            <div className="w-2 h-2 rounded-full bg-primary" title="Unread" />
                          )}
                        </div>
                      </div>
                    </div>
                  ))}

                  {getSortedDiscussions().length === 0 && (
                    <div className="text-center py-12">
                      <MessageSquareQuote className="h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-20" />
                      <h3 className="text-lg font-medium mb-1">No discussions found</h3>
                      <p className="text-muted-foreground max-w-md mx-auto mb-4">
                        {searchQuery ? "No discussions match your search criteria." : "Be the first to start a discussion!"}
                      </p>
                      <Button onClick={() => setIsNewDiscussionOpen(true)}>
                        Start a Discussion
                      </Button>
                    </div>
                  )}
                </div>
              </ScrollArea>
            </>
          ) :
            <>
              {/* Discussion Thread View */}
              <div className="border-b p-4 flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleBackToDiscussions}
                  className="gap-1"
                >
                  <ArrowUpRight className="h-4 w-4 rotate-180" />
                  <span>Back to Discussions</span>
                </Button>
                <div className="flex-1 text-center font-medium truncate">
                  {discussionThread.thread?.title}
                </div>
              </div>

              {/* Thread Content */}
              <ScrollArea className="flex-1">
                <div className="p-4 space-y-6">
                  {/* Original Post */}
                  {discussionThread.posts.length > 0 && (
                    <div className="border rounded-lg p-4 bg-primary/5">
                      <div className="flex justify-between items-start gap-2 mb-3">
                        <div className="flex items-center gap-2">
                          <Avatar className="h-8 w-8">
                            <AvatarFallback>
                              {discussionThread.posts[0].author.isAnonymous
                                ? "AN"
                                : discussionThread.posts[0].author.name.substring(0, 2).toUpperCase()
                              }
                            </AvatarFallback>
                          </Avatar>
                          <div>
                            <div className="font-medium">
                              {discussionThread.posts[0].author.isAnonymous
                                ? "Anonymous"
                                : discussionThread.posts[0].author.name
                              }
                            </div>
                            <div className="text-xs text-muted-foreground">
                              {formatRelativeTime(discussionThread.posts[0].date)}
                            </div>
                          </div>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="gap-1"
                          onClick={() => handleLikePost(discussionThread.posts[0].id)}
                        >
                          <ThumbsUp className={`h-4 w-4 ${discussionThread.posts[0].isLikedByUser ? 'fill-primary text-primary' : ''}`} />
                          <span>{discussionThread.posts[0].likes}</span>
                        </Button>
                      </div>
                      <div className="prose prose-sm max-w-none">
                        {discussionThread.posts[0].content}
                      </div>

                      {/* Tags for original post */}
                      {discussionThread.thread?.tags && discussionThread.thread.tags.length > 0 && (
                        <div className="flex flex-wrap gap-1 mt-4 pt-3 border-t">
                          {discussionThread.thread.tags.map(tag => (
                            <Badge key={tag} variant="secondary" className="text-xs">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                  )}

                  {/* Replies */}
                  {discussionThread.posts.slice(1).map(post => (
                    <div key={post.id} className="space-y-4">
                      <div className="border rounded-lg p-4">
                        <div className="flex justify-between items-start gap-2 mb-3">
                          <div className="flex items-center gap-2">
                            <Avatar className="h-8 w-8">
                              <AvatarFallback>
                                {post.author.isAnonymous
                                  ? "AN"
                                  : post.author.name.substring(0, 2).toUpperCase()
                                }
                              </AvatarFallback>
                            </Avatar>
                            <div>
                              <div className="font-medium flex items-center gap-1">
                                {post.author.isAnonymous ? "Anonymous" : post.author.name}
                                {post.isSolution && (
                                  <Badge className="ml-1 bg-green-500 text-white">Solution</Badge>
                                )}
                              </div>
                              <div className="text-xs text-muted-foreground">
                                {formatRelativeTime(post.date)}
                              </div>
                            </div>
                          </div>
                          <div className="flex items-center gap-2">
                            {!post.isSolution && discussionThread.posts[0].author.name === "Alex Johnson" && (
                              <Button
                                variant="outline"
                                size="sm"
                                className="h-7 text-xs"
                                onClick={() => handleMarkAsSolution(post.id)}
                              >
                                Mark as Solution
                              </Button>
                            )}
                            <Button
                              variant="ghost"
                              size="sm"
                              className="gap-1 h-7"
                              onClick={() => handleLikePost(post.id)}
                            >
                              <ThumbsUp className={`h-4 w-4 ${post.isLikedByUser ? 'fill-primary text-primary' : ''}`} />
                              <span>{post.likes}</span>
                            </Button>
                          </div>
                        </div>
                        <div className="prose prose-sm max-w-none">
                          {post.content}
                        </div>
                      </div>

                      {/* Nested Replies */}
                      {post.replies.map(reply => (
                        <div
                          key={reply.id}
                          className="border rounded-lg p-4 ml-8 relative before:content-[''] before:absolute before:top-0 before:-left-4 before:w-3 before:h-8 before:border-l before:border-b before:border-border before:rounded-bl-md"
                        >
                          <div className="flex justify-between items-start gap-2 mb-3">
                            <div className="flex items-center gap-2">
                              <Avatar className="h-7 w-7">
                                <AvatarFallback className="text-xs">
                                  {reply.author.isAnonymous
                                    ? "AN"
                                    : reply.author.name.substring(0, 2).toUpperCase()
                                  }
                                </AvatarFallback>
                              </Avatar>
                              <div>
                                <div className="font-medium text-sm">
                                  {reply.author.isAnonymous ? "Anonymous" : reply.author.name}
                                </div>
                                <div className="text-xs text-muted-foreground">
                                  {formatRelativeTime(reply.date)}
                                </div>
                              </div>
                            </div>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="gap-1 h-6 text-xs"
                              onClick={() => handleLikePost(reply.id)}
                            >
                              <ThumbsUp className={`h-3 w-3 ${reply.isLikedByUser ? 'fill-primary text-primary' : ''}`} />
                              <span>{reply.likes}</span>
                            </Button>
                          </div>
                          <div className="prose prose-sm max-w-none text-sm">
                            {reply.content}
                          </div>
                        </div>
                      ))}
                    </div>
                  ))}
                </div>
              </ScrollArea>

              {/* Reply Form */}
              <div className="border-t p-4">
                <div className="mb-2 flex items-center justify-between">
                  <h4 className="text-sm font-medium">Write a reply</h4>
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-muted-foreground">Post anonymously</span>
                    <Switch
                      id="reply-anonymous"
                      checked={replyAnonymous}
                      onCheckedChange={setReplyAnonymous}
                    />
                  </div>
                </div>
                <div className="flex gap-2">
                  <div className="flex-1 flex flex-col">
                    <Textarea
                      placeholder="Type your reply here..."
                      className="min-h-24 flex-1"
                      value={newReplyContent}
                      onChange={(e) => setNewReplyContent(e.target.value)}
                    />
                    <div className="text-xs text-muted-foreground text-right mt-1">
                      {newReplyContent.length} characters
                    </div>
                  </div>
                  <Button
                    className="self-end"
                    size="icon"
                    onClick={handlePostReply}
                    disabled={!newReplyContent.trim()}
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </>
          )}
        </TabsContent>
      </Tabs>

      {/* New Discussion Dialog */}
      <Dialog open={isNewDiscussionOpen} onOpenChange={setIsNewDiscussionOpen}>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle>Create New Discussion</DialogTitle>
          </DialogHeader>

          {!showPreview ? (
            <div className="space-y-4 mt-2">
              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="text-sm font-medium">Title</label>
                  <span className={`text-xs ${newDiscussionTitle.length > 90 ? "text-amber-500" : "text-muted-foreground"}`}>
                    {newDiscussionTitle.length}/100
                  </span>
                </div>
                <Input
                  value={newDiscussionTitle}
                  onChange={(e) => setNewDiscussionTitle(e.target.value.slice(0, 100))}
                  placeholder="What do you want to discuss?"
                />
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="text-sm font-medium">Description</label>
                  <span className="text-xs text-muted-foreground">
                    {newDiscussionContent.length} characters
                  </span>
                </div>
                <Textarea
                  value={newDiscussionContent}
                  onChange={(e) => setNewDiscussionContent(e.target.value)}
                  placeholder="Provide more details about your question or topic..."
                  className="min-h-24"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium block mb-2">Category</label>
                  <select
                    className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
                    value={selectedCategory}
                    onChange={(e) => setSelectedCategory(e.target.value)}
                  >
                    <option value="">Select a category</option>
                    <option value="General">General</option>
                    <option value="Development">Development</option>
                    <option value="Design">Design</option>
                    <option value="Architecture">Architecture</option>
                    <option value="Frontend">Frontend</option>
                    <option value="Backend">Backend</option>
                  </select>
                </div>
                <div className="flex items-end">
                  <div className="flex items-center space-x-2">
                    <Switch
                      id="anonymous-mode"
                      checked={isAnonymous}
                      onCheckedChange={setIsAnonymous}
                    />
                    <label htmlFor="anonymous-mode" className="text-sm font-medium">
                      Post anonymously
                    </label>
                  </div>
                </div>
              </div>

              <div>
                <label className="text-sm font-medium block mb-2">Tags (optional, max 5)</label>
                <div className="flex flex-wrap gap-2">
                  {['react', 'nextjs', 'typescript', 'ui', 'backend', 'database', 'api', 'styling'].map(tag => (
                    <Badge
                      key={tag}
                      variant={selectedTags.includes(tag) ? "default" : "outline"}
                      className="cursor-pointer"
                      onClick={() => handleAddTag(tag)}
                    >
                      {tag}
                    </Badge>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            <div className="space-y-4 mt-2">
              <h3 className="font-semibold text-lg">{newDiscussionTitle}</h3>

              <div className="flex items-center gap-2 text-sm">
                <Avatar className="h-6 w-6">
                  <AvatarFallback className="text-xs">
                    {isAnonymous ? "AN" : "YO"}
                  </AvatarFallback>
                </Avatar>
                <span className="text-muted-foreground">
                  {isAnonymous ? "Anonymous" : "You"} • Just now
                </span>
              </div>

              <div className="border rounded-lg p-4 bg-primary/5">
                <div className="prose prose-sm max-w-none">
                  {newDiscussionContent}
                </div>
              </div>

              <div className="flex flex-wrap gap-1">
                {selectedCategory && (
                  <Badge variant="outline">{selectedCategory}</Badge>
                )}
                {selectedTags.map(tag => (
                  <Badge key={tag} variant="secondary">{tag}</Badge>
                ))}
              </div>
            </div>
          )}

          <DialogFooter className="mt-4 flex sm:justify-between">
            <div className="hidden sm:flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowPreview(!showPreview)}
              >
                {showPreview ? "Edit" : "Preview"}
              </Button>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => setIsNewDiscussionOpen(false)}>
                Cancel
              </Button>
              <Button
                onClick={handleCreateDiscussion}
                disabled={!newDiscussionTitle.trim() || !newDiscussionContent.trim()}
              >
                Create Discussion
              </Button>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
